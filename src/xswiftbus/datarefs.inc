// DO NOT EDIT
// This file automatically generated from DataRefs.txt by datarefs.pl

//! X-Plane Plugin SDK C++ API
namespace xplane
{
    //! X-Plane datarefs
    namespace data
    {
        //! sim datarefs
        namespace sim
        {
            //! aircraft datarefs
            namespace aircraft
            {
                //! artstability datarefs
                namespace artstability
                {
                    //! Undocumented dataref
                    struct acf_ASh_hi_pos
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/artstability/acf_ASh_hi_pos"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ASh_lo_rate
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/artstability/acf_ASh_lo_rate"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_AShiV
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/artstability/acf_AShiV"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ASloV
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/artstability/acf_ASloV"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ASmaxh_hi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/artstability/acf_ASmaxh_hi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ASmaxh_lo
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/artstability/acf_ASmaxh_lo"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ASmaxp_hi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/artstability/acf_ASmaxp_hi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ASmaxp_lo
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/artstability/acf_ASmaxp_lo"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ASmaxr_hi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/artstability/acf_ASmaxr_hi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ASmaxr_lo
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/artstability/acf_ASmaxr_lo"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ASp_hi_pos
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/artstability/acf_ASp_hi_pos"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ASp_lo_rate
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/artstability/acf_ASp_lo_rate"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ASr_hi_rate
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/artstability/acf_ASr_hi_rate"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ASr_lo_rate
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/artstability/acf_ASr_lo_rate"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_has_clutch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/artstability/acf_has_clutch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! autopilot datarefs
                namespace autopilot
                {
                    //! Attitude source for the autopilot: 10 = AHRS, 11 = elec gyro, 12 = vacuum gyro, 13 = turn coordinator and absolute pressure transducer (enum)
                    struct ah_source
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/autopilot/ah_source"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Step increment for autopilot altitude (Feet)
                    struct alt_step_ft
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/autopilot/alt_step_ft"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Directional gyro source for the autopillot: 10 = AHRS, 11 = elec gyro (HSI or DG), 12 = vacuum gyro (DG) (enum)
                    struct dg_source
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/autopilot/dg_source"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 0=X-Plane custom, 1=Airliner, 2=GFC-700, 3=S-Tec 55, 4=S-Tec 55 with altitude preselect, 5=KAP-140 single axis, 6=KAP-140 dual axis, 7=KAP-140 dual axis with altitude preselect, 8=Piper Autocontrol (enum)
                    struct preconfigured_ap_type
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/autopilot/preconfigured_ap_type"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Step increment for radio altimeter decision height (Feet)
                    struct radio_altimeter_step_ft
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/autopilot/radio_altimeter_step_ft"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Whether the autopilot is strictly single axis (bank) only. (boolean)
                    struct single_axis_autopilot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/autopilot/single_axis_autopilot"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Step increment for autopilot VVI (Feet)
                    struct vvi_step_ft
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/autopilot/vvi_step_ft"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! bodies datarefs
                namespace bodies
                {
                    //! cd for fuselage
                    struct acf_fuse_cd
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/bodies/acf_fuse_cd"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! [PART] cd for all parts
                    struct acf_fuse_cd_array
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/bodies/acf_fuse_cd_array"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 95;
                    };

                }

                //! controls datarefs
                namespace controls
                {
                    //! Prop idle speed radians/second (rad/sec)
                    struct acf_RSC_idlespeed_prp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_RSC_idlespeed_prp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_RSC_maxgreen_prp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_RSC_maxgreen_prp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Minimum prop speed with governor on, radians/second (rad/sec)
                    struct acf_RSC_mingov_prp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_RSC_mingov_prp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_RSC_mingreen_prp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_RSC_mingreen_prp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Max prop speed radians/second (rad/sec)
                    struct acf_RSC_redline_prp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_RSC_redline_prp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ail1_crat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_ail1_crat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ail1_dn
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_ail1_dn"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ail1_up
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_ail1_up"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ail2_crat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_ail2_crat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ail2_dn
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_ail2_dn"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ail2_up
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_ail2_up"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Enter 0.0 to be able to deflect the controls as fast as the pilot can move the stick or the art stab system can command a deflection. If the plane has a hydraulic system and a max rate of control deflection, though, enter how long it takes to go from center to fully-deflected. (secs)
                    struct acf_ailn_def_time
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_ailn_def_time"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the amount of aileron deflection (as a ratio of max) induced by the aerodynamic effect of static trim tabs. ([-1..1])
                    struct acf_ailn_tab
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_ailn_tab"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the speed of trim time, expressed as a ratio, where 1.0 means it takes 20 seconds to fully move trim from one extreme to the other.  2.0 means trim is twice as fast. (ratio)
                    struct acf_ailn_trim_speedrat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_ailn_trim_speedrat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the total time taken for the aileron trim to go from one extreme to the other. (secs)
                    struct acf_ailn_trim_time
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_ailn_trim_time"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_blown_flap_min_engag
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_blown_flap_min_engag"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_elev_crat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_elev_crat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Enter 0.0 to be able to deflect the controls as fast as the pilot can move the stick or the art stab system can command a deflection. If the plane has a hydraulic system and a max rate of control deflection, though, enter how long it takes to go from center to fully-deflected. (secs)
                    struct acf_elev_def_time
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_elev_def_time"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_elev_dn
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_elev_dn"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the amount of elevator deflection (as a ratio of max) induced by the aerodynamic effect of static trim tabs. ([-1..1])
                    struct acf_elev_tab
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_elev_tab"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the speed of trim time, expressed as a ratio, where 1.0 means it takes 20 seconds to fully move trim from one extreme to the other.  2.0 means trim is twice as fast. (ratio)
                    struct acf_elev_trim_speedrat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_elev_trim_speedrat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the total time taken for the elevator trim to go from one extreme to the other. (secs)
                    struct acf_elev_trim_time
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_elev_trim_time"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_elev_up
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_elev_up"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_flap2_cd
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_flap2_cd"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_flap2_cl
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_flap2_cl"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_flap2_cm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_flap2_cm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_flap2_crat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_flap2_crat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_flap2_dn
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_flap2_dn"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Undocumented dataref
                    struct acf_flap2_type
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_flap2_type"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_flap_cd
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_flap_cd"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_flap_cl
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_flap_cl"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_flap_cm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_flap_cm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_flap_crat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_flap_crat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_flap_deftime
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_flap_deftime"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_flap_detents
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_flap_detents"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_flap_dn
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_flap_dn"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Undocumented dataref
                    struct acf_flap_type
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_flap_type"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the maximum degrees deflection down for a horizontal stabilizer that moves during trim (degrees)
                    struct acf_hstb_trim_dn
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_hstb_trim_dn"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the maximum degrees deflection up for a horizontal stabilizer that moves during trim (degrees)
                    struct acf_hstb_trim_up
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_hstb_trim_up"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Maximum aileron upward trim, expressed as a ratio of maximum aileron upward travel ([0..1])
                    struct acf_max_trim_ailn
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_max_trim_ailn"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Maximum nose-up trim, expressed as a ratio of maximum nose-up elevator deflection ([0..1])
                    struct acf_max_trim_elev
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_max_trim_elev"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Maximum rudder right trim, expressed as a ratio of maximum rudder right travel ([0..1])
                    struct acf_max_trim_rudd
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_max_trim_rudd"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Maximum aileron downward trim, expressed as a ratio of maximum aileron downward travel ([0..1])
                    struct acf_min_trim_ailn
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_min_trim_ailn"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Maximum nose-down trim, expressed as a ratio of maximum nose-down elevator deflection ([0..1])
                    struct acf_min_trim_elev
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_min_trim_elev"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Maximum rudder left trim, expressed as a ratio of maximum rudder left travel ([0..1])
                    struct acf_min_trim_rudd
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_min_trim_rudd"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_rud2_crat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_rud2_crat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_rud2_lr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_rud2_lr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_rud2_rr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_rud2_rr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_rudd_crat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_rudd_crat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Enter 0.0 to be able to deflect the controls as fast as the pilot can move the stick or the art stab system can command a deflection. If the plane has a hydraulic system and a max rate of control deflection, though, enter how long it takes to go from center to fully-deflected. (secs)
                    struct acf_rudd_def_time
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_rudd_def_time"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_rudd_lr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_rudd_lr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_rudd_rr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_rudd_rr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the amount of rudder deflection (as a ratio of max) induced by the aerodynamic effect of static trim tabs. ([0..1])
                    struct acf_rudd_tab
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_rudd_tab"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the speed of trim time, expressed as a ratio, where 1.0 means it takes 20 seconds to fully move trim from one extreme to the other.  2.0 means trim is twice as fast. (ratio)
                    struct acf_rudd_trim_speedrat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_rudd_trim_speedrat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the total time taken for the rudder trim to go from one extreme to the other. (secs)
                    struct acf_rudd_trim_time
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_rudd_trim_time"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_sbrk2_crat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_sbrk2_crat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_sbrk2_up
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_sbrk2_up"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_sbrk_crat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_sbrk_crat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_sbrk_up
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_sbrk_up"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_slat_inc
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_slat_inc"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Speedbrake time to extend. (secs)
                    struct acf_speedbrake_ext_time
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_speedbrake_ext_time"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Speedbrake time to retract. (secs)
                    struct acf_speedbrake_ret_time
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_speedbrake_ret_time"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_splr_crat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_splr_crat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_splr_up
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_splr_up"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the trim position for takeoff expressed as a ratio, 1 = max up trim, -1 = max down trim. ([-1..1])
                    struct acf_takeoff_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_takeoff_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???? (newtonmeters)
                    struct acf_trq_max_eng
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_trq_max_eng"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! NOTE : This is now the same as acf_trq_max_en in v7 (newtonmeters)
                    struct acf_trq_max_prp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/controls/acf_trq_max_prp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! electrical datarefs
                namespace electrical
                {
                    //! The number of batteries on this plane (count)
                    struct num_batteries
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/electrical/num_batteries"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The number of busses on this plane (count)
                    struct num_buses
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/electrical/num_buses"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The number of generators on this plane (count)
                    struct num_generators
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/electrical/num_generators"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The number of inverters on this plane (count)
                    struct num_inverters
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/electrical/num_inverters"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! engine datarefs
                namespace engine
                {
                    //! Undocumented dataref
                    struct aacf_rotor_mi_rat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/aacf_rotor_mi_rat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct aacf_tip_mach_des_100
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/aacf_tip_mach_des_100"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct aacf_tip_mach_des_50
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/aacf_tip_mach_des_50"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct aacf_tip_weight
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/aacf_tip_weight"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine idle speed radians/second. (rad/sec)
                    struct acf_RSC_idlespeed_eng
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_RSC_idlespeed_eng"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_RSC_maxgreen_eng
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_RSC_maxgreen_eng"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Minimum engine speed with governor on radians/second (rad/sec)
                    struct acf_RSC_mingov_eng
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_RSC_mingov_eng"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_RSC_mingreen_eng
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_RSC_mingreen_eng"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Max engine speed radians/second. (rad/sec)
                    struct acf_RSC_redline_eng
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_RSC_redline_eng"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_auto_featherEQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_auto_featherEQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_burnerinc
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_burnerinc"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Critical altitude for props (meters)
                    struct acf_critalt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_critalt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_face_jet
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_face_jet"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_face_rocket
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_face_rocket"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_fmax_opt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_fmax_opt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_fmax_sl
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_fmax_sl"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_fmax_vac
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_fmax_vac"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is for backward compatibility, you can use acf_prop_gear_rat from v700 onwards
                    struct acf_gear_rat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_gear_rat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_h_opt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_h_opt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! MAx cylinder head temperature the plane can have before engine failure.
                    struct acf_max_CHT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_max_CHT"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Max exhaust gas temperature the plane can have before engine failure.
                    struct acf_max_EGT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_max_EGT"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Max Fuel Pressure the plane can have before engine failure.
                    struct acf_max_FUELP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_max_FUELP"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Max internal turbine temperature the plane can have before engine failure.
                    struct acf_max_ITT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_max_ITT"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Max Oil Pressure the plane can have before engine failure.
                    struct acf_max_OILP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_max_OILP"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Max Oil Temperature the plane can have before engine failure.
                    struct acf_max_OILT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_max_OILT"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_max_mach_eff
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_max_mach_eff"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_mpmax
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_mpmax"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_num_engines
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_num_engines"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_pmax
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_pmax"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Where the prop pitch angle goes when the governor loses oil pressure: 0=low pitch, 1=high pitch, 2=feather, 3=start lock (enum)
                    struct acf_prop_fail_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_prop_fail_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the delay in increasing the throttle for jet engines - it is the number of seconds to actuate a full advance. (seconds)
                    struct acf_spooltime_jet
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_spooltime_jet"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the delay in increasing the throttle for prop/turboprop engines - it is the number of seconds to actuate a full advance. (seconds)
                    struct acf_spooltime_prop
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_spooltime_prop"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the number of seconds it takes for a free turbine to spin up from idle to full RPM. (seconds)
                    struct acf_spooltime_turbine
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_spooltime_turbine"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the ratio of the engine's max RPM that the starter can spin the engine up to before it loses torque. (Ratio)
                    struct acf_starter_max_rpm_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_starter_max_rpm_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the ratio of the engine's maximum torque that the starter applies at its design RPM. (Ratio)
                    struct acf_starter_torque_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_starter_torque_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_throtmax_FWD
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_throtmax_FWD"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_throtmax_REV
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_throtmax_REV"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_tmax
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/acf_tmax"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Boost Capacity (seconds)
                    struct boost_max_seconds
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/boost_max_seconds"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Boost Amount (ratio)
                    struct boost_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/engine/boost_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! forcefeedback datarefs
                namespace forcefeedback
                {
                    //! Undocumented dataref
                    struct acf_ff_hydraulic
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/forcefeedback/acf_ff_hydraulic"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ff_stickshaker
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/forcefeedback/acf_ff_stickshaker"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! gear datarefs
                namespace gear
                {
                    //! door current angle, not in flite since it is geo and this is a nice place to keep all the door geo.
                    struct acf_gear_door_ang_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/gear/acf_gear_door_ang_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Undocumented dataref
                    struct acf_gear_is_skid
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/gear/acf_gear_is_skid"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are any of the gear on this plane retractable.  We strongly recommend you DO NOT write to this dataref. (bool)
                    struct acf_gear_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/gear/acf_gear_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_h_eqlbm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/gear/acf_h_eqlbm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_nw_steerdeg1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/gear/acf_nw_steerdeg1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_nw_steerdeg2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/gear/acf_nw_steerdeg2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_the_eqlbm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/gear/acf_the_eqlbm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_water_rud_area
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/gear/acf_water_rud_area"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_water_rud_longarm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/gear/acf_water_rud_longarm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_water_rud_maxdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/gear/acf_water_rud_maxdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! limits datarefs
                namespace limits
                {
                    //! High value of the green arc for the cylinder-head temperature instrument (degC)
                    struct green_hi_CHT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_hi_CHT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the green arc for the exhaust gas temperature instrument (degC)
                    struct green_hi_EGT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_hi_EGT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the green arc for the engine pressure ratio instrument (ratio)
                    struct green_hi_EPR
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_hi_EPR"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the green arc for the fuel flow instrument (gal/hr_or_lb/hr)
                    struct green_hi_FF
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_hi_FF"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the green arc for the interturbine temperature instrument (degC)
                    struct green_hi_ITT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_hi_ITT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the green arc for the manifold pressure instrument (inhg)
                    struct green_hi_MP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_hi_MP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the green arc for the N1 instrument (percent)
                    struct green_hi_N1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_hi_N1"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the green arc for the N2 instrument (percent)
                    struct green_hi_N2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_hi_N2"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the green arc for the torque instrument (ft-lbs)
                    struct green_hi_TRQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_hi_TRQ"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the green arc for the battery amperage instrument (amps)
                    struct green_hi_bat_amp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_hi_bat_amp"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the green arc for the battery voltage instrument (volts)
                    struct green_hi_bat_volt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_hi_bat_volt"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the green arc for the fuel pressure instrument (PSI)
                    struct green_hi_fuelP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_hi_fuelP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the green arc for the generator amperage instrument (amps)
                    struct green_hi_gen_amp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_hi_gen_amp"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the green arc for the oil pressure instrument (PSI)
                    struct green_hi_oilP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_hi_oilP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the green arc for the oil temperature instrument (degC)
                    struct green_hi_oilT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_hi_oilT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the green arc for the vacuum pressure instrument (psi)
                    struct green_hi_vac
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_hi_vac"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the green arc for the cylinder-head temperature instrument (degC)
                    struct green_lo_CHT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_lo_CHT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the green arc for the exhaust gas temperature instrument (degC)
                    struct green_lo_EGT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_lo_EGT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the green arc for the engine pressure ratio instrument (ratio)
                    struct green_lo_EPR
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_lo_EPR"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the green arc for the fuel flow instrument (gal/hr_or_lb/hr)
                    struct green_lo_FF
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_lo_FF"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the green arc for the interturbine temperature instrument (degC)
                    struct green_lo_ITT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_lo_ITT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the green arc for the manifold pressure instrument (inhg)
                    struct green_lo_MP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_lo_MP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the green arc for the N1 instrument (percent)
                    struct green_lo_N1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_lo_N1"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the green arc for the N2 instrument (percent)
                    struct green_lo_N2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_lo_N2"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the green arc for the torque instrument (ft-lbs)
                    struct green_lo_TRQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_lo_TRQ"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the green arc for the battery amperage instrument (amps)
                    struct green_lo_bat_amp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_lo_bat_amp"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the green arc for the battery voltage instrument (volts)
                    struct green_lo_bat_volt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_lo_bat_volt"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the green arc for the fuel pressure instrument (PSI)
                    struct green_lo_fuelP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_lo_fuelP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the green arc for the generator amperage instrument (amps)
                    struct green_lo_gen_amp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_lo_gen_amp"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the green arc for the oil pressure instrument (PSI)
                    struct green_lo_oilP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_lo_oilP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the green arc for the oil temperature instrument (degC)
                    struct green_lo_oilT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_lo_oilT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the green arc for the vacuum pressure instrument (psi)
                    struct green_lo_vac
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/green_lo_vac"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Battery amp when the non-standby batteries are fully charged. (amps)
                    struct max_bat_amp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/max_bat_amp"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the voltage when the standard (non-standby) batteries are fully charged. (volts)
                    struct max_bat_volt_standard
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/max_bat_volt_standard"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vacuum pressure put out when the engine is running at the bottom of red line (max vacuum). (psi)
                    struct max_vac
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/max_vac"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the red arc for the cylinder-head temperature instrument (degC)
                    struct red_hi_CHT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_hi_CHT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the red arc for the exhaust gas temperature instrument (degC)
                    struct red_hi_EGT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_hi_EGT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the red arc for the engine pressure ratio instrument (ratio)
                    struct red_hi_EPR
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_hi_EPR"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the red arc for the fuel flow instrument (gal/hr_or_lb/hr)
                    struct red_hi_FF
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_hi_FF"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the red arc for the interturbine temperature instrument (degC)
                    struct red_hi_ITT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_hi_ITT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the red arc for the manifold pressure instrument (inhg)
                    struct red_hi_MP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_hi_MP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the red arc for the N1 instrument (percent)
                    struct red_hi_N1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_hi_N1"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the red arc for the N2 instrument (percent)
                    struct red_hi_N2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_hi_N2"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the red arc for the torque instrument (ft-lbs)
                    struct red_hi_TRQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_hi_TRQ"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the red arc for the battery amperage instrument (amps)
                    struct red_hi_bat_amp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_hi_bat_amp"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the red arc for the battery voltage instrument (volts)
                    struct red_hi_bat_volt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_hi_bat_volt"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the red arc for the fuel pressure instrument (PSI)
                    struct red_hi_fuelP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_hi_fuelP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the red arc for the generator amperage instrument (amps)
                    struct red_hi_gen_amp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_hi_gen_amp"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the red arc for the oil pressure instrument (PSI)
                    struct red_hi_oilP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_hi_oilP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the red arc for the oil temperature instrument (degC)
                    struct red_hi_oilT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_hi_oilT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the red arc for the vacuum pressure instrument (psi)
                    struct red_hi_vac
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_hi_vac"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the red arc for the cylinder-head temperature instrument (degC)
                    struct red_lo_CHT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_lo_CHT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the red arc for the exhaust gas temperature instrument (degC)
                    struct red_lo_EGT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_lo_EGT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the red arc for the engine pressure ratio instrument (ratio)
                    struct red_lo_EPR
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_lo_EPR"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the red arc for the fuel flow instrument (gal/hr_or_lb/hr)
                    struct red_lo_FF
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_lo_FF"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the red arc for the interturbine temperature instrument (degC)
                    struct red_lo_ITT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_lo_ITT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the red arc for the manifold pressure instrument (inhg)
                    struct red_lo_MP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_lo_MP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the red arc for the N1 instrument (percent)
                    struct red_lo_N1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_lo_N1"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the red arc for the N2 instrument (percent)
                    struct red_lo_N2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_lo_N2"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the red arc for the torque instrument (ft-lbs)
                    struct red_lo_TRQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_lo_TRQ"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the red arc for the battery amperage instrument (amps)
                    struct red_lo_bat_amp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_lo_bat_amp"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the red arc for the battery voltage instrument (volts)
                    struct red_lo_bat_volt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_lo_bat_volt"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the red arc for the fuel pressure instrument (PSI)
                    struct red_lo_fuelP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_lo_fuelP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the red arc for the generator amperage instrument (amps)
                    struct red_lo_gen_amp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_lo_gen_amp"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the red arc for the oil pressure instrument (PSI)
                    struct red_lo_oilP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_lo_oilP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the red arc for the oil temperature instrument (degC)
                    struct red_lo_oilT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_lo_oilT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the red arc for the vacuum pressure instrument (psi)
                    struct red_lo_vac
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/red_lo_vac"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the yellow arc for the cylinder-head temperature instrument (degC)
                    struct yellow_hi_CHT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_hi_CHT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the yellow arc for the exhaust gas temperature instrument (degC)
                    struct yellow_hi_EGT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_hi_EGT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the yellow arc for the engine pressure ratio instrument (ratio)
                    struct yellow_hi_EPR
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_hi_EPR"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the yellow arc for the fuel flow instrument (gal/hr_or_lb/hr)
                    struct yellow_hi_FF
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_hi_FF"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the yellow arc for the interturbine temperature instrument (degC)
                    struct yellow_hi_ITT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_hi_ITT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the yellow arc for the manifold pressure instrument (inhg)
                    struct yellow_hi_MP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_hi_MP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the yellow arc for the N1 instrument (percent)
                    struct yellow_hi_N1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_hi_N1"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the yellow arc for the N2 instrument (percent)
                    struct yellow_hi_N2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_hi_N2"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the yellow arc for the torque instrument (ft-lbs)
                    struct yellow_hi_TRQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_hi_TRQ"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the yellow arc for the battery amperage instrument (amps)
                    struct yellow_hi_bat_amp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_hi_bat_amp"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the yellow arc for the battery voltage instrument (volts)
                    struct yellow_hi_bat_volt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_hi_bat_volt"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the yellow arc for the fuel pressure instrument (PSI)
                    struct yellow_hi_fuelP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_hi_fuelP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the yellow arc for the generator amperage instrument (amps)
                    struct yellow_hi_gen_amp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_hi_gen_amp"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the yellow arc for the oil pressure instrument (PSI)
                    struct yellow_hi_oilP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_hi_oilP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the yellow arc for the oil temperature instrument (degC)
                    struct yellow_hi_oilT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_hi_oilT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! High value of the yellow arc for the vacuum pressure instrument (psi)
                    struct yellow_hi_vac
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_hi_vac"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the yellow arc for the cylinder-head temperature instrument (degC)
                    struct yellow_lo_CHT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_lo_CHT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the yellow arc for the exhaust gas temperature instrument (degC)
                    struct yellow_lo_EGT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_lo_EGT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the yellow arc for the engine pressure ratio instrument (ratio)
                    struct yellow_lo_EPR
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_lo_EPR"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the yellow arc for the fuel flow instrument (gal/hr_or_lb/hr)
                    struct yellow_lo_FF
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_lo_FF"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the yellow arc for the interturbine temperature instrument (degC)
                    struct yellow_lo_ITT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_lo_ITT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the yellow arc for the manifold pressure instrument (inhg)
                    struct yellow_lo_MP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_lo_MP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the yellow arc for the N1 instrument (percent)
                    struct yellow_lo_N1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_lo_N1"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the yellow arc for the N2 instrument (percent)
                    struct yellow_lo_N2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_lo_N2"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the yellow arc for the torque instrument (ft-lbs)
                    struct yellow_lo_TRQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_lo_TRQ"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the yellow arc for the battery amperage instrument (amps)
                    struct yellow_lo_bat_amp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_lo_bat_amp"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the yellow arc for the battery voltage instrument (volts)
                    struct yellow_lo_bat_volt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_lo_bat_volt"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the yellow arc for the fuel pressure instrument (PSI)
                    struct yellow_lo_fuelP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_lo_fuelP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the yellow arc for the generator amperage instrument (amps)
                    struct yellow_lo_gen_amp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_lo_gen_amp"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the yellow arc for the oil pressure instrument (PSI)
                    struct yellow_lo_oilP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_lo_oilP"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the yellow arc for the oil temperature instrument (degC)
                    struct yellow_lo_oilT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_lo_oilT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Low value of the yellow arc for the vacuum pressure instrument (psi)
                    struct yellow_lo_vac
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/limits/yellow_lo_vac"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! overflow datarefs
                namespace overflow
                {
                    //! ??? (meters)
                    struct SFC_alt_hi_JET
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/SFC_alt_hi_JET"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ??? (meters)
                    struct SFC_alt_hi_PRP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/SFC_alt_hi_PRP"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ??? (meters)
                    struct SFC_alt_lo_JET
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/SFC_alt_lo_JET"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ??? (meters)
                    struct SFC_alt_lo_PRP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/SFC_alt_lo_PRP"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct SFC_full_hi_JET
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/SFC_full_hi_JET"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct SFC_full_hi_PRP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/SFC_full_hi_PRP"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct SFC_full_lo_JET
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/SFC_full_lo_JET"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct SFC_full_lo_PRP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/SFC_full_lo_PRP"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct SFC_half_hi_JET
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/SFC_half_hi_JET"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct SFC_half_hi_PRP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/SFC_half_hi_PRP"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct SFC_half_lo_JET
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/SFC_half_lo_JET"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct SFC_half_lo_PRP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/SFC_half_lo_PRP"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ASg_hi_pos
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_ASg_hi_pos"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! astab stuff I should have had in there the first time!
                    struct acf_ASg_hi_rate
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_ASg_hi_rate"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! astab stuff i should have had in there the first time!
                    struct acf_ASh_hi_rate
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_ASh_hi_rate"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! astab stuff I should have had in there the first time!
                    struct acf_ASmaxg_hi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_ASmaxg_hi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ASp_hi_rate
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_ASp_hi_rate"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vle
                    struct acf_Vle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_Vle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_Vmca
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_Vmca"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! v-speeds
                    struct acf_Vyse
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_Vyse"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! auto-trim out any flight loads... numerous planes have this. (boolean)
                    struct acf_auto_trimEQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_auto_trimEQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! rolling and braking
                    struct acf_brake_co
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_brake_co"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! cg limits
                    struct acf_cgZ_aft
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_cgZ_aft"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_cgZ_fwd
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_cgZ_fwd"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_cus_dig_dec
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_cus_dig_dec"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 50;
                    };

                    //! Undocumented dataref
                    struct acf_cus_dig_dig
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_cus_dig_dig"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 50;
                    };

                    //! Undocumented dataref
                    struct acf_cus_dig_offset
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_cus_dig_offset"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 50;
                    };

                    //! Undocumented dataref
                    struct acf_cus_dig_scale
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_cus_dig_scale"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 50;
                    };

                    //! Undocumented dataref
                    struct acf_cus_dig_use
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_cus_dig_use"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 50;
                    };

                    //! Undocumented dataref
                    struct acf_cus_rnd_hi_ang
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_cus_rnd_hi_ang"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 50;
                    };

                    //! Undocumented dataref
                    struct acf_cus_rnd_hi_val
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_cus_rnd_hi_val"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 50;
                    };

                    //! draw labels on the instruments... many do not label the scales, only draw digital numbers.
                    struct acf_cus_rnd_label
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_cus_rnd_label"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 50;
                    };

                    //! Undocumented dataref
                    struct acf_cus_rnd_lo_ang
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_cus_rnd_lo_ang"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 50;
                    };

                    //! Undocumented dataref
                    struct acf_cus_rnd_lo_val
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_cus_rnd_lo_val"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 50;
                    };

                    //! mirror the angles on even-number engines on the twins
                    struct acf_cus_rnd_mirror
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_cus_rnd_mirror"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 50;
                    };

                    //! Undocumented dataref
                    struct acf_cus_rnd_use
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_cus_rnd_use"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 50;
                    };

                    //! used by x-19
                    struct acf_diff_coll_with_ptch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_diff_coll_with_ptch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ch-47 chinook performance
                    struct acf_diff_cycl_with_hdng_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_diff_cycl_with_hdng_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! [WING] variable dihedral
                    struct acf_dihed2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_dihed2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! engine always runs at optimum mixture... like FADEC or auto conversions.
                    struct acf_drive_by_wire
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_drive_by_wire"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! elevator align with flaps
                    struct acf_elevflaps
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_elevflaps"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! mass of each engine for distribution and loss on engine separation. NOTE : This used to be f57 in v6
                    struct acf_eng_mass
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_eng_mass"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! let people decide feathered pitch to get right for their plane.
                    struct acf_feathered_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_feathered_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! flapping hinge arm
                    struct acf_flap_arm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_flap_arm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! flap actuation... like for really high-lift guys still manuevering at low speeds.
                    struct acf_flap_ptch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_flap_ptch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_flap_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_flap_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! the Jatviggen does flaps with gear automatically
                    struct acf_flaps_with_gearEQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_flaps_with_gearEQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! bring in the flaps with thrust vector
                    struct acf_flaps_with_vecEQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_flaps_with_vecEQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! gear cycle time... different for different gear in some cases, NOTE : This used to be f5 in v6
                    struct acf_gear_cyc_time
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_gear_cyc_time"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! this gear turns with rudder input - writable until v10
                    struct acf_gear_steers
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_gear_steers"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! has dual-cue flight-dir
                    struct acf_has_DC_fd
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_has_DC_fd"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_has_beta
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_has_beta"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Aircraft has option to draw from any tank
                    struct acf_has_fuel_all
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_has_fuel_all"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Aircraft has Fuel selector (boolean)
                    struct acf_has_fuel_any
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_has_fuel_any"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! refueling port
                    struct acf_has_refuel
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_has_refuel"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! for those motorgliders or prop/jet combos or what have you that hide their props when not in use
                    struct acf_hide_prop_at_90_vect
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_hide_prop_at_90_vect"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct acf_inc_ail
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_inc_ail"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! ???
                    struct acf_inc_ail2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_inc_ail2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! ???
                    struct acf_inc_vec
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_inc_vec"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! plane has specularity lighting.
                    struct acf_is_glossy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_is_glossy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! jettisonable load is slung now
                    struct acf_jett_is_slung
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_jett_is_slung"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! hang-gliders and wright gliders
                    struct acf_mass_shift
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_mass_shift"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! hang-gliders and wright gliders
                    struct acf_mass_shift_dx
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_mass_shift_dx"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! hang-gliders and wright gliders
                    struct acf_mass_shift_dz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_mass_shift_dz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! max pressurization of the fuselage (pascals)
                    struct acf_max_press_diff
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_max_press_diff"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! tail wheel spring constant (per degree offset from centered)
                    struct acf_nosewheel_k
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_nosewheel_k"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! number fuel tanks - as of 860, all planes have 9 tanks and ratios for each - ratio of 0.0 means tank is not used (count)
                    struct acf_num_tanks
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_num_tanks"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! number props can be different than number of engines - * This can crash Xplane, use at your own risk.  Not writeable in v10.
                    struct acf_num_thrustpoints
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_num_thrustpoints"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! capacity of the crew oxygen reserve (liters)
                    struct acf_o2_bottle_cap_liters
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_o2_bottle_cap_liters"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! phase thrust-vectoring maneuvering out as we go from 90 to 0 deg tvec, going from maneuver-to-hover to regular thrust
                    struct acf_phase_tvect_out_at_00
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_phase_tvect_out_at_00"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! phase thrust-vectoring maneuvering in as we go from 90 to 0, going from hover with puffers to f-22 dogfight
                    struct acf_phase_tvect_out_at_90
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_phase_tvect_out_at_90"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_puffX
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_puffX"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_puffY
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_puffY"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manuevering rocket forces
                    struct acf_puffZ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_puffZ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_refuel_X
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_refuel_X"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_refuel_Y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_refuel_Y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! refueling port location
                    struct acf_refuel_Z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_refuel_Z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! viggen does this!
                    struct acf_rev_on_touchdown
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_rev_on_touchdown"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_roll_co
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_roll_co"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! amount the stab moves in trim automatically as you go to redline (zero at zero airspeed) (degree)
                    struct acf_stab_delinc_to_Vne
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_stab_delinc_to_Vne"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! alpha of stall warning... user must specify since warning different for different planes.
                    struct acf_stall_warn_alpha
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_stall_warn_alpha"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! fuel tank locations - was dim 3 in XP8 and earlier
                    struct acf_tank_X
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_tank_X"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 9;
                    };

                    //! fuel tank locations - was dim 3 in XP8 and earlier
                    struct acf_tank_Y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_tank_Y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 9;
                    };

                    //! fuel tank locations - was dim 3 in XP8 and earlier
                    struct acf_tank_Z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_tank_Z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 9;
                    };

                    //! fuel tank ratio per tank -- was dim 3 in xp 8 and earlier
                    struct acf_tank_rat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_tank_rat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 9;
                    };

                    //! Undocumented dataref
                    struct acf_tow_hook_Y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_tow_hook_Y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_tow_hook_Z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_tow_hook_Z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! prop needs offset in z and y from the pivot point... z for V-22, y for motorgliders
                    struct acf_vectarmY
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_vectarmY"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! bitchin betty 2... for fighters
                    struct acf_warn2EQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_warn2EQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_win_hook_Y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_win_hook_Y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_win_hook_Z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_win_hook_Z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! wing-tilt steering
                    struct acf_wing_tilt_ptch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_wing_tilt_ptch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! wing-tilt steering
                    struct acf_wing_tilt_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/acf_wing_tilt_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ??? (ratio)
                    struct ff_rat_idle_JET
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/ff_rat_idle_JET"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ??? (ratio)
                    struct ff_rat_idle_PRP
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/ff_rat_idle_PRP"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct has_hsi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/has_hsi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct has_litemap_tex_2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/has_litemap_tex_2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct has_pre_rotate
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/has_pre_rotate"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct has_transonic_audio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/has_transonic_audio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct has_yawdamp_but
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/has_yawdamp_but"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct jett_X
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/jett_X"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct jett_Y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/jett_Y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct jett_Z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/overflow/jett_Z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! parts datarefs
                namespace parts
                {
                    //! [WING]
                    struct acf_AR
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_AR"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! [WING]
                    struct acf_Croot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_Croot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! [WING]
                    struct acf_Ctip
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_Ctip"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! array of airfoil names, per part (string[40])
                    struct acf_Rafl0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_Rafl0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2920;
                    };

                    //! file, not path (string[40])
                    struct acf_Rafl1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_Rafl1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2920;
                    };

                    //! file, not path (string[40])
                    struct acf_Tafl0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_Tafl0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2920;
                    };

                    //! file, not path (string[40])
                    struct acf_Tafl1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_Tafl1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2920;
                    };

                    //! [PART] body aero center offset from it's reference
                    struct acf_X_body_aero
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_X_body_aero"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 95;
                    };

                    //! [GEAR]
                    struct acf_Xarm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_Xarm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! [PART] used for force build-up
                    struct acf_Y_body_aero
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_Y_body_aero"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 95;
                    };

                    //! [GEAR]
                    struct acf_Yarm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_Yarm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! [PART]
                    struct acf_Z_body_aero
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_Z_body_aero"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 95;
                    };

                    //! [GEAR]
                    struct acf_Zarm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_Zarm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! ???
                    struct acf_ail1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_ail1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! ???
                    struct acf_ail2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_ail2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! ???
                    struct acf_anginc
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_anginc"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! [PART] Radius of part (meters)
                    struct acf_body_r
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_body_r"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 95;
                    };

                    //! [WING]
                    struct acf_delta_fac
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_delta_fac"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! [WING]
                    struct acf_dihed1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_dihed1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! ???
                    struct acf_drud
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_drud"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! [WING] Oswald's E
                    struct acf_e
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_e"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! ???
                    struct acf_elev
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_elev"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! [WING]
                    struct acf_els
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_els"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! ???
                    struct acf_flap
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_flap"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! ???
                    struct acf_flap2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_flap2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! Undocumented dataref
                    struct acf_flapEQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_flapEQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! extended
                    struct acf_gear_axiE
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gear_axiE"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! now
                    struct acf_gear_axiN
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gear_axiN"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! retracted
                    struct acf_gear_axiR
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gear_axiR"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! landing gear deployment, 0.0->1.0
                    struct acf_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Undocumented dataref
                    struct acf_gear_latE
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gear_latE"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Undocumented dataref
                    struct acf_gear_latN
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gear_latN"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Undocumented dataref
                    struct acf_gear_latR
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gear_latR"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! gear param
                    struct acf_gear_leglen
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gear_leglen"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Undocumented dataref
                    struct acf_gear_lonE
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gear_lonE"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Undocumented dataref
                    struct acf_gear_lonN
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gear_lonN"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Undocumented dataref
                    struct acf_gear_lonR
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gear_lonR"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! gear param
                    struct acf_gear_tirrad
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gear_tirrad"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Undocumented dataref
                    struct acf_gear_type
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gear_type"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! x location of the Nth gear's attach point relative to the CG, airplane coordinates.  This does not change as gear is raised. (meters)
                    struct acf_gear_xnodef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gear_xnodef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! y location of the Nth gear's attach point relative to the CG, airplane coordinates.  This does not change as gear is raised. (meters)
                    struct acf_gear_ynodef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gear_ynodef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! z location of the Nth gear's attach point relative to the CG, airplane coordinates.  This does not change as gear is raised. (meters)
                    struct acf_gear_znodef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gear_znodef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! gear param
                    struct acf_gearcon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gearcon"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! gear param
                    struct acf_geardmp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_geardmp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! static deflection... the gear TIRE LOCATION IS OFFSET DOWN BY THIS MUCH IN X-PLANE since people ALWAYS enter gear location UNDER STATIC DEFLECTION!
                    struct acf_gearstatdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_gearstatdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Undocumented dataref
                    struct acf_mac
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_mac"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 730;
                    };

                    //! ???
                    struct acf_rudd
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_rudd"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! ???
                    struct acf_rudd2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_rudd2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! s for each element for foils, and FRONT, SIDE, TOP for BODIES.
                    struct acf_s
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_s"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 730;
                    };

                    //! ???
                    struct acf_sbrk
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_sbrk"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! Undocumented dataref
                    struct acf_sbrkEQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_sbrkEQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! [WING] semilen of the JOINED wing segments, all JOINED SEGMENTS, for AR and CDi and ground effect, etc.
                    struct acf_semilen_JND
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_semilen_JND"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! [WING] semilen this segment only
                    struct acf_semilen_SEG
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_semilen_SEG"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! ???
                    struct acf_slat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_slat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! Undocumented dataref
                    struct acf_slatEQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_slatEQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct acf_splr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_splr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! [WING]
                    struct acf_sweep1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_sweep1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! [WING]
                    struct acf_sweep2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/parts/acf_sweep2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                }

                //! prop datarefs
                namespace prop
                {
                    //! design point
                    struct acf_des_kts_acf
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_des_kts_acf"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! design point
                    struct acf_des_rpm_prp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_des_rpm_prp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! for total propwash
                    struct acf_discarea
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_discarea"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! engine type - read only in v11, but you should NEVER EVER write this in v10 or earlier.  0=recip carb, 1=recip injected, 2=free turbine, 3=electric, 4=lo bypass jet, 5=hi bypass jet, 6=rocket, 7=tip rockets, 8=fixed turbine (enum)
                    struct acf_en_type
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_en_type"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! by governor
                    struct acf_max_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_max_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! by governor
                    struct acf_min_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_min_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! MI for changing prop RPM
                    struct acf_miprop_rpm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_miprop_rpm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! float so we can multiply effects by floats
                    struct acf_num_blades
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_num_blades"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! [PART]
                    struct acf_part_eq
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_part_eq"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 95;
                    };

                    //! 1.0=CW, -1.0=CCW, float so we can multiply effects by floats - made NOT writable in 11.10.  YOU SHOULD NEVER WRITE THIS IN ANY VERSION OF X-PLANE.
                    struct acf_prop_dir
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_prop_dir"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! prop to engine or common power source
                    struct acf_prop_gear_rat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_prop_gear_rat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! mass of prop
                    struct acf_prop_mass
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_prop_mass"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! prop type
                    struct acf_prop_type
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_prop_type"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! in reverse
                    struct acf_reversed_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_reversed_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! better organization to do it this way, NOTE : Used to be i8 in version 6
                    struct acf_revthrust_eq
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_revthrust_eq"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! area each ring of prop
                    struct acf_ringarea
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_ringarea"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! this is physical geometry,
                    struct acf_sidecant
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_sidecant"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! built into planes & helos and changed with thrust vector
                    struct acf_vertcant
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/prop/acf_vertcant"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                }

                //! specialcontrols datarefs
                namespace specialcontrols
                {
                    //! Undocumented dataref
                    struct acf_ail1flaps
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_ail1flaps"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ail1pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_ail1pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ail2flaps
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_ail2flaps"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_ail2pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_ail2pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_autofbrkEQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_autofbrkEQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_autosbrkEQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_autosbrkEQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_autoslatEQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_autoslatEQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_autosweepEQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_autosweepEQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_chute_Y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_chute_Y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_chute_Z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_chute_Z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_chute_area
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_chute_area"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_diff_thro_with_hdng
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_diff_thro_with_hdng"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_gearhornEQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_gearhornEQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_jato_Y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_jato_Y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_jato_Z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_jato_Z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_jato_dur
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_jato_dur"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_jato_sfc
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_jato_sfc"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_jato_theta
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_jato_theta"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_jato_thrust
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_jato_thrust"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_stabhdng
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_stabhdng"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_stabroll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_stabroll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_tks_cap_liter
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_tks_cap_liter"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_tvec_hdng
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_tvec_hdng"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_tvec_ptch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_tvec_ptch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_tvec_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_tvec_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_warn1EQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/specialcontrols/acf_warn1EQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! systems datarefs
                namespace systems
                {
                    //! If this is true, commands to engage the AP servos will be ignored if the FD is not on. (boolean)
                    struct fdir_needed_to_engage_servos
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/systems/fdir_needed_to_engage_servos"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! view datarefs
                namespace view
                {
                    //! Undocumented dataref
                    struct acf_Gneg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_Gneg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_Gpos
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_Gpos"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_HUD_cntry
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_HUD_cntry"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_HUD_delx
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_HUD_delx"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_HUD_dely
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_HUD_dely"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ICAO code for aircraft (a string) entered by author (string)
                    struct acf_ICAO
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_ICAO"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 40;
                    };

                    //! Undocumented dataref
                    struct acf_Mmo
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_Mmo"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_Vfe
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_Vfe"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_Vne
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_Vne"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_Vno
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_Vno"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_Vs
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_Vs"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Various speed maxes for the aircraft. (kias)
                    struct acf_Vso
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_Vso"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! air speed indicator knots calibration (enum)
                    struct acf_asi_kts
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_asi_kts"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Author's Name (string)
                    struct acf_author
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_author"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 500;
                    };

                    //! cockpit panel type (enum)
                    struct acf_cockpit_type
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_cockpit_type"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Brief description of the plane.  Was 500 chars in older planes. (string)
                    struct acf_descrip
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_descrip"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 260;
                    };

                    //! position of door relative to CG, latitude offset in meters (meters)
                    struct acf_door_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_door_x"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position of door relative to CG, vertical offset in meters (meters)
                    struct acf_door_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_door_y"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position of door relative to CG, longitude offset in meters (meters)
                    struct acf_door_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_door_z"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! has Hoops HUD
                    struct acf_has_HOOPS_HUD
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_has_HOOPS_HUD"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! has single cue flight director? (bool)
                    struct acf_has_SC_fd
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_has_SC_fd"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Do we have a lite map texture for this? (enum)
                    struct acf_has_litemap_tex
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_has_litemap_tex"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! has audio stall warning? (bool)
                    struct acf_has_stallwarn
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_has_stallwarn"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! index number of livery (index)
                    struct acf_livery_index
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_livery_index"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! path of current livery.  dir separator i, ends in dir separator.  WARNING: slow dataref, don't read a lot! (string)
                    struct acf_livery_path
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_livery_path"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 1024;
                    };

                    //! Notes on the plane (string)
                    struct acf_notes
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_notes"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 240;
                    };

                    //! Position of pilot's head relative to CG, X (pos)
                    struct acf_peX
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_peX"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Position of pilot's head relative to CG, Y (pos)
                    struct acf_peY
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_peY"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Position of pilot's head relative to CG, Z (pos)
                    struct acf_peZ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_peZ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_size_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_size_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! shadow size, and viewing distance size
                    struct acf_size_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_size_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Tail number (string)
                    struct acf_tailnum
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_tailnum"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 40;
                    };

                    //! The yaw string, that thing that no one knows how to get rid of.
                    struct acf_yawstringx
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_yawstringx"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_yawstringy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/view/acf_yawstringy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! vtolcontrols datarefs
                namespace vtolcontrols
                {
                    //! Undocumented dataref
                    struct acf_auto_rpm_with_tvec
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/vtolcontrols/acf_auto_rpm_with_tvec"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_cyclic_ailn
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/vtolcontrols/acf_cyclic_ailn"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_cyclic_elev
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/vtolcontrols/acf_cyclic_elev"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_delta3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/vtolcontrols/acf_delta3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_diff_coll_with_hdng
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/vtolcontrols/acf_diff_coll_with_hdng"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_diff_coll_with_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/vtolcontrols/acf_diff_coll_with_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_diff_cycl_with_hdng_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/vtolcontrols/acf_diff_cycl_with_hdng_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_puffL
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/vtolcontrols/acf_puffL"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_puffM
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/vtolcontrols/acf_puffM"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_puffN
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/vtolcontrols/acf_puffN"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! max rotor trim aft when stick fully aft (degrees)
                    struct acf_rotor_trim_max_aft
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/vtolcontrols/acf_rotor_trim_max_aft"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! max rotor trim aft when stick fully forward (degrees)
                    struct acf_rotor_trim_max_fwd
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/vtolcontrols/acf_rotor_trim_max_fwd"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_tail_with_coll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/vtolcontrols/acf_tail_with_coll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_vectEQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/vtolcontrols/acf_vectEQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_vectarmZ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/vtolcontrols/acf_vectarmZ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! weight datarefs
                namespace weight
                {
                    //! Undocumented dataref
                    struct acf_Jxx_unitmass
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/weight/acf_Jxx_unitmass"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_Jyy_unitmass
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/weight/acf_Jyy_unitmass"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_Jzz_unitmass
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/weight/acf_Jzz_unitmass"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the ORIGINAL reference point in PM in _feet_. (feet)
                    struct acf_cgY_original
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/weight/acf_cgY_original"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the ORIGINAL reference point in PM in _feet_. (feet)
                    struct acf_cgZ_original
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/weight/acf_cgZ_original"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_m_displaced
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/weight/acf_m_displaced"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_m_displaced_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/weight/acf_m_displaced_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_m_empty
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/weight/acf_m_empty"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Weight of total fuel - appears to be in lbs. (lbs)
                    struct acf_m_fuel_tot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/weight/acf_m_fuel_tot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_m_jettison
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/weight/acf_m_jettison"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct acf_m_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft/weight/acf_m_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

            }

            //! aircraft2 datarefs
            namespace aircraft2
            {
                //! engine datarefs
                namespace engine
                {
                    //! dirtiness of built-in exhaust effects, 1.0 is default, positive numbers are more dirty (ratio)
                    struct exhaust_dirtiness_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/engine/exhaust_dirtiness_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Time for flaps to go from full retraction to full extension (second)
                    struct flap_extension_time_sec
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/engine/flap_extension_time_sec"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Time for flaps to go from full extension to full retraction (second)
                    struct flap_retraction_time_sec
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/engine/flap_retraction_time_sec"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the idle ratio for the engines at high idle. 1.0 provides default behavior; this can be any number greater than zero. (multiplier)
                    struct high_idle_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/engine/high_idle_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the idle ratio for the engines at low idle.  1.0 provides default behavior; this can be any number greater than zero. (multiplier)
                    struct low_idle_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/engine/low_idle_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the maximum power output of the engine at sea level.  Note that if the engine has a waste gate this is the same as max power at critical altitude. (watts)
                    struct max_power_limited_watts
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/engine/max_power_limited_watts"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! metadata datarefs
                namespace metadata
                {
                    //! 1 if the vehicle is categorized as an airliner, 0 if it is not. (Boolean)
                    struct is_airliner
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/metadata/is_airliner"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 1 if the vehicle is categorized as a cargo aircraft, 0 if it is not. (Boolean)
                    struct is_cargo
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/metadata/is_cargo"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 1 if the vehicle is categorized as experimental, 0 if it is not. (Boolean)
                    struct is_experimental
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/metadata/is_experimental"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 1 if the vehicle is categorized as a general aviation aircraft, 0 if it is not. (Boolean)
                    struct is_general_aviation
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/metadata/is_general_aviation"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 1 if the vehicle is categorized as a glider, 0 if it is not. (Boolean)
                    struct is_glider
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/metadata/is_glider"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 1 if the vehicle is categorized as a helicopter, 0 if it is not. (Boolean)
                    struct is_helicopter
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/metadata/is_helicopter"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 1 if the vehicle is categorized as a military aircraft, 0 if it is not. (Boolean)
                    struct is_military
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/metadata/is_military"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 1 if the vehicle is categorized as a science fiction aircraft, 0 if it is not. (Boolean)
                    struct is_sci_fi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/metadata/is_sci_fi"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 1 if the vehicle is categorized as a seaplane, 0 if it is not. (Boolean)
                    struct is_seaplane
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/metadata/is_seaplane"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 1 if the vehicle is categorized as an ultralight, 0 if it is not. (Boolean)
                    struct is_ultralight
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/metadata/is_ultralight"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 1 if the vehicle is categorized as a VTOL, 0 if it is not. (Boolean)
                    struct is_vtol
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/aircraft2/metadata/is_vtol"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

            }

            //! airfoils datarefs
            namespace airfoils
            {
                //! ???
                struct afl_almax_array
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/airfoils/afl_almax_array"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 56;
                };

                //! ???
                struct afl_almin_array
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/airfoils/afl_almin_array"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 56;
                };

                //! ???
                struct afl_cd
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/airfoils/afl_cd"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 56;
                };

                //! ???
                struct afl_cl
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/airfoils/afl_cl"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 56;
                };

                //! ???
                struct afl_clB
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/airfoils/afl_clB"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 56;
                };

                //! ???
                struct afl_clM
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/airfoils/afl_clM"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 56;
                };

                //! ???
                struct afl_cm
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/airfoils/afl_cm"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 56;
                };

                //! ???
                struct afl_mach_div
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/airfoils/afl_mach_div"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 56;
                };

                //! ???
                struct afl_re_num
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/airfoils/afl_re_num"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 56;
                };

                //! ???
                struct afl_t_rat
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/airfoils/afl_t_rat"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 56;
                };

            }

            //! atc datarefs
            namespace atc
            {
                //! Is the ATIS system enabled? If not, no ATIS text or audio will appear even when tuned to a proper frequency. (boolean)
                struct atis_enabled
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/atc/atis_enabled"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Is the user's COM1 radio tuned to a freq that's actively being transmitted on by a pilot or ATC? (boolean)
                struct com1_active
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/atc/com1_active"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The ATC facility type that the user's aircraft is tuned to. 0=None, 1=Del, 2=Gnd, 3=Twr, 4=Tracon, 5=Ctr (enum)
                struct com1_tuned_facility
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/atc/com1_tuned_facility"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Is the user's COM1 radio tuned to a freq that's actively being transmitted on by a pilot or ATC? (boolean)
                struct com2_active
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/atc/com2_active"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The ATC facility type that the user's aircraft is tuned to. 0=None, 1=Del, 2=Gnd, 3=Twr, 4=Tracon, 5=Ctr (enum)
                struct com2_tuned_facility
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/atc/com2_tuned_facility"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Is the Users/P0 aircraft currently transmitting on the radio? (boolean)
                struct user_aircraft_transmitting
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/atc/user_aircraft_transmitting"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

            }

            //! cockpit datarefs
            namespace cockpit
            {
                //! autopilot datarefs
                namespace autopilot
                {
                    //! Airspeed to hold, this changes from knots to a mach number (knots_mach)
                    struct airspeed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/airspeed"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is our airspeed a mach number (this is writable if the panel has the button, otherwise sim controls) (boolean)
                    struct airspeed_is_mach
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/airspeed_is_mach"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Airspeed mode for the autopilot. DEPRECATED (enum)
                    struct airspeed_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/airspeed_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Altitude dialed into the AP (ftmsl)
                    struct altitude
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/altitude"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vertical navigation (alt hold, VVI hold, V-Nav approach). DEPRECATED (enum)
                    struct altitude_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/altitude_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The autopilot master mode (off=0, flight director=1, on=2) (enum)
                    struct autopilot_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/autopilot_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Various autopilot engage modes, etc.  See docs for flags (flags)
                    struct autopilot_state
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/autopilot_state"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Back course selection (boolean)
                    struct backcourse_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/backcourse_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Currently held altitude (remembered until you hit flchg) (ftmsl)
                    struct current_altitude
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/current_altitude"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The recommended pitch from the Flight Director.  Use override_flightdir (degrees)
                    struct flight_director_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/flight_director_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The recommended roll from the Flight Director.  Use override_flightdir (degrees)
                    struct flight_director_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/flight_director_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The heading to fly (true, legacy) (degt)
                    struct heading
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/heading"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The heading to fly (magnetic, preferred) pilot (degm)
                    struct heading_mag
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/heading_mag"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The heading to fly (magnetic, preferred) copilot (degm)
                    struct heading_mag2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/heading_mag2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Lateral navigation mode (GPS, heading, L-Nav approach). DEPRECATED (enum)
                    struct heading_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/heading_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Bank limit - 0 = auto, 1-6 = 5-30 degrees of bank (enum)
                    struct heading_roll_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/heading_roll_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Glide-slope mode (off, armed, engaged). DEPRECATED (enum)
                    struct mode_gls
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/mode_gls"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Localizer mode (off, armed, engaged). DEPRECATED (enum)
                    struct mode_hnav
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/mode_hnav"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Heading to fly in nav mode - write this when override_nav_heading is set.  Useful for making a custom GPS that flies arcs. (degrees)
                    struct nav_steer_deg_mag
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/nav_steer_deg_mag"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The pitch held when in pitch-hold mode. (degrees)
                    struct syn_hold_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/syn_hold_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vertical speed to hold (fpm)
                    struct vertical_velocity
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/autopilot/vertical_velocity"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! avidyne datarefs
                namespace avidyne
                {
                    //! ???
                    struct alt_hil
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/avidyne/alt_hil"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct hsi_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/avidyne/hsi_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct lft_hil
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/avidyne/lft_hil"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct map_range_sel
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/avidyne/map_range_sel"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct rgt_hil
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/avidyne/rgt_hil"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct src
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/avidyne/src"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                }

                //! electrical datarefs
                namespace electrical
                {
                    //! HUD brightness level (0-1) (ratio)
                    struct HUD_brightness
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/HUD_brightness"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the HUD on (bool)
                    struct HUD_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/HUD_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Cockpit light rheostat - this appears to be legacy and no longer used.
                    struct ah_bar
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/ah_bar"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does this cockpit have an avionics switch (bool)
                    struct avionics_EQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/avionics_EQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is there power to the avionics (bool)
                    struct avionics_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/avionics_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does this cockpit have a battery switch (bool)
                    struct battery_EQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/battery_EQ"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the battery selected on (bool)
                    struct battery_array_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/battery_array_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Current charge of each of the 8 batteries in watt-hours. (watt/hours)
                    struct battery_charge_watt_hr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/battery_charge_watt_hr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Is the main battery on (bool)
                    struct battery_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/battery_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Beacon Light (bool)
                    struct beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Cockpit light level (ratio)
                    struct cockpit_lights
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/cockpit_lights"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are cockpit lights on.  (NOTE - previous docs were wrong, this is always read-only) (bool)
                    struct cockpit_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/cockpit_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does this cockpit have generator switches? (bool)
                    struct generator_EQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/generator_EQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! APU Generator amps (amps)
                    struct generator_apu_amps
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/generator_apu_amps"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the APU Generator on (bool)
                    struct generator_apu_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/generator_apu_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the generator on (to charge batteries) - one for each engine (bool)
                    struct generator_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/generator_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! GPU Amps (amps)
                    struct gpu_amps
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/gpu_amps"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the GPU on (bool)
                    struct gpu_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/gpu_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Instrument LED lighting level (ratio)
                    struct instrument_brightness
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/instrument_brightness"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing Light (bool)
                    struct landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Navigation Light (bool)
                    struct nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Night vision goggles on? (bool)
                    struct night_vision_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/night_vision_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Strobe Light (bool)
                    struct strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Sunglasses on? (bool)
                    struct sunglasses_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/sunglasses_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Taxi Lights (bool)
                    struct taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/electrical/taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! engine datarefs
                namespace engine
                {
                    //! ???
                    struct APU_N1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/engine/APU_N1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! APU running - 1 = on, 0 = off. (boolean)
                    struct APU_running
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/engine/APU_running"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! APU starter switch 0 = off, 1 = on, 2 = start (enum)
                    struct APU_switch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/engine/APU_switch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Clutch engaged
                    struct clutch_engage
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/engine/clutch_engage"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the fadec on (one per engine) (bool)
                    struct fadec_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/engine/fadec_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Is the fuel pump on (one per engine) (bool)
                    struct fuel_pump_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/engine/fuel_pump_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Which fuel tank is open for flight
                    struct fuel_tank_selector
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/engine/fuel_tank_selector"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Which fuel tank is open for transfers (destination)
                    struct fuel_tank_transfer
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/engine/fuel_tank_transfer"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Which fuel tank is open for transfers (source)
                    struct fuel_tank_transfer_from
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/engine/fuel_tank_transfer_from"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Idle speed (per engine) (bool)
                    struct idle_speed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/engine/idle_speed"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! starter ignition (boolean)
                    struct igniters_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/engine/igniters_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ignition key position 0 = off, 1 = left, 2 = right, 3 = both (enum)
                    struct ignition_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/engine/ignition_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Does this cockpit have inverter switches? (bool)
                    struct inverter_eq
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/engine/inverter_eq"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the inverter providing power (was one per engine, now 2 max.) (bool)
                    struct inverter_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/engine/inverter_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2;
                    };

                    //! time since ignition was pressed or something (seconds)
                    struct starter_duration
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/engine/starter_duration"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                }

                //! g430 datarefs
                namespace g430
                {
                    //! enter com=0, enter_nav=1 (enum)
                    struct g430_nav_com_sel
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/g430/g430_nav_com_sel"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2;
                    };

                }

                //! gps datarefs
                namespace gps
                {
                    //! The currently programmed GPS course (true degrees)
                    struct course
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gps/course"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The index of the navaid we're flying to
                    struct destination_index
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gps/destination_index"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The current type of navaid we're flying to
                    struct destination_type
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gps/destination_type"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! gyros datarefs
                namespace gyros
                {
                    //! A delta between the plane's heading and the DG for AHARS 2 powered DGs (degrees)
                    struct dg_drift_ahars2_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/dg_drift_ahars2_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! A delta between the plane's heading and the DG for AHARS 1 powered DGs (degrees)
                    struct dg_drift_ahars_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/dg_drift_ahars_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! A delta between the plane's heading and the DG for electric 2 powered DGs (degrees)
                    struct dg_drift_ele2_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/dg_drift_ele2_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! A delta between the plane's heading and the DG for electric 1 powered DGs (degrees)
                    struct dg_drift_ele_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/dg_drift_ele_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! A delta between the plane's heading and the DG for vacuum 2 powered DGs (degrees)
                    struct dg_drift_vac2_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/dg_drift_vac2_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! A delta between the plane's heading and the DG for vacuum 1 powered DGs (degrees)
                    struct dg_drift_vac_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/dg_drift_vac_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! attitude indicator for this gyro is caged. 0 for fully free, 1 for fully caged. (ratio)
                    struct gyr_cage_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/gyr_cage_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 6;
                    };

                    //! DG/HSI instrument for this gyro must show flag because gyro is not spinning, or magnetometer failure, or adjustment in progress (boolean)
                    struct gyr_flag
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/gyr_flag"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 6;
                    };

                    //! was dim 4 until 920 enums are ahrs1,ahrs2,elec1,elec2,vac1,vac2
                    struct gyr_force
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/gyr_force"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 6;
                    };

                    //! free or slaved to magnetometer, the enums are ahrs1,ahrs2,elec1,elec2,vac1,vac2 (boolean)
                    struct gyr_free_slaved
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/gyr_free_slaved"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 6;
                    };

                    //! was dim 4 until 920 enums are ahrs1,ahrs2,elec1,elec2,vac1,vac2
                    struct gyr_spin
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/gyr_spin"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 6;
                    };

                    //! The indicated roll on the panel for the second vacuum instrument - dataref name is worng! (degrees)
                    struct phi_ele_ind_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/phi_ele_ind_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated roll on the panel for the copilot's side, AHARS (degrees)
                    struct phi_ind_ahars_copilot_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/phi_ind_ahars_copilot_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated roll on the panel for the pilot's side, AHARS (degrees)
                    struct phi_ind_ahars_pilot_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/phi_ind_ahars_pilot_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated roll on the panel for the first elect instrument (degrees)
                    struct phi_ind_deg3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/phi_ind_deg3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated roll on the panel for the second elect instrument (degrees)
                    struct phi_ind_deg4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/phi_ind_deg4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated roll on the panel for the copilot's side, electric (degrees)
                    struct phi_ind_elec_copilot_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/phi_ind_elec_copilot_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated roll on the panel for the pilot's side, electric (degrees)
                    struct phi_ind_elec_pilot_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/phi_ind_elec_pilot_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated roll on the panel for the copilot's side, vacuum driven (degrees)
                    struct phi_ind_vac_copilot_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/phi_ind_vac_copilot_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated roll on the panel for the pilot's side, vacuum driven (degrees)
                    struct phi_ind_vac_pilot_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/phi_ind_vac_pilot_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated roll on the panel for the first vacuum instrument (degrees)
                    struct phi_vac_ind_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/phi_vac_ind_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated heading on the panel for the second vacuum instrument - dataref name is worng! (degrees_magnetic)
                    struct psi_ele_ind_degm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/psi_ele_ind_degm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated magnetic heading on the panel for the copilot's side, AHARS (degrees_magnetic)
                    struct psi_ind_ahars_copilot_degm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/psi_ind_ahars_copilot_degm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated magnetic heading on the panel for the pilot's side, AHARS (degrees_magnetic)
                    struct psi_ind_ahars_pilot_degm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/psi_ind_ahars_pilot_degm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated heading on the panel for the first elect instrument (degrees_magnetic)
                    struct psi_ind_degm3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/psi_ind_degm3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated heading on the panel for the second elect instrument (degrees_magnetic)
                    struct psi_ind_degm4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/psi_ind_degm4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated magnetic heading on the panel for the copilot's side, electric (degrees_magnetic)
                    struct psi_ind_elec_copilot_degm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/psi_ind_elec_copilot_degm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated magnetic heading on the panel for the pilot's side, electric (degrees_magnetic)
                    struct psi_ind_elec_pilot_degm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/psi_ind_elec_pilot_degm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated magnetic heading on the panel for the copilot's side, vacuum driven (degrees_magnetic)
                    struct psi_ind_vac_copilot_degm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/psi_ind_vac_copilot_degm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated magnetic heading on the panel for the pilot's side, vacuum driven (degrees_magnetic)
                    struct psi_ind_vac_pilot_degm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/psi_ind_vac_pilot_degm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated heading on the panel for the first vacuum instrument (degrees_magnetic)
                    struct psi_vac_ind_degm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/psi_vac_ind_degm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated pitch on the panel for the second vacuum instrument - dataref name is worng! (degrees)
                    struct the_ele_ind_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/the_ele_ind_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated pitch on the panel for the copilot's side, AHARS (degrees)
                    struct the_ind_ahars_copilot_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/the_ind_ahars_copilot_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated pitch on the panel for the pilot's side, AHARS (degrees)
                    struct the_ind_ahars_pilot_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/the_ind_ahars_pilot_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated pitch on the panel for the first elect instrument (degrees)
                    struct the_ind_deg3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/the_ind_deg3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated pitch on the panel for the second elect instrument (degrees)
                    struct the_ind_deg4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/the_ind_deg4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated pitch on the panel for the copilot's side, electric (degrees)
                    struct the_ind_elec_copilot_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/the_ind_elec_copilot_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated pitch on the panel for the pilot's side, electric (degrees)
                    struct the_ind_elec_pilot_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/the_ind_elec_pilot_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated pitch on the panel for the copilot's side, vacuum driven (degrees)
                    struct the_ind_vac_copilot_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/the_ind_vac_copilot_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated pitch on the panel for the pilot's side, vacuum driven (degrees)
                    struct the_ind_vac_pilot_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/the_ind_vac_pilot_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The indicated pitch on the panel for the first vacuum instrument (degrees)
                    struct the_vac_ind_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/gyros/the_vac_ind_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! misc datarefs
                namespace misc
                {
                    //! Adjustment to the artificial horizon bars (pilot) (pixels)
                    struct ah_adjust
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/ah_adjust"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Adjustment to the artificial horizon bars (copilot) (pixels)
                    struct ah_adjust2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/ah_adjust2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The pilots altimeter setting
                    struct barometer_setting
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/barometer_setting"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The copilots altimeter setting
                    struct barometer_setting2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/barometer_setting2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Indicated cockpit heading in magnetic degrees (degm)
                    struct compass_indicated
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/compass_indicated"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic Quantity 1
                    struct hydraulic_quantity
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/hydraulic_quantity"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic Quantity 2
                    struct hydraulic_quantity2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/hydraulic_quantity2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the inner marker beacon lit right now
                    struct inner_marker_lit
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/inner_marker_lit"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the middle marker beacon lit right now
                    struct middle_marker_lit
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/middle_marker_lit"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the outer marker beacon lit right now
                    struct outer_marker_lit
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/outer_marker_lit"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are we over the inner marker beacon
                    struct over_inner_marker
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/over_inner_marker"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are we over the middle marker beacon
                    struct over_middle_marker
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/over_middle_marker"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are we over the outer marker beacon
                    struct over_outer_marker
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/over_outer_marker"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The decision height for the radio altimeter (Feet)
                    struct radio_altimeter_minimum
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/radio_altimeter_minimum"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Show our path as we fly?
                    struct show_path
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/show_path"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vacuum Ratio
                    struct vacuum
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/vacuum"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vacuum 2 Ratio
                    struct vacuum2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/misc/vacuum2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! pressure datarefs
                namespace pressure
                {
                    //! 0=off,1=L,2=B,3=R,4=APU (enum)
                    struct bleed_air_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/pressure/bleed_air_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Bleeding air is on (legacy) (bool)
                    struct bleed_air_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/pressure/bleed_air_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The real cabin altitude (BEFORE 730 this was incorrectly int type). Writeable with override_pressurization
                    struct cabin_altitude_actual_m_msl
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/pressure/cabin_altitude_actual_m_msl"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The desired cabin altitude (BEFORE 730 this was incorrectly int type)
                    struct cabin_altitude_set_m_msl
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/pressure/cabin_altitude_set_m_msl"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???? (psi)
                    struct cabin_pressure_differential_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/pressure/cabin_pressure_differential_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The real cabin altitude rate change (BEFORE 730 this was incorrectly int type). Writeable with override_pressurization
                    struct cabin_vvi_actual_m_msec
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/pressure/cabin_vvi_actual_m_msec"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The desired cabin altitude rate change (BEFORE 730 this was incorrectly int type)
                    struct cabin_vvi_set_m_msec
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/pressure/cabin_vvi_set_m_msec"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Pressure dump switch (bool)
                    struct dump_all
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/pressure/dump_all"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Pressure dump to altitude switch (bool)
                    struct dump_to_alt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/pressure/dump_to_alt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Max altitude the plane can keep pressure at?
                    struct max_allowable_altitude
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/pressure/max_allowable_altitude"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Pressurization outflow valve ratio. 0 for fully closed, 1 for fully open. Writeable with override_pressurization (ratio)
                    struct outflow_valve
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/pressure/outflow_valve"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Timeout for some kind of pressure test/
                    struct pressure_test_timeout
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/pressure/pressure_test_timeout"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! radios datarefs
                namespace radios
                {
                    //! Magnetic heading of the compass card for ADF 1 - pilot. (degm)
                    struct adf1_cardinal_dir
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf1_cardinal_dir"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Magnetic heading of the compass card for ADF 1 - copilot. (degm)
                    struct adf1_cardinal_dir2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf1_cardinal_dir2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The relative bearing to the beacon indicated by adf1.  Use override_adf to stg. (deg)
                    struct adf1_dir_degt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf1_dir_degt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our distance in nautical miles from the beacon tuned in on adf1.  override_dme (nautical_miles)
                    struct adf1_dme_dist_m
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf1_dme_dist_m"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our closing speed to the beacon tuned in on adf1. override_dme (knots)
                    struct adf1_dme_speed_kts
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf1_dme_speed_kts"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our time to reach the beacon tuned in on adf1. override_dme  (Dataref is labeled - this has always been minutes.) (mins)
                    struct adf1_dme_time_secs
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf1_dme_time_secs"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The current frequency of the first automatic direction finder. (10Hz)
                    struct adf1_freq_hz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf1_freq_hz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does this adf aid have DME?  Use override_dme to set (bool)
                    struct adf1_has_dme
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf1_has_dme"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The standby frequency for the radio mentioned above for flip/flop radios. (10Hz)
                    struct adf1_stdby_freq_hz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf1_stdby_freq_hz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Magnetic heading of the compass card for ADF 2 - pilot. (degm)
                    struct adf2_cardinal_dir
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf2_cardinal_dir"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Magnetic heading of the compass card for ADF 2 - copilot. (degm)
                    struct adf2_cardinal_dir2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf2_cardinal_dir2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The relative bearing to the beacon indicated by adf2.  Use override_adf to stg. (deg)
                    struct adf2_dir_degt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf2_dir_degt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our distance in nautical miles from the beacon tuned in on adf2.  override_dme (nautical_miles)
                    struct adf2_dme_dist_m
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf2_dme_dist_m"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our closing speed to the beacon tuned in on adf2. override_dme (knots)
                    struct adf2_dme_speed_kts
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf2_dme_speed_kts"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our time to reach the beacon tuned in on adf2. override_dme  (Dataref is labeled - this has always been minutes.) (mins)
                    struct adf2_dme_time_secs
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf2_dme_time_secs"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The current frequency of the second automatic direction finder. (10Hz)
                    struct adf2_freq_hz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf2_freq_hz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does this adf aid have DME?  Use override_dme to set (bool)
                    struct adf2_has_dme
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf2_has_dme"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The standby frequency for the radio mentioned above for flip/flop radios. (10Hz)
                    struct adf2_stdby_freq_hz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/adf2_stdby_freq_hz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! autopilot source 0 is pilot, 1 is copilot (int)
                    struct ap_src
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/ap_src"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The current frequency of the copm1 radio. (10Hz)
                    struct com1_freq_hz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/com1_freq_hz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The standby frequency for the radio mentioned above for flip/flop radios. (10Hz)
                    struct com1_stdby_freq_hz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/com1_stdby_freq_hz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The current frequency of the com2 radio. (10Hz)
                    struct com2_freq_hz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/com2_freq_hz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The standby frequency for the radio mentioned above for flip/flop radios. (10Hz)
                    struct com2_stdby_freq_hz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/com2_stdby_freq_hz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does this adf aid have DME?  Use override_dme to set (bool)
                    struct dme5_has_dme
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/dme5_has_dme"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The relative bearing to whatever becaon the standalone DME is programmed for. (deg)
                    struct dme_dir_degt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/dme_dir_degt"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The current frequency of the standalone DME receiver. (10Hz)
                    struct dme_freq_hz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/dme_freq_hz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The standby frequency for the radio mentioned above for flip/flop radios.<p>NOTE: X-Plane does not currently feature a flip-flop standalone DME instrument, but the data exists. (10Hz)
                    struct dme_stdby_freq_hz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/dme_stdby_freq_hz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Suppresses Gear Audio
                    struct gear_audio_working
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gear_audio_working"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The localizer course for GPS 2 or tuned in radial for a VOR (Magnetic, new) - pilot - use override_gps (degm)
                    struct gps2_course_degtm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps2_course_degtm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The localizer course for GPS 2 or tuned in radial for a VOR (Magnetic, new) - copilot - use override_gps (degm)
                    struct gps2_course_degtm2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps2_course_degtm2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The relative bearing to the GPS 2 destination. (deg)
                    struct gps2_dir_degt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps2_dir_degt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our distance in nautical miles from the beacon tuned in on the GPS.  override_gps (nautical_miles)
                    struct gps2_dme_dist_m
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps2_dme_dist_m"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our closing speed to the beacon tuned in on the GPS. override_dme (knots)
                    struct gps2_dme_speed_kts
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps2_dme_speed_kts"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our time to reach the beacon tuned in on the GPS 2. override_dme  (Dataref is labeled - this has always been minutes.) (mins)
                    struct gps2_dme_time_secs
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps2_dme_time_secs"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Whether we are heading to or from (or over) our nav2 beacon - pilot. (enum)
                    struct gps2_fromto
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps2_fromto"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Whether we are heading to or from (or over) our nav2 beacon - copilot. (enum)
                    struct gps2_fromto2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps2_fromto2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Baro-VNAV vertical path sensitivity in meters per dot of deflection.  Writable with override_gps. (meter)
                    struct gps2_gp_mtr_per_dot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps2_gp_mtr_per_dot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! does the GPS 2 provide vertical guidance?  Write with override_gps (int)
                    struct gps2_has_glideslope
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps2_has_glideslope"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - pilot.  override_gps (prcnt)
                    struct gps2_hdef_dot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps2_hdef_dot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - copilot.  override_gps (prcnt)
                    struct gps2_hdef_dot2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps2_hdef_dot2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! GPS CDI sensitivity in nautical miles per dot of deflection.  Writable with override_gps. (nautical_miles)
                    struct gps2_hdef_nm_per_dot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps2_hdef_nm_per_dot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The glide slope slope for the GPS 2.  Writable with override_gps. (deg)
                    struct gps2_slope_degt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps2_slope_degt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - pilot. override_gps (prcnt)
                    struct gps2_vdef_dot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps2_vdef_dot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - copilot. override_gps (prcnt)
                    struct gps2_vdef_dot2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps2_vdef_dot2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The localizer course for GPS 1 or tuned in radial for a VOR (Magnetic, new) - pilot - use override_gps (degm)
                    struct gps_course_degtm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps_course_degtm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The localizer course for GPS 1 or tuned in radial for a VOR (Magnetic, new) - copilot - use override_gps (degm)
                    struct gps_course_degtm2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps_course_degtm2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The relative bearing to the GPS 1 destination. (deg)
                    struct gps_dir_degt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps_dir_degt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our distance in nautical miles from the beacon tuned in on the GPS.  override_gps (nautical_miles)
                    struct gps_dme_dist_m
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps_dme_dist_m"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our closing speed to the beacon tuned in on the GPS. override_dme (knots)
                    struct gps_dme_speed_kts
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps_dme_speed_kts"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our time to reach the beacon tuned in on the GPS 1. override_dme  (Dataref is labeled - this has always been minutes.) (mins)
                    struct gps_dme_time_secs
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps_dme_time_secs"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Whether we are heading to or from (or over) our nav2 beacon - pilot. (enum)
                    struct gps_fromto
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps_fromto"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Whether we are heading to or from (or over) our nav2 beacon - copilot. (enum)
                    struct gps_fromto2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps_fromto2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Baro-VNAV vertical path sensitivity in meters per dot of deflection.  Writable with override_gps. (meter)
                    struct gps_gp_mtr_per_dot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps_gp_mtr_per_dot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! does the GPS 1 provide vertical guidance?  Write with override_gps (int)
                    struct gps_has_glideslope
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps_has_glideslope"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - pilot.  override_gps (prcnt)
                    struct gps_hdef_dot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps_hdef_dot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - copilot.  override_gps (prcnt)
                    struct gps_hdef_dot2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps_hdef_dot2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! GPS CDI sensitivity in nautical miles per dot of deflection.  Writable with override_gps. (nautical_miles)
                    struct gps_hdef_nm_per_dot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps_hdef_nm_per_dot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The glide slope slope for the GPS 1.  Writable with override_gps. (deg)
                    struct gps_slope_degt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps_slope_degt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - pilot. override_gps (prcnt)
                    struct gps_vdef_dot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps_vdef_dot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - copilot. override_gps (prcnt)
                    struct gps_vdef_dot2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/gps_vdef_dot2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Suppresses Marker Audio
                    struct marker_audio_working
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/marker_audio_working"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are we receiving an expected glide slope for nav1 (bool)
                    struct nav1_CDI
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_CDI"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Magnetic heading of the compass card for VOR 1 - pilot. (degm)
                    struct nav1_cardinal_dir
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_cardinal_dir"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Magnetic heading of the compass card for VOR 1 - copilot. (degm)
                    struct nav1_cardinal_dir2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_cardinal_dir2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The localizer course for Nav1 or tuned in radial for a VOR. (Magnetic, new) - pilot use override_navneedles (degm)
                    struct nav1_course_degm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_course_degm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The localizer course for Nav1 or tuned in radial for a VOR. (Magnetic, new) - copilot use override_navneedles (degm)
                    struct nav1_course_degm2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_course_degm2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The relative bearing to the beacon indicated by nav1.  Set override with override_navneedles (deg)
                    struct nav1_dir_degt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_dir_degt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our distance in nautical miles from the beacon tuned in on nav1.  override_navneedles (nautical_miles)
                    struct nav1_dme_dist_m
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_dme_dist_m"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our closing speed to the beacon tuned in on nav1. override_dme (knots)
                    struct nav1_dme_speed_kts
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_dme_speed_kts"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our time to reach the beacon tuned in on nav1. override_dme  (Dataref is labeled - this has always been minutes.) (mins)
                    struct nav1_dme_time_secs
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_dme_time_secs"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The current frequency of the nav1 radio. (10Hz)
                    struct nav1_freq_hz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_freq_hz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Whether we are heading to or from (or over) our nav1 beacon - pilot. (enum)
                    struct nav1_fromto
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_fromto"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Whether we are heading to or from (or over) our nav1 beacon - copilot. (enum)
                    struct nav1_fromto2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_fromto2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does this nav aid have DME?  Use override_dme to set (bool)
                    struct nav1_has_dme
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_has_dme"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - pilot.  override_navneedles (prcnt)
                    struct nav1_hdef_dot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_hdef_dot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - copilot.  override_navneedles (prcnt)
                    struct nav1_hdef_dot2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_hdef_dot2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 1. (mag: modern) pilot (degm)
                    struct nav1_obs_degm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_obs_degm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 1. (mag: modern) copilot (degm)
                    struct nav1_obs_degm2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_obs_degm2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 1. (true: legacy) (degt)
                    struct nav1_obs_degt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_obs_degt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The glide slope slope for nav1.  Writable with override_navneedles starting in 940. (deg)
                    struct nav1_slope_degt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_slope_degt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The standby frequency for the radio mentioned above for flip/flop radios. (10Hz)
                    struct nav1_stdby_freq_hz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_stdby_freq_hz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - pilot.  override_navneedles (prcnt)
                    struct nav1_vdef_dot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_vdef_dot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - copilot.  override_navneedles (prcnt)
                    struct nav1_vdef_dot2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav1_vdef_dot2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are we receiving an expected glide slope for nav2 (bool)
                    struct nav2_CDI
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_CDI"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Magnetic heading of the compass card for VOR 2 - pilot. (degm)
                    struct nav2_cardinal_dir
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_cardinal_dir"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Magnetic heading of the compass card for VOR 2 - copilot. (degm)
                    struct nav2_cardinal_dir2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_cardinal_dir2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The localizer course for Nav2 or tuned in radial for a VOR. (Magnetic, new) - pilot use override_navneedles (degm)
                    struct nav2_course_degm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_course_degm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The localizer course for Nav2 or tuned in radial for a VOR. (Magnetic, new) - copilot use override_navneedles (degm)
                    struct nav2_course_degm2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_course_degm2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The relative bearing to the beacon indicated by nav2.  Set override with override_navneedles (deg)
                    struct nav2_dir_degt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_dir_degt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our distance in nautical miles from the beacon tuned in on nav2.  override_navneedles (nautical_miles)
                    struct nav2_dme_dist_m
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_dme_dist_m"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our closing speed to the beacon tuned in on nav2. override_dme (knots)
                    struct nav2_dme_speed_kts
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_dme_speed_kts"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our time to reach the beacon tuned in on nav2. override_dme  (Dataref is labeled - this has always been minutes.) (mins)
                    struct nav2_dme_time_secs
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_dme_time_secs"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The current frequency of the nav2 radio. (10Hz)
                    struct nav2_freq_hz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_freq_hz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Whether we are heading to or from (or over) our nav2 beacon - pilot. (enum)
                    struct nav2_fromto
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_fromto"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Whether we are heading to or from (or over) our nav2 beacon - copilot. (enum)
                    struct nav2_fromto2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_fromto2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does this nav aid have DME?  Use override_dme to set (bool)
                    struct nav2_has_dme
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_has_dme"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - pilot.  override_navneedles (prcnt)
                    struct nav2_hdef_dot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_hdef_dot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - copilot.  override_navneedles (prcnt)
                    struct nav2_hdef_dot2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_hdef_dot2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 2. (mag: modern) pilot (degm)
                    struct nav2_obs_degm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_obs_degm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 2. (mag: modern) copilot (degm)
                    struct nav2_obs_degm2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_obs_degm2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 2. (true: legacy) (degt)
                    struct nav2_obs_degt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_obs_degt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The glide slope slope for nav2.  Writable with override_navneedles starting in 940. (deg)
                    struct nav2_slope_degt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_slope_degt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The standby frequency for the radio mentioned above for flip/flop radios. (10Hz)
                    struct nav2_stdby_freq_hz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_stdby_freq_hz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - pilot.  override_navneedles (prcnt)
                    struct nav2_vdef_dot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_vdef_dot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - copilot.  override_navneedles (prcnt)
                    struct nav2_vdef_dot2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav2_vdef_dot2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! for a multifunction receiver...0-5 for nav1,nav2,com1,com2,adf1,adf2. (int)
                    struct nav_com_adf_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav_com_adf_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Type of NAVAID that is tuned in. (enum)
                    struct nav_type
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/nav_type"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 6;
                    };

                    //! OBS
                    struct obs_mag
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/obs_mag"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our distance in nautical miles from the beacon tuned in on the standalone DME receiver. override_dme (nautical_miles)
                    struct standalone_dme_dist_m
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/standalone_dme_dist_m"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our closing speed to the beacon tuned in on the standalone DME receiver. override_dme (knots)
                    struct standalone_dme_speed_kts
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/standalone_dme_speed_kts"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our time to reach the beacon tuned in on the standalone DME. override_dme  (Dataref is labeled - this has always been minutes.)\ (mins)
                    struct standalone_dme_time_secs
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/standalone_dme_time_secs"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Transponder light brightness ratio from 0 to 1 (ratio)
                    struct transponder_brightness
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/transponder_brightness"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Our transponder code. (code)
                    struct transponder_code
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/transponder_code"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Whether we are squawking ident right now. (bool)
                    struct transponder_id
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/transponder_id"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Whether the transponder is lit
                    struct transponder_light
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/transponder_light"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Transponder mode (off=0,stdby=1,on=2,test=3) (enum)
                    struct transponder_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/radios/transponder_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! switches datarefs
                namespace switches
                {
                    //! Is the standalone DME showing distance or groundspeed/time
                    struct DME_distance_or_time
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/DME_distance_or_time"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Which nav radio is the slaved DME connected to
                    struct DME_radio_selector
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/DME_radio_selector"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The display mode for the ECAM
                    struct ECAM_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/ECAM_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does the EFIS display show storms/weather? - legacy - origin dataref contained a typo (boolean)
                    struct EFIFS_shows_weather
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/EFIFS_shows_weather"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the first EFIS DME showing nothing, dist to VOR, or dist to ADF
                    struct EFIS_dme_1_selector
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/EFIS_dme_1_selector"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the second EFIS DME showing nothing, dist to VOR, or dist to ADF
                    struct EFIS_dme_2_selector
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/EFIS_dme_2_selector"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the moving map showing the map or another HSI
                    struct EFIS_map_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/EFIS_map_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The display range for the moving map
                    struct EFIS_map_range_selector
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/EFIS_map_range_selector"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 0=app,1=vor,2=map,3=nav,4=pln specific mode of the map (or HSI) (enum)
                    struct EFIS_map_submode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/EFIS_map_submode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does the EFIS show NDBs? (boolean)
                    struct EFIS_shows_NDBs
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/EFIS_shows_NDBs"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does the EFIS show VORs? (boolean)
                    struct EFIS_shows_VORs
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/EFIS_shows_VORs"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does the EFIS show other airports? (boolean)
                    struct EFIS_shows_airports
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/EFIS_shows_airports"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does the EFIS show other aircraft? (boolean)
                    struct EFIS_shows_tcas
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/EFIS_shows_tcas"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does the EFIS show waypoints? (boolean)
                    struct EFIS_shows_waypoints
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/EFIS_shows_waypoints"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does the EFIS display show storms/weather? (boolean)
                    struct EFIS_shows_weather
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/EFIS_shows_weather"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Alpha level of EFIS weather from 0 to 1 (ratio)
                    struct EFIS_weather_alpha
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/EFIS_weather_alpha"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the HSI showing nav1, nav2, or GPS
                    struct HSI_selector
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/HSI_selector"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the HSI showing nav1, nav2, or GPS
                    struct HSI_selector2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/HSI_selector2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the left side of a VOR/ADF RMI showing the VOR or ADF
                    struct RMI_l_vor_adf_selector
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/RMI_l_vor_adf_selector"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the left side of a VOR/ADF RMI showing the VOR or ADF
                    struct RMI_l_vor_adf_selector2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/RMI_l_vor_adf_selector2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the right side of a VOR/ADF RMI showing the VOR or ADF
                    struct RMI_r_vor_adf_selector
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/RMI_r_vor_adf_selector"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the right side of a VOR/ADF RMI showing the VOR or ADF
                    struct RMI_r_vor_adf_selector2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/RMI_r_vor_adf_selector2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the RMI showing nav1, nav2, or GPS
                    struct RMI_selector
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/RMI_selector"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the RMI showing nav1, nav2, or GPS
                    struct RMI_selector2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/RMI_selector2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Turns on anti-icing for alpha vane heater, pilot side (bool)
                    struct anti_ice_AOA_heat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/anti_ice_AOA_heat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Turns on anti-icing for alpha vane heater, copilot side (bool)
                    struct anti_ice_AOA_heat2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/anti_ice_AOA_heat2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ignition source is turned on automatically on low N1 to prevent flameout (bool)
                    struct anti_ice_auto_ignite
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/anti_ice_auto_ignite"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???? (ratio)
                    struct anti_ice_engine_air
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/anti_ice_engine_air"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Turns on inlet heating for engine 1 (bool)
                    struct anti_ice_inlet_heat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/anti_ice_inlet_heat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Turns on inlet heating - array access to all engines, up to 8. (bool)
                    struct anti_ice_inlet_heat_per_engine
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/anti_ice_inlet_heat_per_engine"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Turns on inlet heating - array access to all engines, up to 8. (Deprecated - use correct spelled dataref) (bool)
                    struct anti_ice_inlet_heat_per_enigne
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/anti_ice_inlet_heat_per_enigne"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Is the anti-icing system on.  This turns on EVERY anti-ice system. (bool)
                    struct anti_ice_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/anti_ice_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Turns on prop heat for prop 1 (bool)
                    struct anti_ice_prop_heat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/anti_ice_prop_heat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Turns on prop heat - array access to all props, up to 8. (bool)
                    struct anti_ice_prop_heat_per_engine
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/anti_ice_prop_heat_per_engine"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Turns on the wing-surface anti-ice boot, which knocks ice off the leading edge, once a certain thickness has accumulated. (bool)
                    struct anti_ice_surf_boot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/anti_ice_surf_boot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Turns on surface heat on the wings (bool)
                    struct anti_ice_surf_heat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/anti_ice_surf_heat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Turns on surface heat on the left wing (bool)
                    struct anti_ice_surf_heat_left
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/anti_ice_surf_heat_left"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Turns on surface heat on the right wing (bool)
                    struct anti_ice_surf_heat_right
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/anti_ice_surf_heat_right"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Turns on anti-icing fr the windshield (bool)
                    struct anti_ice_window_heat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/anti_ice_window_heat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! What mode is the Argus 2000 in (enum)
                    struct argus_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/argus_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the arresting gear deployed
                    struct arresting_gear
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/arresting_gear"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the artificial stability system on?
                    struct art_stab_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/art_stab_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Settings for the com radio audio panel. 6=com1,7=com2
                    struct audio_panel_out
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/audio_panel_out"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Settings for the autobrake control
                    struct auto_brake_settings
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/auto_brake_settings"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Settings for auto-feathering mode
                    struct auto_feather_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/auto_feather_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the canopy handle open
                    struct canopy_req
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/canopy_req"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are we dumping fuel
                    struct dumping_fuel
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/dumping_fuel"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fasten Seat Belts (boolean)
                    struct fasten_seat_belts
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/fasten_seat_belts"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Gear handle is up or down? (boolean)
                    struct gear_handle_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/gear_handle_status"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Turns on ice detect (bool)
                    struct ice_detect
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/ice_detect"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are jatos on
                    struct jato_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/jato_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Settings for the marker beacon audio panel
                    struct marker_panel_out
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/marker_panel_out"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! No Smoking (boolean)
                    struct no_smoking
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/no_smoking"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the parachute deployed
                    struct parachute_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/parachute_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the pitot heat on (bool)
                    struct pitot_heat_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/pitot_heat_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the backup pitot heat on (bool)
                    struct pitot_heat_on2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/pitot_heat_on2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct pre_rotate_level
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/pre_rotate_level"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is prop sync on
                    struct prop_sync_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/prop_sync_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are puffers on
                    struct puffers_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/puffers_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the static port heat on (bool)
                    struct static_heat_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/static_heat_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the backup static port heat on (bool)
                    struct static_heat_on2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/static_heat_on2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct tot_ener_audio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/tot_ener_audio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is water scoop active
                    struct water_scoop
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/water_scoop"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the yaw damper on
                    struct yaw_damper_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/switches/yaw_damper_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! warnings datarefs
                namespace warnings
                {
                    //! True if the annunciator test button is pressed now. (boolean)
                    struct annunciator_test_pressed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/warnings/annunciator_test_pressed"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Time annunciator test will end (use annunciator_test_pressed instead) (seconds)
                    struct annunciator_test_timeout
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/warnings/annunciator_test_timeout"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! annunciators datarefs
                    namespace annunciators
                    {
                        //! GPWS failed (boolean)
                        struct GPWS
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/GPWS"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! N1 too high - per engine (boolean)
                        struct N1_high
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/N1_high"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! N1 of engine is too low for AC - per engine (boolean)
                        struct N1_low
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/N1_low"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! afterburners on (bitfield)
                        struct afterburners_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/afterburners_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! auto feather armed (per engine) (boolean)
                        struct auto_feather_arm
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/auto_feather_arm"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! auto ignition ??? (bitfield)
                        struct auto_ignition
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/auto_ignition"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! autopilot failure (boolean)
                        struct autopilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/autopilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! autopilot bank limit is turned ON, autopilot will keep bank below 12.5 degrees of bank (boolean)
                        struct autopilot_bank_limit
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/autopilot_bank_limit"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! autopilot has been disconnected (boolean)
                        struct autopilot_disconnect
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/autopilot_disconnect"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! autopilot soft ride is on (boolean)
                        struct autopilot_soft_ride
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/autopilot_soft_ride"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! autopilot trimming down (boolean)
                        struct autopilot_trim_down
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/autopilot_trim_down"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! autopilot trim failure (boolean)
                        struct autopilot_trim_fail
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/autopilot_trim_fail"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! autopilot trimming up (boolean)
                        struct autopilot_trim_up
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/autopilot_trim_up"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! battery is charging too rapidly - may overheat (boolean)
                        struct battery_charge_hi
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/battery_charge_hi"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! bleed air failed (per engine) (boolean)
                        struct bleed_air_fail
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/bleed_air_fail"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! bleed air off (per engine) (boolean)
                        struct bleed_air_off
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/bleed_air_off"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! burner on - per engine (boolean)
                        struct burner_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/burner_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! cabin altitude at or above 12500 (boolean)
                        struct cabin_altitude_12500
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/cabin_altitude_12500"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! cabin door is open (boolean)
                        struct cabin_door_open
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/cabin_door_open"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! a chip has been detected in, um, a prop or turbine? (bitfield)
                        struct chip_detect
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/chip_detect"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! chip detected - per engine (boolean)
                        struct chip_detected
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/chip_detected"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! crossfeed on (boolean)
                        struct crossfeed_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/crossfeed_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! electric trim is off (boolean)
                        struct electric_trim_off
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/electric_trim_off"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! yer engines are on fire, fer cryin out loud (bitfield)
                        struct engine_fire
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/engine_fire"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! engine fire - per engine (boolean)
                        struct engine_fires
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/engine_fires"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! external power is on (boolean)
                        struct external_power_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/external_power_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! flight director failure (boolean)
                        struct flight_director
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/flight_director"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! fuel pressure low (bitfield)
                        struct fuel_pressure
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/fuel_pressure"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! fuel pressure low - per engine (boolean)
                        struct fuel_pressure_low
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/fuel_pressure_low"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! running out of fuel (boolean)
                        struct fuel_quantity
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/fuel_quantity"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! fuel transfer on (per tank) (boolean)
                        struct fuel_transfer
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/fuel_transfer"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! gear is unsafe (boolean)
                        struct gear_unsafe
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/gear_unsafe"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! generators are off or broken (bitfield)
                        struct generator
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/generator"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! generator off - per engine (boolean)
                        struct generator_off
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/generator_off"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! glideslope deviation (boolean)
                        struct glideslope
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/glideslope"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! high rotor speed (boolean)
                        struct hi_rotor
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/hi_rotor"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! duct overheated (boolean)
                        struct hvac
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/hvac"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! hydraulic pressure low (boolean)
                        struct hydraulic_pressure
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/hydraulic_pressure"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! ice detected (boolean)
                        struct ice
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/ice"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! ice vain extended (per engine) (boolean)
                        struct ice_vane_extend
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/ice_vane_extend"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! ice vain failed (per engine) (boolean)
                        struct ice_vane_fail
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/ice_vane_fail"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! igniter on - per engine (boolean)
                        struct igniter_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/igniter_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! inverters are off or broken (bitfield)
                        struct inverter
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/inverter"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! inverter off - per 2 inverters (boolean)
                        struct inverter_off
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/inverter_off"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 2;
                        };

                        //! landing or taxiway light on but gear up (boolean)
                        struct landing_taxi_lite
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/landing_taxi_lite"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! low rotor speed (boolean)
                        struct lo_rotor
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/lo_rotor"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! low vacuum pressure (boolean)
                        struct low_vacuum
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/low_vacuum"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! low battery voltage (boolean)
                        struct low_voltage
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/low_voltage"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Master accept light on/off (boolean)
                        struct master_accept
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/master_accept"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Master caution light on/off (boolean)
                        struct master_caution
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/master_caution"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Master warning (boolean)
                        struct master_warning
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/master_warning"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! no inverters are on (boolean)
                        struct no_inverters
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/no_inverters"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! oil pressure low (bitfield)
                        struct oil_pressure
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/oil_pressure"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! fuel pressure low - per engine (boolean)
                        struct oil_pressure_low
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/oil_pressure_low"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! oil temperature too high (bitfield)
                        struct oil_temperature
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/oil_temperature"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! oil temperature high - per engine (boolean)
                        struct oil_temperature_high
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/oil_temperature_high"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! passenger oxygen on (boolean)
                        struct passenger_oxy_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/passenger_oxy_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! pitot heat off (boolean)
                        struct pitot_heat_off
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/pitot_heat_off"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! reversers deployed (bitfield)
                        struct reverse
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/reverse"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! reversers not ready (boolean)
                        struct reverser_not_ready
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/reverser_not_ready"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! reverser on - per engine (boolean)
                        struct reverser_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/reverser_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! slats deployed (boolean)
                        struct slats
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/slats"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! speedbrakes deployed (boolean)
                        struct speedbrake
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/speedbrake"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! transonic (boolean)
                        struct transonic
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/transonic"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! yaw damper failure (boolean)
                        struct yaw_damper
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit/warnings/annunciators/yaw_damper"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                    }

                    //! The autopilot engaged lights are on as part of their self test (boolean)
                    struct autopilot_test_ap_lit
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/warnings/autopilot_test_ap_lit"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The autopilot is beeping as part of its self-test (boolean)
                    struct autopilot_test_beeping
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/warnings/autopilot_test_beeping"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The autopilot mode lights are on as part of its self test (boolean)
                    struct autopilot_test_modes_lit
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/warnings/autopilot_test_modes_lit"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The autopilot trim lights are on as part of its self test (boolean)
                    struct autopilot_test_trim_lit
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/warnings/autopilot_test_trim_lit"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Master accept is enabled for being lit (because it is not pressed) (boolean)
                    struct master_accept_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/warnings/master_accept_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Master caution is enabled for being lit (because it is not pressed) (boolean)
                    struct master_caution_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/warnings/master_caution_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Time master caution will go out.  (Use command-system instead of this dataref.) (seconds)
                    struct master_caution_timeout
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/warnings/master_caution_timeout"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Master warning is enabled for being lit (because it is not pressed) (boolean)
                    struct master_warning_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/warnings/master_warning_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! weapons datarefs
                namespace weapons
                {
                    //! Are bombs armed
                    struct bombs_armed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/weapons/bombs_armed"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Number of rounds left in the sum of all chaff weapons on aircraft. Missing in 11.00-11.05.  Writable in v10 and earlier. (count)
                    struct chaff_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/weapons/chaff_now"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Firing mode (single, ripple, etc. for bombs)
                    struct firing_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/weapons/firing_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Firing rate (for bombs)
                    struct firing_rate
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/weapons/firing_rate"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Number of rounds left in all flare weapons on the aircraft.  Missing in 11.00-11.05.  Writable in v10 and earlier. (count)
                    struct flare_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/weapons/flare_now"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are guns armed
                    struct guns_armed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/weapons/guns_armed"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are missiles armed
                    struct missiles_armed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/weapons/missiles_armed"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Index of plane that is being targeted
                    struct plane_target_index
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/weapons/plane_target_index"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are rockets armed
                    struct rockets_armed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/weapons/rockets_armed"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! INDIVIDUAL weapon selected
                    struct wpn_sel_console
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit/weapons/wpn_sel_console"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

            }

            //! cockpit2 datarefs
            namespace cockpit2
            {
                //! EFIS datarefs
                namespace EFIS
                {
                    //! EFIS waypoint 2 is showing: 0=ADF1, 1=OFF, or 2=VOR1 -- Copilot (enum)
                    struct EFIS_1_selection_copilot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/EFIS/EFIS_1_selection_copilot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! EFIS waypoint 1 is showing: 0=ADF1, 1=OFF, or 2=VOR1 -- Pilot (enum)
                    struct EFIS_1_selection_pilot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/EFIS/EFIS_1_selection_pilot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! EFIS waypoint 2 is showing: 0=ADF2, 1=OFF, or 2=VOR2 -- Copilot (enum)
                    struct EFIS_2_selection_copilot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/EFIS/EFIS_2_selection_copilot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! EFIS waypoint 1 is showing: 0=ADF2, 1=OFF, or 2=VOR2 -- Pilot (enum)
                    struct EFIS_2_selection_pilot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/EFIS/EFIS_2_selection_pilot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! On the moving map, show the airports or not. (boolean)
                    struct EFIS_airport_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/EFIS/EFIS_airport_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! On the moving map, show the fixes or not. (boolean)
                    struct EFIS_fix_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/EFIS/EFIS_fix_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! On the moving map, show the NDBs or not. (boolean)
                    struct EFIS_ndb_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/EFIS/EFIS_ndb_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! An array of EFIS page switches for selecting which EFIS page is visible. (boolean)
                    struct EFIS_page
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/EFIS/EFIS_page"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 6;
                    };

                    //! On the moving map, show the TCAS or not. (boolean)
                    struct EFIS_tcas_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/EFIS/EFIS_tcas_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! On the moving map, show the VORs or not. (boolean)
                    struct EFIS_vor_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/EFIS/EFIS_vor_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! On the moving map, show the weather or not. (boolean)
                    struct EFIS_weather_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/EFIS/EFIS_weather_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Argus mode, 7=departure,8=enroute,9=approach,10=radar_on (enum)
                    struct argus_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/EFIS/argus_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ECAM mode, 0=engine,1=fuel,2=controls,3=hydraulics,4=failures (enum)
                    struct ecam_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/EFIS/ecam_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Map mode. 0=approach, 1=vor,2=map,3=nav,4=plan (enum)
                    struct map_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/EFIS/map_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Map is in HSI mode, 0 or 1. (boolean)
                    struct map_mode_is_HSI
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/EFIS/map_mode_is_HSI"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Map range, 1->6, where 6 is the longest range. (enum)
                    struct map_range
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/EFIS/map_range"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! annunciators datarefs
                namespace annunciators
                {
                    //! Ground proximity warning system: PULL UP! PULL UP! my lancair does this during my typical red-baron approaches! (boolean)
                    struct GPWS
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/GPWS"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! N1 too high - per engine (boolean)
                    struct N1_high
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/N1_high"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! N1 of engine is too low for AC - per engine (boolean)
                    struct N1_low
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/N1_low"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Afterburners on!    // x8 (bitfield)
                    struct afterburner
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/afterburner"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! auto feather armed (per engine) (boolean)
                    struct auto_feather_arm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/auto_feather_arm"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! autopilot failure (boolean)
                    struct autopilot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/autopilot"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! autopilot bank limit is turned ON, autopilot will keep bank below 12.5 degrees of bank (boolean)
                    struct autopilot_bank_limit
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/autopilot_bank_limit"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This goes off for a few moments when the autopilot disconnects.. you wanna KNOW if otto just quit on you! (boolean)
                    struct autopilot_disconnect
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/autopilot_disconnect"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! autopilot soft ride is on (boolean)
                    struct autopilot_soft_ride
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/autopilot_soft_ride"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! autopilot trimming down (boolean)
                    struct autopilot_trim_down
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/autopilot_trim_down"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! autopilot trim failure (boolean)
                    struct autopilot_trim_fail
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/autopilot_trim_fail"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! autopilot trimming up (boolean)
                    struct autopilot_trim_up
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/autopilot_trim_up"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! battery is charging too rapidly - may overheat (boolean)
                    struct battery_charge_hi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/battery_charge_hi"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! propeller in beta mode - per engine, double as NTS test light in fixed turboprops (boolean)
                    struct beta
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/beta"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! bleed air failed (per engine) (boolean)
                    struct bleed_air_fail
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/bleed_air_fail"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! bleed air off (per engine) (boolean)
                    struct bleed_air_off
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/bleed_air_off"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! burner on - per engine (boolean)
                    struct burner_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/burner_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! cabin altitude at or above 12500 (boolean)
                    struct cabin_altitude_12500
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/cabin_altitude_12500"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! cabin door is open (boolean)
                    struct cabin_door_open
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/cabin_door_open"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! We detected chips of metal in the engine somewhere. most people agree this is not good.    // x8 (bitfield)
                    struct chip_detect
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/chip_detect"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! chip detected - per engine (boolean)
                    struct chip_detected
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/chip_detected"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! crossfeed on (boolean)
                    struct crossfeed_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/crossfeed_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! electric trim is off (boolean)
                    struct electric_trim_off
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/electric_trim_off"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The engine is on FIRE! this adds to excitement    // x8 (bitfield)
                    struct engine_fire
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/engine_fire"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! engine fire - per engine (boolean)
                    struct engine_fires
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/engine_fires"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! external power is on (boolean)
                    struct external_power_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/external_power_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Seatbelt sign on, yes or no. (boolean)
                    struct fasten_seatbelt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/fasten_seatbelt"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! flight director failure (boolean)
                    struct flight_director
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/flight_director"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel pressure is lo, or maybe hi, for this engine    // x8 (bitfield)
                    struct fuel_pressure
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/fuel_pressure"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! fuel pressure low - per engine (boolean)
                    struct fuel_pressure_low
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/fuel_pressure_low"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Fuel qty. no points for guessing if it is too high or too low to trigger this one (boolean)
                    struct fuel_quantity
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/fuel_quantity"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! fuel transfer on (per tank) (boolean)
                    struct fuel_transfer
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/fuel_transfer"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 9;
                    };

                    //! gear is unsafe (boolean)
                    struct gear_unsafe
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/gear_unsafe"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Gear warning going off, yes or no. (boolean)
                    struct gear_warning
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/gear_warning"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Gear aural warning going off, yes or no. (boolean)
                    struct gear_warning_aural
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/gear_warning_aural"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The generator has failed! the plane cannot charge up. this may happen at lo rpm and go away as the engine revs. happens with my plane    // x8 (bitfield)
                    struct generator
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/generator"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! generator off - per engine (boolean)
                    struct generator_off
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/generator_off"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Rotor rpm on the helo has exceeded normal operating: power availability will be reduced, and god knows if the blades will stay ON! (boolean)
                    struct high_rotor
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/high_rotor"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! duct overheated (boolean)
                    struct hvac
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/hvac"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic pressure. should indicate if press is lo or hi (boolean)
                    struct hydraulic_pressure
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/hydraulic_pressure"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ice detected on the plane.. most people agree this is NOT a good thing. (boolean)
                    struct ice
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/ice"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ice vain extended (per engine) (boolean)
                    struct ice_vane_extend
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/ice_vane_extend"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ice vain failed (per engine) (boolean)
                    struct ice_vane_fail
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/ice_vane_fail"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! igniter on - per engine (boolean)
                    struct igniter_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/igniter_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! The inverter has failed! the plane cannot convert ac from the generators to dc for the instruments.     // x2 (bitfield)
                    struct inverter
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/inverter"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! inverter off - per 2 inverters (boolean)
                    struct inverter_off
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/inverter_off"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2;
                    };

                    //! landing or taxiway light on but gear up (boolean)
                    struct landing_taxi_lite
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/landing_taxi_lite"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Rotor rpm on the helo has dropped below normal operating: power availability will be reduced! (boolean)
                    struct low_rotor
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/low_rotor"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The vacuum pressure, which drives the instruments in the old prop planes, is low: the artificial horizon may loose it is orientation! (boolean)
                    struct low_vacuum
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/low_vacuum"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The voltage os too high or low on one of the electrical buses (boolean)
                    struct low_voltage
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/low_voltage"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hit this button to CLEAR the master caution and warning: it says that you hear the buzzer and to shut it up already (boolean)
                    struct master_accept
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/master_accept"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This goes off any time there is a major problem with the bird: like it is on fire or something    // array of annunciators... kept as array for UDP IO (boolean)
                    struct master_caution
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/master_caution"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This goes off whenever there is some more moderate problem with the bird... maybe lo fuel pressure ot qty (boolean)
                    struct master_warning
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/master_warning"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! no inverters are on (boolean)
                    struct no_inverters
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/no_inverters"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! No smoking alert on, yes or no. (boolean)
                    struct no_smoking
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/no_smoking"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Oil pressure is lo, or maybe hi, for this engine    // x8 (bitfield)
                    struct oil_pressure
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/oil_pressure"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! fuel pressure low - per engine (boolean)
                    struct oil_pressure_low
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/oil_pressure_low"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Oil temperature hi for this engine    // x8 (bitfield)
                    struct oil_temperature
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/oil_temperature"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! oil temperature high - per engine (boolean)
                    struct oil_temperature_high
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/oil_temperature_high"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! passenger oxygen on (boolean)
                    struct passenger_oxy_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/passenger_oxy_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Pitot heat is OFF (YUP! OFF!) turn it on to heat up the pitot tube, which measures air pressure to give you air speed. (boolean)
                    struct pitot_heat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/pitot_heat"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Propeller in beta mode    // x8 (bitfield)
                    struct prop_beta
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/prop_beta"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust-reverse deployed!    // x8 (bitfield)
                    struct reverser_deployed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/reverser_deployed"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! reversers not ready (boolean)
                    struct reverser_not_ready
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/reverser_not_ready"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! reverser on - per engine (boolean)
                    struct reverser_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/reverser_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! slats deployed (boolean)
                    struct slats
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/slats"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Speedbrake deployed: good to know so you do not forget it.. (boolean)
                    struct speedbrake
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/speedbrake"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Stall warning going off, yes or no. (boolean)
                    struct stall_warning
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/stall_warning"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! For aircraft with variable stall warnings, 0 = no stall, 1 = full stall (0..1)
                    struct stall_warning_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/stall_warning_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! You are about to break the speed of sound when accelerating, or drop below the speed of sound if decelerating! the handling of the plane will change! (boolean)
                    struct transonic
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/transonic"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! True if there's a windshear warning active (boolean)
                    struct windshear_warning
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/windshear_warning"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! yaw damper failure (boolean)
                    struct yaw_damper
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/annunciators/yaw_damper"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! autopilot datarefs
                namespace autopilot
                {
                    //! Autopilot Lateral TOGA mode: 0=off,1=armed,2=captured (enum)
                    struct TOGA_lateral_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/TOGA_lateral_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Nose-up pitch to hold when TOGA operations are in effect.  Set this back when your aircraft unloads! (degrees)
                    struct TOGA_pitch_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/TOGA_pitch_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot TOGA vertical (go-around) status. 0=off,1=armed,2=captured (enum)
                    struct TOGA_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/TOGA_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Airspeed hold bug, always in knots, even if the AP is in mach-hold mode. (Knots)
                    struct airspeed_dial_kts
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/airspeed_dial_kts"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Airspeed hold value, knots or Mach depending on km_is_mach. (knots/mach)
                    struct airspeed_dial_kts_mach
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/airspeed_dial_kts_mach"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot airspeed is Mach number rather than knots. (boolean)
                    struct airspeed_is_mach
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/airspeed_is_mach"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the combined alt/vvi selector showing VVI? (boolean)
                    struct alt_vvi_is_showing_vvi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/alt_vvi_is_showing_vvi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! VVI commanded in FPM. (feet)
                    struct altitude_dial_ft
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/altitude_dial_ft"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Altitude is armed, 0 or 1. (boolean)
                    struct altitude_hold_armed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/altitude_hold_armed"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Altitude hold commanded in feet indicated. (feet)
                    struct altitude_hold_ft
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/altitude_hold_ft"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot Altitude hold status. 0=off,1=armed,2=captured (enum)
                    struct altitude_hold_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/altitude_hold_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot altitude mode. (enum)
                    struct altitude_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/altitude_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! current barometric altitude sensed by the altitude preselector (feet)
                    struct altitude_readout_preselector
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/altitude_readout_preselector"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Target altitude hold in VNAV mode. (feet)
                    struct altitude_vnav_ft
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/altitude_vnav_ft"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot approach status.  0=off,1=armed,2=captured (enum)
                    struct approach_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/approach_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot sources are hardwired to respective side, and two autopilots are available (boolean)
                    struct autopilot2_avail
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/autopilot2_avail"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the autopilot 2 really on? Takes into account electrical system, failures, etc.; (boolean)
                    struct autopilot2_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/autopilot2_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the autopilot 2 really on? Like servos_on, but stays on even the servos are temporarily off for CWS. (boolean)
                    struct autopilot2_on_or_cws
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/autopilot2_on_or_cws"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the autopilot 3 really on? Takes into account electrical system, failures, etc.; (boolean)
                    struct autopilot3_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/autopilot3_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the autopilot 2 really on? Like servos_on, but stays on even the servos are temporarily off for CWS. (boolean)
                    struct autopilot3_on_or_cws
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/autopilot3_on_or_cws"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the autopilot really on? Takes into account electrical system, failures, etc.; (boolean)
                    struct autopilot_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/autopilot_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the autopilot really on? Like servos_on, but stays on even the servos are temporarily off for CWS. (boolean)
                    struct autopilot_on_or_cws
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/autopilot_on_or_cws"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot source system, pilots (0) or copilots (1). With two indipendent autopilots, selects the one that is flying. (enum)
                    struct autopilot_source
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/autopilot_source"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Auto-throttle: 0=servos declutched (arm, hold), 1=airspeed hold, 2=N1 target hold, 3=retard, 4=reserved for future use (enum)
                    struct autothrottle_enabled
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/autothrottle_enabled"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Auto-throttle really working?  Takes into account failures, esys, etc. (boolean)
                    struct autothrottle_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/autothrottle_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Back course is armed, 0 or 1. (boolean)
                    struct backcourse_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/backcourse_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot Back-course Status. 0=off,1=armed,2=captured (enum)
                    struct backcourse_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/backcourse_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Maximum bank angle mode, 0->6. Higher number is steeper allowable bank. (enum)
                    struct bank_angle_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/bank_angle_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! baro setting of the altitude preselector (inHg)
                    struct barometer_setting_in_hg_alt_preselector
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/barometer_setting_in_hg_alt_preselector"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Electric pitch trim on - if off, autopilot flies with pitch servo only, and can't trim! (boolean)
                    struct electric_trim_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/electric_trim_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot Flare Status. 0=off,1=armed,2=captured (enum)
                    struct flare_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/flare_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Flight director 2 mode, 0 is off, 1 is on, 2 is on with autopilot servos.  Good for the FD swich. (enum)
                    struct flight_director2_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/flight_director2_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Flight director 2 pitch deflection in degrees, pos up. (degrees)
                    struct flight_director2_pitch_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/flight_director2_pitch_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Flight director 2 roll deflection in degrees, pos right. (degrees)
                    struct flight_director2_roll_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/flight_director2_roll_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot 3 mode, 0 is off, 1 has no meaning, 2 is on with autopilot servos.  Good for the AP swich. (enum)
                    struct flight_director3_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/flight_director3_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Flight director mode, 0 is off, 1 is on, 2 is on with autopilot servos.  Good for the FD swich. (enum)
                    struct flight_director_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/flight_director_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Flight director pitch deflection in degrees, pos up. (degrees)
                    struct flight_director_pitch_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/flight_director_pitch_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Flight director roll deflection in degrees, pos right. (degrees)
                    struct flight_director_roll_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/flight_director_roll_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Enables the FMS to take over vertical control of the autopilot.   This matches the command "sim/autopilot/FMS"." (boolean)
                    struct fms_vnav
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/fms_vnav"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Glideslope is armed, 0 or 1. (boolean)
                    struct glideslope_armed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/glideslope_armed"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot glideslope status. 0=off,1=armed,2=captured (enum)
                    struct glideslope_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/glideslope_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot GPSS Status. 0=off, 2=active (enum)
                    struct gpss_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/gpss_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Heading hold commanded, in degrees magnetic. (degrees_magnetic)
                    struct heading_dial_deg_mag_copilot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/heading_dial_deg_mag_copilot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Heading hold commanded, in degrees magnetic. (degrees_magnetic)
                    struct heading_dial_deg_mag_pilot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/heading_dial_deg_mag_pilot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot Heading Hold Status. 0=off,1=armed,2=captured (enum)
                    struct heading_hold_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/heading_hold_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 0 = Heading bug supplies HDG to autopilot, 1 = GPSS supplies heading to autopilot (boolean)
                    struct heading_is_gpss
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/heading_is_gpss"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot heading mode. (enum)
                    struct heading_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/heading_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot Heading Select Status. 0=off,1=armed,2=captured (enum)
                    struct heading_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/heading_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Localizer is armed, 0 or 1. (boolean)
                    struct hnav_armed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/hnav_armed"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! If aputopilot2_avail is true, this selects the master FD: 0 = pilot, 1 = copilot, 2 = both indipendent (enum)
                    struct master_flight_director
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/master_flight_director"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot Nav Status. 0=off,1=armed,2=captured (enum)
                    struct nav_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/nav_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! fail warn all lights on (boolean)
                    struct otto_fail_warn
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/otto_fail_warn"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! whether the autopilot is ready, but not actually turned on. This is true when the autopilot has powered, has no failures, and is ready to be engaged but not engaged yet. (boolean)
                    struct otto_ready
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/otto_ready"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Manual trim required: 0=None, -1=Pitch down, 1=Pitch up (enum)
                    struct pitch_mistrim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/pitch_mistrim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot Pitch-Hold Status. 0=off,1=armed,2=captured (enum)
                    struct pitch_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/pitch_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot turn rate hold status: 0=off, 2=captured (enum)
                    struct rate_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/rate_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot Roll-Hold Status. 0=off,1=armed,2=captured (enum)
                    struct roll_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/roll_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot Rollout Status. 0=off,1=armed,2=captured (enum)
                    struct rollout_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/rollout_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are the servos on?  Takes into account FD2 mode and control-wheel-steering, failures, etc. (boolean)
                    struct servos2_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/servos2_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are the servos on?  Takes into account AP3 mode and control-wheel-steering, failures, etc. (boolean)
                    struct servos3_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/servos3_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are the servos on?  Takes into account FD mode and control-wheel-steering, failures, etc. (boolean)
                    struct servos_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/servos_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot Speed-hold (via pitch) status. 0=off,1=armed,2=captured (enum)
                    struct speed_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/speed_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Pitch-hold commanded in degrees up. (degrees)
                    struct sync_hold_pitch_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/sync_hold_pitch_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Roll-hold commanded in degrees right. (degrees)
                    struct sync_hold_roll_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/sync_hold_roll_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Turn rate commanded in degrees per second, positive right (deg/sec)
                    struct turn_rate_deg_sec
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/turn_rate_deg_sec"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vnav is armed, 0 or 1 - this is different from the "FMS" button - it is used ONLY for a physical G1000 connected by ethernet. (boolean)
                    struct vnav_armed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/vnav_armed"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot VNAV status. 0=off,1=armed,2=captured - for a physical hardware g1000 connected by Ethernet only!!! (enum)
                    struct vnav_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/vnav_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! VVI commanded in FPM. (feet/minute)
                    struct vvi_dial_fpm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/vvi_dial_fpm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autopilot VVI Status. 0=off,1=armed,2=captured (enum)
                    struct vvi_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/autopilot/vvi_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! camera datarefs
                namespace camera
                {
                    //! In-cockpit camera field of view (degrees)
                    struct camera_field_of_view
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/camera/camera_field_of_view"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! In-cockpit camera angular offset relative to airplane orientation (Heading) (degrees)
                    struct camera_offset_heading
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/camera/camera_offset_heading"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! In-cockpit camera angular offset relative to airplane orientation (Pitch) (degrees)
                    struct camera_offset_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/camera/camera_offset_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! In-cockpit camera angular offset relative to airplane orientation (Roll) (degrees)
                    struct camera_offset_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/camera/camera_offset_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! clock_timer datarefs
                namespace clock_timer
                {
                    //! Numeric day of month (day)
                    struct current_day
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/current_day"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Numeric month of the year (month)
                    struct current_month
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/current_month"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! True if date is showing (date button pressed recently) (boolean)
                    struct date_is_showing
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/date_is_showing"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Elapsed time on the timer, hours (hours)
                    struct elapsed_time_hours
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/elapsed_time_hours"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Elapsed time on the timer, minutes (minutes)
                    struct elapsed_time_minutes
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/elapsed_time_minutes"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Elapsed time on the timer, seconds (seconds)
                    struct elapsed_time_seconds
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/elapsed_time_seconds"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hobbs meter time, hours (hours)
                    struct hobbs_time_hours
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/hobbs_time_hours"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hobbs meter time, minutes (minutes)
                    struct hobbs_time_minutes
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/hobbs_time_minutes"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hobbs meter time, seconds (seconds)
                    struct hobbs_time_seconds
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/hobbs_time_seconds"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Local time, hours (hours)
                    struct local_time_hours
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/local_time_hours"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Local time, minutes (minutes)
                    struct local_time_minutes
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/local_time_minutes"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Local time, seconds (seconds)
                    struct local_time_seconds
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/local_time_seconds"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! True if time shown is GMT (boolean)
                    struct timer_is_GMT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/timer_is_GMT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! TODO (enum)
                    struct timer_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/timer_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! True if timer is running (boolean)
                    struct timer_running
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/timer_running"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Zulu time, hours (hours)
                    struct zulu_time_hours
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/zulu_time_hours"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Zulu time, minutes (minutes)
                    struct zulu_time_minutes
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/zulu_time_minutes"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Zulu time, seconds (seconds)
                    struct zulu_time_seconds
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/clock_timer/zulu_time_seconds"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! controls datarefs
                namespace controls
                {
                    //! Aileron trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the aileron trim is deflected enough to move the ailerons through 30% of their travel, then that is an aileron trim of 0.3. -1=left 1=right (-1..1)
                    struct aileron_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/aileron_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Requested dihedral, in ratio. 0.0 is no dihedral requested, 1 is max dihedral requested. (ratio)
                    struct dihedral_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/dihedral_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Elevator trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the elevator trim is deflected enough to move the elevators through 30% of their travel, then that is an elevator trim of 0.3. -1=down 1=up (-1..1)
                    struct elevator_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/elevator_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is how far the indicator of flap deployment has moved in the cockpit. (ratio)
                    struct flap_handle_deploy_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/flap_handle_deploy_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the flap HANDLE location, in ratio, where 0.0 is handle fully retracted, and 1.0 is handle fully extended. (ratio)
                    struct flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Gear handle position. 0 is up. 1 is down. (boolean)
                    struct gear_handle_down
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/gear_handle_down"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Requested incidence, in ratio. 0.0 is no incidence requested, 1 is max incidence requested. (ratio)
                    struct incidence_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/incidence_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is additional left brake requested by pedal deflection, 0.0 to 1.0. (ratio)
                    struct left_brake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/left_brake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the nosewheel steering turned on? 0 or 1.  This must be off AND the tail wheel must be unlocked to free castor. (boolean)
                    struct nosewheel_steer_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/nosewheel_steer_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the overall brake requested by the parking brake button... 0.0 is none, 1.0 is complete. (ratio)
                    struct parking_brake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/parking_brake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is additional right brake requested by pedal deflection, 0.0 to 1.0. (ratio)
                    struct right_brake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/right_brake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Rotor trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the rotor trim is deflected enough to move the rotor through 30% of its travel, then that is a rotor trim of 0.3. -1=down 1=up (-1..1)
                    struct rotor_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/rotor_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Rudder trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the rudder trim is deflected enough to move the rudders through 30% of their travel, then that is an rudder trim of 0.3. -1=left 1=right (-1..1)
                    struct rudder_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/rudder_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is how much the speebrake HANDLE is deflected, in ratio, where 0.0 is fully retracted, 0.5 is halfway down, and 1.0 is fully down, and -0.5 is speedbrakes ARMED. (ratio)
                    struct speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Tail-wheel lockig ratio. 0 for free-castoring, 1 for totally locked. (ratio)
                    struct tailwheel_lock_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/tailwheel_lock_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Requested thrust vector, in ratio. 0.0 is no thrust vector requested, 1 is max thrust vector requested. (ratio)
                    struct thrust_vector_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/thrust_vector_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Total rudder control input (sum of user pedal plus autopilot servo plus artificial stability) ([-1..1])
                    struct total_heading_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/total_heading_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Total pitch control input (sum of user yoke plus autopilot servo plus artificial stability) ([-1..1])
                    struct total_pitch_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/total_pitch_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Total roll control input (sum of user yoke plus autopilot servo plus artificial stability) ([-1..1])
                    struct total_roll_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/total_roll_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deployment of the water rudder, 0 is none, 1 is max (ratio)
                    struct water_rudder_handle_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/water_rudder_handle_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Requested wing-retraction, in ratio. 0.0 is no wing-retraction requested, 1 is max wing-retraction requested. (ratio)
                    struct wing_retraction_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/wing_retraction_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Requested sweep, in ratio. 0.0 is no sweep requested, 1 is max sweep requested. (ratio)
                    struct wingsweep_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/wingsweep_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is how much the user input has deflected the rudder in the cockpit, in ratio, where -1.0 is full left, and 1.0 is full right. (-1..1)
                    struct yoke_heading_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/yoke_heading_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is how much the user input has deflected the yoke in the cockpit, in ratio, where -1.0 is full down, and 1.0 is full up. (-1..1)
                    struct yoke_pitch_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/yoke_pitch_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is how much the user input has deflected the yoke in the cockpit, in ratio, where -1.0 is full left, and 1.0 is full right. (-1..1)
                    struct yoke_roll_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/controls/yoke_roll_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! electrical datarefs
                namespace electrical
                {
                    //! N1 of the APU (percent)
                    struct APU_N1_percent
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/APU_N1_percent"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! APU generator amperage. (amps)
                    struct APU_generator_amps
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/APU_generator_amps"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! APU generator is turned on, 0 or 1. (boolean)
                    struct APU_generator_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/APU_generator_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! APU actually running, 0 or 1. (boolean)
                    struct APU_running
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/APU_running"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! APU power switch, 0 is off, 1 is on, 2 is start-er-up! (boolean)
                    struct APU_starter_switch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/APU_starter_switch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Actual HUD brightness, taking into account failures (ratio)
                    struct HUD_brightness_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/HUD_brightness_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Actual HUD brightness, taking into account failures (ratio)
                    struct HUD_brightness_ratio_auto
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/HUD_brightness_ratio_auto"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Actual HUD brightness, taking into account failures (ratio)
                    struct HUD_brightness_ratio_manual
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/HUD_brightness_ratio_manual"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Battery amperage, in (surprisingly) amps. (amps)
                    struct battery_amps
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/battery_amps"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Battery turned on, 0 or 1. (boolean)
                    struct battery_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/battery_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Actual battery voltage in, umm, volts? (volts)
                    struct battery_voltage_actual_volts
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/battery_voltage_actual_volts"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Indicated battery voltage in, umm, volts? ...The indication may be different than the actual voltage! (volts)
                    struct battery_voltage_indicated_volts
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/battery_voltage_indicated_volts"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Bus load in amps per bus - dim 4 until 1030 (amps)
                    struct bus_load_amps
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/bus_load_amps"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 6;
                    };

                    //! Bus voltage for given bus - dim 4 until 1030 (voltage)
                    struct bus_volts
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/bus_volts"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 6;
                    };

                    //! Switch to connect the two busses together - power from one feeds the other.  0 or 1. (boolean)
                    struct cross_tie
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/cross_tie"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Volt-meter selection (0=external,1=ctr,2=lft,3=rgt,4=tpl,5=bat - use cmnds to set! (enum)
                    struct dc_voltmeter_selection
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/dc_voltmeter_selection"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! volt-meter value (voltage)
                    struct dc_voltmeter_value
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/dc_voltmeter_value"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Generator amperage. (amps)
                    struct generator_amps
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/generator_amps"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Generator turned on, 0 or 1. (boolean)
                    struct generator_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/generator_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Actual instrument brightness, taking into account failures - was [16] until 11.10 (ratio)
                    struct instrument_brightness_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/instrument_brightness_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Actual instrument brightness, taking into account failures - was [16] until 11.10 (ratio)
                    struct instrument_brightness_ratio_auto
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/instrument_brightness_ratio_auto"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Actual instrument brightness, taking into account failures - was [16] until 11.10 (ratio)
                    struct instrument_brightness_ratio_manual
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/instrument_brightness_ratio_manual"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Inverter turned on, 0 or 1. (Was 8, but should be 2 total.) (boolean)
                    struct inverter_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/inverter_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2;
                    };

                    //! This is the actual panel brightness, taking into account failures (ratio)
                    struct panel_brightness_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/panel_brightness_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 4;
                    };

                    //! This is the actual panel brightness, taking into account failures (ratio)
                    struct panel_brightness_ratio_auto
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/panel_brightness_ratio_auto"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 4;
                    };

                    //! This is the actual panel brightness, taking into account failures (ratio)
                    struct panel_brightness_ratio_manual
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/panel_brightness_ratio_manual"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 4;
                    };

                    //! Add additional load to this dataref to create additional custom bus loads. (amps)
                    struct plugin_bus_load_amps
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/electrical/plugin_bus_load_amps"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 6;
                    };

                }

                //! engine datarefs
                namespace engine
                {
                    //! actuators datarefs
                    namespace actuators
                    {
                        //! EPR bug (target for thrust reference), % (percent)
                        struct EPR_target_bug
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/EPR_target_bug"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! N1 bug (target for thrust reference), % (percent)
                        struct N1_target_bug
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/N1_target_bug"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Afterburner enabled, on or off. (boolean)
                        struct afterburner_enabled
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/afterburner_enabled"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Auto-igniter switch, 0 or 1. Auto-ignition. This switch turns on a continuous ignition source in the engine to automatically relight it if there is a flameout. (boolean)
                        struct auto_ignite_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/auto_ignite_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Throttle position of the handle as a ratio, 0.0 is minimum beta, 1.0 = maximum beta. (ratio)
                        struct beta_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/beta_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Carb-heat handle position, 0.0 (none) to 1.0 (full). (ratio)
                        struct carb_heat_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/carb_heat_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! XP10: the on/off status of the clutch, either per engine or per prop, depending on voodoo, dim 8.  V11: there is only ONE clutch for the whle airplane. (boolean)
                        struct clutch_engage
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/clutch_engage"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 1;
                        };

                        //! Undocumented dataref
                        struct clutch_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/clutch_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 1;
                        };

                        //! Cowl-flap handle position, 0.0 (none) to 1.0 (full open). (ratio)
                        struct cowl_flap_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/cowl_flap_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! This is the lateral cyclic COMMAND, in degrees. Positive right cyclic. (degrees)
                        struct cyclic_aileron_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/cyclic_aileron_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! This is the longitudinal cyclic COMMAND, in degrees. Positive forwards cyclic. (degrees)
                        struct cyclic_elevator_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/cyclic_elevator_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Fadec, ok or off. (boolean)
                        struct fadec_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/fadec_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Fire extinguisher on (boolean)
                        struct fire_extinguisher_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/fire_extinguisher_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Fuel pump, on or off.  This is the electric per-engine fuel pump! (boolean)
                        struct fuel_pump_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/fuel_pump_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Governor on-off switch. (boolean)
                        struct governor_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/governor_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Idle speed, hi=1 or lo=0. (boolean)
                        struct idle_speed
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/idle_speed"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Idle speed, hi=1 or lo=0 - continuous control ([0..1])
                        struct idle_speed_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/idle_speed_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Igniter, on or off. (boolean)
                        struct igniter_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/igniter_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! 0 = off, 1 = left, 2 = right, 3 = both, 4 = starting (enum)
                        struct ignition_key
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/ignition_key"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! 0 = off, 1 = left, 2 = right, 3 = both (enum)
                        struct ignition_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/ignition_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! XP10: the ratio of the clutch, either per engine or per prop, depending on voodoo, dim 8.  V11: there is only ONE clutch for the whle airplane. (ratio)
                        struct manual_feather_prop
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/manual_feather_prop"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Mixture handle position, 0.0 (cutoff) to 1.0 (full rich). (ratio)
                        struct mixture_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/mixture_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Mixture handle position, this controls all at once. (ratio)
                        struct mixture_ratio_all
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/mixture_ratio_all"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Primer button, on or off. (boolean)
                        struct primer_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/primer_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Primer handle position, 0.0 (none) to 1.0 (on). (ratio)
                        struct primer_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/primer_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Prop handle position, in degrees.  Use this if your plane has a manual-adjust prop. (degrees)
                        struct prop_angle_degrees
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/prop_angle_degrees"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Prop handle position, in degrees, set all at once. (degrees)
                        struct prop_angle_degrees_all
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/prop_angle_degrees_all"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the propeller and engine operation mode. It is used for props and jets. Mode 0 is feathered, 1 is normal, 2 is in beta, and reverse (prop or jet) is mode 3. (enum)
                        struct prop_mode
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/prop_mode"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! This is the REQUESTED pitch of the prop in degrees from its flat-pitch setting. (degrees)
                        struct prop_pitch_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/prop_pitch_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Prop handle position, in ratio. NOTE: This is also used for helicopter collective! (ratio)
                        struct prop_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/prop_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Prop handle position, in ratio. This controls all handles at once. NOTE: This is also used for helicopter collective! (ratio)
                        struct prop_ratio_all
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/prop_ratio_all"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Prop handle position, in radians per second of requested prop rpm.  Use this if your plane has a constant speed prop. (radians/second)
                        struct prop_rotation_speed_rad_sec
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/prop_rotation_speed_rad_sec"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Prop handle position, this controls all props at once. (radians/second)
                        struct prop_rotation_speed_rad_sec_all
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/prop_rotation_speed_rad_sec_all"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Start lock to lock prop into fine pitch position so it doesn't feather on loss of oil pressure, for fixed turbofan engines. (boolean)
                        struct start_lock_engaged
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/start_lock_engaged"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! True while the starter motor is engaged (boolean)
                        struct starter_hit
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/starter_hit"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Throttle position of the handle as a ratio with reverse and beta, -2..-1 = rev, -1..0=beta, 0..1=alpha (ratio)
                        struct throttle_beta_rev_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/throttle_beta_rev_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Controls the throttle handle position, but includes beta and reverse.  -2..-1 is reverse, -1..0 is beta, 0..1 is alpha. (ratio)
                        struct throttle_beta_rev_ratio_all
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/throttle_beta_rev_ratio_all"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Throttle position of the handle as a ratio with reverse, -1..0 = rev, 0..1=fwd (ratio)
                        struct throttle_jet_rev_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/throttle_jet_rev_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Controls the throttle handle position, but includes reverse.  -1..0 is reverse, 0..1 is fwd. (ratio)
                        struct throttle_jet_rev_ratio_all
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/throttle_jet_rev_ratio_all"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Throttle position of the handle itself, from 0.0 (idle) to 1.0 (max normal). (ratio)
                        struct throttle_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/throttle_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Throttle position of the handle itself - this controls all the handles at once. (ratio)
                        struct throttle_ratio_all
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/throttle_ratio_all"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Manual unfeather pump can provide oil pressure to the governor, to unfeather a stopped prop when the startlocks weren't engaged. Running the pump first unfeathers the prop and then engages the startlock (boolean)
                        struct unfeather_pump_running
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/actuators/unfeather_pump_running"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                    }

                    //! indicators datarefs
                    namespace indicators
                    {
                        //! CHT, deg.  Dataref label is wrong, units vary by plane. (degrees_C_or_F)
                        struct CHT_deg_C
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/CHT_deg_C"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! EGT, deg.  Dataref label is wrong, units vary by plane. (degrees_C_or_F)
                        struct EGT_deg_C
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/EGT_deg_C"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! EPR, ratio. (ratio)
                        struct EPR_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/EPR_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! ITT, deg.  Dataref label is wrong, units vary by plane. (degrees_C_or_F)
                        struct ITT_deg_C
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/ITT_deg_C"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Manifold pressure, inches HG. (inches_hg)
                        struct MPR_in_hg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/MPR_in_hg"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! N1, %. (percent)
                        struct N1_percent
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/N1_percent"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! N2, %. (percent)
                        struct N2_percent
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/N2_percent"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Carburator temperature in degrees C (degrees_C)
                        struct carburetor_temperature_C
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/carburetor_temperature_C"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Engine speed, radians per second (revolutions/minute)
                        struct engine_speed_rpm
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/engine_speed_rpm"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! FF, kilograms per second. (kilograms/second)
                        struct fuel_flow_kg_sec
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/fuel_flow_kg_sec"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Fuel pressure, psi. (pounds/square_inch)
                        struct fuel_pressure_psi
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/fuel_pressure_psi"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Oil pressure, psi. (pounds/square_inch)
                        struct oil_pressure_psi
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/oil_pressure_psi"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Oil quantity, 0.0 to 1.0. (ratio)
                        struct oil_quantity_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/oil_quantity_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Oil temp, deg.    Dataref label is wrong, units vary by plane. (degrees_C_or_F)
                        struct oil_temperature_deg_C
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/oil_temperature_deg_C"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Actual engine power output. (watts)
                        struct power_watts
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/power_watts"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Prop speed, radians per second                                                                                                                                                                                                         boolean (revolutions/minute)
                        struct prop_speed_rpm
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/prop_speed_rpm"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Engine thrust in Newtons (newtons)
                        struct thrust_n
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/thrust_n"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Torque, NM. (newton_meters)
                        struct torque_n_mtr
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/engine/indicators/torque_n_mtr"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                    }

                }

                //! fuel datarefs
                namespace fuel
                {
                    //! Indicated fuel level per tank (kgs)
                    struct fuel_quantity
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/fuel/fuel_quantity"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 9;
                    };

                    //! True if the pump for this tank is on. (bool)
                    struct fuel_tank_pump_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/fuel/fuel_tank_pump_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 9;
                    };

                    //! 0=none,1=left,2=center,3=right,4=all (enum)
                    struct fuel_tank_selector
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/fuel/fuel_tank_selector"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the left-engine fuel-tank selector. (enum)
                    struct fuel_tank_selector_left
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/fuel/fuel_tank_selector_left"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the right-engine fuel-tank selector. (enum)
                    struct fuel_tank_selector_right
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/fuel/fuel_tank_selector_right"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 0=none,1=left,2=center,3=right (enum)
                    struct fuel_tank_transfer_from
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/fuel/fuel_tank_transfer_from"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 0=none,1=left,2=center,3=right (enum)
                    struct fuel_tank_transfer_to
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/fuel/fuel_tank_transfer_to"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Total fuel on board the fuel totalizer was initialized with (kg)
                    struct fuel_totalizer_init_kg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/fuel/fuel_totalizer_init_kg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Total accumulated fuel used by all engines since totalizer initialization (kg)
                    struct fuel_totalizer_sum_kg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/fuel/fuel_totalizer_sum_kg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! True if user is holding down the aux-tank button. (bool)
                    struct showing_aux
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/fuel/showing_aux"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! gauges datarefs
                namespace gauges
                {
                    //! actuators datarefs
                    namespace actuators
                    {
                        //! ASI bug location on the dial, in degrees, 0 straight up, positive clockwise. (degrees)
                        struct airspeed_bug_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/actuators/airspeed_bug_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Artificial horizon pitch-reference adjustment. Copilot side. (degrees)
                        struct artificial_horizon_adjust_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/actuators/artificial_horizon_adjust_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Artificial horizon pitch-reference adjustment. Pilot side. (degrees)
                        struct artificial_horizon_adjust_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/actuators/artificial_horizon_adjust_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Baro altitude bug. Copilot side (feet)
                        struct baro_altimeter_bug_ft_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/actuators/baro_altimeter_bug_ft_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Baro altitude bug. Pilot side (feet)
                        struct baro_altimeter_bug_ft_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/actuators/baro_altimeter_bug_ft_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Barometric pressure setting, inches HG.  Copilot side. (inches_hg)
                        struct barometer_setting_in_hg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/actuators/barometer_setting_in_hg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Barometric pressure setting, inches HG.  Pilot side. (inches_hg)
                        struct barometer_setting_in_hg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/actuators/barometer_setting_in_hg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Barometric pressure setting, inches HG.  Standby instrument. (inches_hg)
                        struct barometer_setting_in_hg_stby
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/actuators/barometer_setting_in_hg_stby"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Radio altitude bug entered into the radio altimeter. Copilot side. (feet)
                        struct radio_altimeter_bug_ft_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/actuators/radio_altimeter_bug_ft_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Radio altitude bug entered into the radio altimeter. Pilot side. (feet)
                        struct radio_altimeter_bug_ft_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/actuators/radio_altimeter_bug_ft_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                    }

                    //! indicators datarefs
                    namespace indicators
                    {
                        //! Undocumented dataref
                        struct CG_indicator
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/CG_indicator"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! acceleration of airspeed (ASI trend) (knots/second)
                        struct airspeed_acceleration_kts_sec_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/airspeed_acceleration_kts_sec_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! acceleration of airspeed (ASI trend) (knots/second)
                        struct airspeed_acceleration_kts_sec_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/airspeed_acceleration_kts_sec_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated airspeed in knots, copilot. (knots)
                        struct airspeed_kts_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/airspeed_kts_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated airspeed in knots, pilot. (knots)
                        struct airspeed_kts_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/airspeed_kts_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated airspeed in knots, standby instrument  (knots)
                        struct airspeed_kts_stby
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/airspeed_kts_stby"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated height, MSL, in feet, primary system, based on co-pilots barometric pressure input. (feet)
                        struct altitude_ft_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/altitude_ft_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated height, MSL, in feet, primary system, based on pilots barometric pressure input. (feet)
                        struct altitude_ft_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/altitude_ft_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated height, MSL, in feet, primary system, based on standby instrument barometric pressure input. (feet)
                        struct altitude_ft_stby
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/altitude_ft_stby"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Baro-altimeter altitude alert light, as per autopilot altitude warn configuration, copilot. 0 = off, 1 = lit, 2 = blinking (enum)
                        struct baro_altimeter_alert_lit_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/baro_altimeter_alert_lit_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Baro-altimeter altitude alert light, as per autopilot altitude warn configuration, pilot. 0 = off, 1 = lit, 2 = blinking (enum)
                        struct baro_altimeter_alert_lit_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/baro_altimeter_alert_lit_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Baro-altimeter decision warning light, copilot-side (boolean)
                        struct baro_altimeter_mda_lit_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/baro_altimeter_mda_lit_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Baro-altimeter decision warning light, pilot-side (boolean)
                        struct baro_altimeter_mda_lit_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/baro_altimeter_mda_lit_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated heading of the wet compass, in degrees. (degrees_magnetic)
                        struct compass_heading_deg_mag
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/compass_heading_deg_mag"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! The ground track of the aircraft in degrees magnetic (degrees)
                        struct ground_track_mag_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/ground_track_mag_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! The ground track of the aircraft in degrees magnetic (degrees)
                        struct ground_track_mag_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/ground_track_mag_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated magnetic heading, in degrees.  Source: AHARS.  Side: Copilot (degrees_magnetic)
                        struct heading_AHARS_deg_mag_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/heading_AHARS_deg_mag_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated magnetic heading, in degrees.  Source: AHARS.  Side: Pilot (degrees_magnetic)
                        struct heading_AHARS_deg_mag_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/heading_AHARS_deg_mag_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated magnetic heading, in degrees.  Source: electric gyro.  Side: Copilot (degrees_magnetic)
                        struct heading_electric_deg_mag_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/heading_electric_deg_mag_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated magnetic heading, in degrees.  Source: electric gyro.  Side: Pilot (degrees_magnetic)
                        struct heading_electric_deg_mag_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/heading_electric_deg_mag_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated magnetic heading, in degrees.  Source: vacuum gyro.  Side: Copilot (degrees_magnetic)
                        struct heading_vacuum_deg_mag_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/heading_vacuum_deg_mag_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated magnetic heading, in degrees.  Source: vacuum gyro.  Side: Pilot (degrees_magnetic)
                        struct heading_vacuum_deg_mag_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/heading_vacuum_deg_mag_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! number (mach)
                        struct mach_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/mach_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! number (mach)
                        struct mach_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/mach_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! For planes with a max mach number, this is the max mach number converted to KIAS for the current plane altitude, etc. - useful for adaptive needles and limit markers on tapes (knots)
                        struct max_mach_number_in_kias
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/max_mach_number_in_kias"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! For planes with a max mach number, this is the lesser of the max mach number converted to KIAS for the current plane altitude and V-never-exceed. (knots)
                        struct max_mach_number_or_speed_kias
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/max_mach_number_or_speed_kias"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated pitch, in degrees, positive up.  Source: AHARS.  Side: Copilot (degrees)
                        struct pitch_AHARS_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/pitch_AHARS_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated pitch, in degrees, positive up.  Source: AHARS.  Side: Pilot (degrees)
                        struct pitch_AHARS_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/pitch_AHARS_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated pitch, in degrees, positive up.  Source: electric gyro.  Side: Copilot (degrees)
                        struct pitch_electric_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/pitch_electric_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated pitch, in degrees, positive up.  Source: electric gyro.  Side: Pilot (degrees)
                        struct pitch_electric_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/pitch_electric_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated pitch, in degrees, positive up.  Source: vacuum gyro.  Side: Copilot (degrees)
                        struct pitch_vacuum_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/pitch_vacuum_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated pitch, in degrees, positive up.  Source: vacuum gyro.  Side: Pilot (degrees)
                        struct pitch_vacuum_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/pitch_vacuum_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Degrees difference between two prop.  Can be used for prop sync display. (degrees)
                        struct prop_sync_degrees
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/prop_sync_degrees"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Radio-altimeter decision warning light, copilot-side (boolean)
                        struct radio_altimeter_dh_lit_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/radio_altimeter_dh_lit_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Radio-altimeter decision warning light, pilot-side (boolean)
                        struct radio_altimeter_dh_lit_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/radio_altimeter_dh_lit_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Radio-altimeter indicated height in feet, copilot-side (feet)
                        struct radio_altimeter_height_ft_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/radio_altimeter_height_ft_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Radio-altimeter indicated height in feet, pilot-side (feet)
                        struct radio_altimeter_height_ft_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/radio_altimeter_height_ft_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated roll, in degrees, positive right.  Source: AHARS.  Side: Copilot (degrees)
                        struct roll_AHARS_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/roll_AHARS_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated roll, in degrees, positive right.  Source: AHARS.  Side: Pilot (degrees)
                        struct roll_AHARS_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/roll_AHARS_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated roll, in degrees, positive right.  Source: electric gyro.  Side: Copilot (degrees)
                        struct roll_electric_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/roll_electric_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated roll, in degrees, positive right.  Source: electric gyro.  Side: Pilot (degrees)
                        struct roll_electric_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/roll_electric_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated roll, in degrees, positive right. (degrees)
                        struct roll_vacuum_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/roll_vacuum_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated roll, in degrees, positive right.  Source: vacuum gyro.  Side: Pilot (degrees)
                        struct roll_vacuum_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/roll_vacuum_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Sideslip in degrees (degrees)
                        struct sideslip_degrees
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/sideslip_degrees"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Slip indication, in degrees of ball deflection from centered. (degrees)
                        struct slip_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/slip_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Vacuum system 1 suction as ratio of max available in plane. (ratio)
                        struct suction_1_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/suction_1_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Vacuum system 2 suction as ratio of max available in plane. (ratio)
                        struct suction_2_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/suction_2_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Total energy in feet/minute (feet/minute)
                        struct total_energy_fpm
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/total_energy_fpm"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! True airspeed in knots, for copilot pitot/static, calculated by ADC, requires pitot, static, oat sensor and ADC all to work correctly to give correct value (knots)
                        struct true_airspeed_kts_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/true_airspeed_kts_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! True airspeed in knots, for pilot pitot/static, calculated by ADC, requires pitot, static, oat sensor and ADC all to work correctly to give correct value (knots)
                        struct true_airspeed_kts_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/true_airspeed_kts_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated rate-of-turn, in degrees deflection, for old-style turn-indicators.  Copilot side. (degrees)
                        struct turn_rate_heading_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/turn_rate_heading_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated rate-of-turn, in degrees deflection, for old-style turn-indicators.  Pilot side. (degrees)
                        struct turn_rate_heading_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/turn_rate_heading_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated rate-of-turn, in degrees deflection, for newer roll-augmented turn-indicators.  Copilot side. (degrees)
                        struct turn_rate_roll_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/turn_rate_roll_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated rate-of-turn, in degrees deflection, for newer roll-augmented turn-indicators.  Pilot side. (degrees)
                        struct turn_rate_roll_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/turn_rate_roll_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated vertical speed in feet per minute, copilot system. (feet/minute)
                        struct vvi_fpm_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/vvi_fpm_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated vertical speed in feet per minute, pilot system. (feet/minute)
                        struct vvi_fpm_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/vvi_fpm_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Ratio of releasable water still in the tank, 0..1. (ratio)
                        struct water_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/water_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Wind direction currently acting on the plane, in degrees magnetic. (degrees_magnetic)
                        struct wind_heading_deg_mag
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/wind_heading_deg_mag"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Wind speed currently acting on the plane, in knots true. (knots)
                        struct wind_speed_kts
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/gauges/indicators/wind_speed_kts"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                    }

                }

                //! hydraulics datarefs
                namespace hydraulics
                {
                    //! indicators datarefs
                    namespace indicators
                    {
                        //! Hydraulic fluid quantity, ratio of max, system 1 (ratio)
                        struct hydraulic_fluid_ratio_1
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/hydraulics/indicators/hydraulic_fluid_ratio_1"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Hydraulic fluid quantity, ratio of max, system 2 (ratio)
                        struct hydraulic_fluid_ratio_2
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/hydraulics/indicators/hydraulic_fluid_ratio_2"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Hydraulic system 1 pressure, units set by Plane-Maker. (any)
                        struct hydraulic_pressure_1
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/hydraulics/indicators/hydraulic_pressure_1"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Hydraulic system 2 pressure, units set by Plane-Maker. (any)
                        struct hydraulic_pressure_2
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/hydraulics/indicators/hydraulic_pressure_2"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                    }

                }

                //! ice datarefs
                namespace ice
                {
                    //! De-Ice ratio.  (Description needed) (ratio)
                    struct anti_ice_engine_air
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/anti_ice_engine_air"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! De-Ice ratio.  (Description needed) (ratio)
                    struct anti_ice_engine_air_b
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/anti_ice_engine_air_b"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - inlet heat. This switch turns on thermal anti ice of the engine cowling and inlet. This takes hot bleed air from the HP compressor.  Per engine (boolean)
                    struct cowling_thermal_anti_ice_per_engine
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/cowling_thermal_anti_ice_per_engine"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! De-ice switch, 0 or 1.  AOA sensor heat. This switch turns on de-icing heat for the AOA sensor. If it freezes up your AOA indicator stops working. AOA sensor failure will also affect the aircraft's artificial stability system if it has one.  Pilot. (boolean)
                    struct ice_AOA_heat_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_AOA_heat_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  AOA sensor heat. This switch turns on de-icing heat for the AOA sensor. If it freezes up your AOA indicator stops working. AOA sensor failure will also affect the aircraft's artificial stability system if it has one.  Copilot. (boolean)
                    struct ice_AOA_heat_on_copilot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_AOA_heat_on_copilot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1. (boolean)
                    struct ice_all_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_all_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - auto-ignition. This switch turns on a continuous ignition source in the engine to automatically relight it if there is a flameout. (boolean)
                    struct ice_auto_ignite_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_auto_ignite_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  Ice-detection: Turn this switch on to enable ice-detection... if the system detects ice, it will light up the ICE annunciator. (boolean)
                    struct ice_detect_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_detect_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - inlet heat. This switch turns on de-icing heat in the engine air inlet keep ice from choking your engine. Engine 1 only (boolean)
                    struct ice_inlet_heat_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_inlet_heat_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - inlet heat. This switch turns on de-icing heat in the engine air inlet keep ice from choking your engine.  Per engine (boolean)
                    struct ice_inlet_heat_on_per_engine
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_inlet_heat_on_per_engine"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! De-ice switch, 0 or 1.  Pitot tube heat, co-pilot. This switch turns on de-icing heat in the co-pilot side pitot tube. If it freezes up your airspeed indicator and altimeter stop working. Airspeed and altitude related autopilot functions are also affected. (boolean)
                    struct ice_pitot_heat_on_copilot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_pitot_heat_on_copilot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - pitot tube heat. This switch turns on de-icing heat in the pitot tube. If it freezes up your airspeed indicator and altimeter stop working. Airspeed and altitude related autopilot functions are also affected. (boolean)
                    struct ice_pitot_heat_on_pilot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_pitot_heat_on_pilot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - prop heat. This switch turns on de-icing of the propeller(s) to keep ice from building up on your prop. Engine 1 only (boolean)
                    struct ice_prop_heat_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_prop_heat_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - prop heat. This switch turns on de-icing of the propeller(s) to keep ice from building up on your prop.  Per engine (boolean)
                    struct ice_prop_heat_on_per_engine
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_prop_heat_on_per_engine"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! De-ice switch, 0, 1, or 2.  De-ice - prop TKS. This switch turns on de-icing of the propeller(s) with TKS fluid to keep ice from building up on your prop. 0 = Off, 1 = Norm, 2 = High. Per engine (enum)
                    struct ice_prop_tks_on_per_engine
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_prop_tks_on_per_engine"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! De-ice switch, 0 or 1.  Static port heat. This switch turns on de-icing heat for the static sensor. If it freezes up your altimeter, vvi and airspeed indicator stop working. Copilot. (boolean)
                    struct ice_static_heat_on_copilot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_static_heat_on_copilot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  Static port heat. This switch turns on de-icing heat for the static sensor. If it freezes up your altimeter, vvi and airspeed indicator stop working. Pilot. (boolean)
                    struct ice_static_heat_on_pilot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_static_heat_on_pilot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - pneumatic. This switch inflates flexible bladders on the wing leading edges to pop off accumulated ice. (Left wing) (boolean)
                    struct ice_surface_boot_left_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_surface_boot_left_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - pneumatic. This switch inflates flexible bladders on the wing leading edges to pop off accumulated ice. (All wings) (boolean)
                    struct ice_surface_boot_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_surface_boot_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - pneumatic. This switch inflates flexible bladders on the wing leading edges to pop off accumulated ice. (Right wing) (boolean)
                    struct ice_surface_boot_right_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_surface_boot_right_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - bleed air. This switch directs warm air from the engines into the wing leading edges to keep them free of ice. (Left wing) (boolean)
                    struct ice_surface_hot_bleed_air_left_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_surface_hot_bleed_air_left_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - bleed air. This switch directs warm air from the engines into the wing leading edges to keep them free of ice. (All wings) (boolean)
                    struct ice_surface_hot_bleed_air_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_surface_hot_bleed_air_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - bleed air. This switch directs warm air from the engines into the wing leading edges to keep them free of ice. (Right wing) (boolean)
                    struct ice_surface_hot_bleed_air_right_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_surface_hot_bleed_air_right_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0, 1, or 2.  De-ice - TKS fluid. This switch activates the pump for the weeping wing, dissipating TKS fluid on the leading edges to keep them free of ice. 0 = Off, 1 = Norm, 2 = High. (Left wing) (enum)
                    struct ice_surface_tks_left_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_surface_tks_left_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0, 1, or 2.  De-ice - TKS fluid. This switch activates the pump for the weeping wing, dissipating TKS fluid on the leading edges to keep them free of ice. 0 = Off, 1 = Norm, 2 = High. (All wings) (enum)
                    struct ice_surface_tks_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_surface_tks_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0, 1, or 2.  De-ice - TKS fluid. This switch activates the pump for the weeping wing, dissipating TKS fluid on the leading edges to keep them free of ice. 0 = Off, 1 = Norm, 2 = High. (Right wing) (enum)
                    struct ice_surface_tks_right_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_surface_tks_right_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - electric heat. This switch engages electrically heated leading edges. (Left wing) (boolean)
                    struct ice_surfce_heat_left_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_surfce_heat_left_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - electric heat. This switch engages electrically heated leading edges. (All wings) (boolean)
                    struct ice_surfce_heat_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_surfce_heat_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - electric heat. This switch engages electrically heated leading edges. (Right wing) (boolean)
                    struct ice_surfce_heat_right_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_surfce_heat_right_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! TKS de-icing fluid reserve. See sim/aircraft/specialcontrols/acf_tks_cap_liter for the plane's total capacity. (liter)
                    struct ice_tks_fluid_liter
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_tks_fluid_liter"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! De-ice switch, 0 or 1.  De-ice - windshield heat. This switch turns on windshield de-icing to keep ice from blocking your vision. (boolean)
                    struct ice_window_heat_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/ice/ice_window_heat_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! oxygen datarefs
                namespace oxygen
                {
                    //! actuators datarefs
                    namespace actuators
                    {
                        //! 0 = off, 1 = unregulated, 2 = now/night, 3 = day/delay 5, 4 = day/delay 10, 5 = fat/face mask 1, 6 = fat/face mask 2, 7 = fat/face mask 3, 8 = fat/face mask 4 (enum)
                        struct demand_flow_setting
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/oxygen/actuators/demand_flow_setting"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! number of people plugged into the bottle O2 system - note that airliners usually have a chemical oxygen system, so this is for the two pilots, while the PAX a served by a chemical oxygenator (int)
                        struct num_plugged_in_o2
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/oxygen/actuators/num_plugged_in_o2"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! crew oxygen valve open (boolean)
                        struct o2_valve_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/oxygen/actuators/o2_valve_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                    }

                    //! indicators datarefs
                    namespace indicators
                    {
                        //! pressure in the O2 bottle. Writeable with override_oxygen_system (lb/in2)
                        struct o2_bottle_pressure_psi
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/oxygen/indicators/o2_bottle_pressure_psi"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! liters of O2 remaining in the crew bottle. Writeable with override_oxygen_system (liter)
                        struct o2_bottle_rem_liter
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/oxygen/indicators/o2_bottle_rem_liter"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! the chemical oxygen generator can still supply the passenger oxygen masks with O2 for this many minutes (minutes)
                        struct pass_oxygenator_min_rem
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/oxygen/indicators/pass_oxygenator_min_rem"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! passenger chemical oxygen generator on and supplying passengers' O2 masks. Note that the dataref to drop the masks manually is sim/operation/failures/rel_pass_o2_on (boolean)
                        struct pass_oxygenator_working
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/oxygen/indicators/pass_oxygenator_working"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! pressure altitude felt by the pilot's body. Will be lower than cabin pressure altitude when on oxygen. This is what triggers the hypoxia black-out effect. Writeable with override_oxygen_system (feet)
                        struct pilot_felt_altitude_ft
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/oxygen/indicators/pilot_felt_altitude_ft"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                    }

                }

                //! pressurization datarefs
                namespace pressurization
                {
                    //! actuators datarefs
                    namespace actuators
                    {
                        //! Bleed air mode, 0=of, 1=left,2=both,3=right,4=apu,5=auto (enum)
                        struct bleed_air_mode
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/pressurization/actuators/bleed_air_mode"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Cabin altitude commanded, feet. (feet)
                        struct cabin_altitude_ft
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/pressurization/actuators/cabin_altitude_ft"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Cabin VVI commanded, feet. (feet/minute)
                        struct cabin_vvi_fpm
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/pressurization/actuators/cabin_vvi_fpm"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Dump all pressurization, 0 or 1. (boolean)
                        struct dump_all_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/pressurization/actuators/dump_all_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Dump pressurization to the current altitude, 0 or 1. (feet)
                        struct dump_to_altitude_on
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/pressurization/actuators/dump_to_altitude_on"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Maximum allowable altitude for this airplane to maintain the requested cabin altitude. (feet)
                        struct max_allowable_altitude_ft
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/pressurization/actuators/max_allowable_altitude_ft"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                    }

                    //! indicators datarefs
                    namespace indicators
                    {
                        //! Cabin altitude actually occurring, feet. (feet)
                        struct cabin_altitude_ft
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/pressurization/indicators/cabin_altitude_ft"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Cabin VVI actually occurring, fpm. (feet/minute)
                        struct cabin_vvi_fpm
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/pressurization/indicators/cabin_vvi_fpm"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Cabin differential pressure, psi. (pounds/square_inch)
                        struct pressure_diffential_psi
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/pressurization/indicators/pressure_diffential_psi"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                    }

                }

                //! radios datarefs
                namespace radios
                {
                    //! actuators datarefs
                    namespace actuators
                    {
                        //! DME display mode, where 0 is remote, 1 is frequency, and 2 is groundspeed-time. (enum)
                        struct DME_mode
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/DME_mode"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! DME display selection of what NAV radio to display. 0 for Nav1, 1for Nav2. (enum)
                        struct DME_slave_source
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/DME_slave_source"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! HSI source to display: 0 for Nav1, 1 for Nav2, 2 for GPS. (enum)
                        struct HSI_source_select_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/HSI_source_select_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! HSI source to display: 0 for Nav1, 1 for Nav2, 2 for GPS. (enum)
                        struct HSI_source_select_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/HSI_source_select_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! RMI is taking ADF (1) or VOR (0). (enum)
                        struct RMI_left_use_adf_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/RMI_left_use_adf_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! RMI is taking ADF (1) or VOR (0). (enum)
                        struct RMI_left_use_adf_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/RMI_left_use_adf_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! RMI is taking ADF (1) or VOR (0). (enum)
                        struct RMI_right_use_adf_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/RMI_right_use_adf_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! RMI is taking ADF (1) or VOR (0). (enum)
                        struct RMI_right_use_adf_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/RMI_right_use_adf_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! RMI source to display: 0 for Nav1, 1 for Nav2, 2 for GPS. (enum)
                        struct RMI_source_select_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/RMI_source_select_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! RMI source to display: 0 for Nav1, 1 for Nav2, 2 for GPS. (enum)
                        struct RMI_source_select_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/RMI_source_select_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CARD selection for ADF 1, copilot side, in degrees magnetic. (degrees_magnetic)
                        struct adf1_card_heading_deg_mag_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/adf1_card_heading_deg_mag_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CARD selection for ADF 1, pilot side, in degrees magnetic. (degrees_magnetic)
                        struct adf1_card_heading_deg_mag_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/adf1_card_heading_deg_mag_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! ADF radio 1 frequency, hz (10hertz)
                        struct adf1_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/adf1_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Left ADF radio 1 frequency, hz (10hertz)
                        struct adf1_left_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/adf1_left_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! ADF radio 1 off or on, 0 = off, 1 = antenna, 2 = on, 3 = tone, 4 = test (enum)
                        struct adf1_power
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/adf1_power"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Right ADF radio 1 frequency, hz (10hertz)
                        struct adf1_right_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/adf1_right_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! 1 if right adf 1 radio is selected, 0 if left is selected (boolean)
                        struct adf1_right_is_selected
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/adf1_right_is_selected"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! ADF radio 1 standby frequency, hz (10hertz)
                        struct adf1_standby_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/adf1_standby_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CARD selection for ADF 2, copilot side, in degrees magnetic. (degrees_magnetic)
                        struct adf2_card_heading_deg_mag_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/adf2_card_heading_deg_mag_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CARD selection for ADF 2, pilot side, in degrees magnetic. (degrees_magnetic)
                        struct adf2_card_heading_deg_mag_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/adf2_card_heading_deg_mag_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! ADF radio 2 frequency, hz (10hertz)
                        struct adf2_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/adf2_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Left ADF radio 2 frequency, hz (10hertz)
                        struct adf2_left_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/adf2_left_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! ADF radio 2 off or on, 0 = off, 1 = antenna, 2 = on, 3 = tone, 4 = test (enum)
                        struct adf2_power
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/adf2_power"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Right ADF radio 2 frequency, hz (10hertz)
                        struct adf2_right_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/adf2_right_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! 1 if right adf 2 radio is selected, 0 if left is selected (boolean)
                        struct adf2_right_is_selected
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/adf2_right_is_selected"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! ADF radio 2 standby frequency, hz (10hertz)
                        struct adf2_standby_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/adf2_standby_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! 6=com1,7=com2 (enum)
                        struct audio_com_selection
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_com_selection"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is DME audio enabled?  This only matters if the current selection has DME (boolean)
                        struct audio_dme_enabled
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_dme_enabled"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is audio for the marker beacons enabled? (boolean)
                        struct audio_marker_enabled
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_marker_enabled"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! 0=nav1,1=nav2,2=adf1,3=adf2,9=none (enum)
                        struct audio_nav_selection
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_nav_selection"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! is adf1 selected for listening (boolean)
                        struct audio_selection_adf1
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_selection_adf1"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! is adf2 selected for listening (boolean)
                        struct audio_selection_adf2
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_selection_adf2"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! is com1 selected for listening (boolean)
                        struct audio_selection_com1
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_selection_com1"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! is com2 selected for listening (boolean)
                        struct audio_selection_com2
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_selection_com2"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! is nav1 selected for listening (boolean)
                        struct audio_selection_nav1
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_selection_nav1"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! is nav2 selected for listening (boolean)
                        struct audio_selection_nav2
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_selection_nav2"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Audio level (0 is off, 1 is max) for adf1 audio ([0..1])
                        struct audio_volume_adf1
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_volume_adf1"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Audio level (0 is off, 1 is max) for adf2 audio ([0..1])
                        struct audio_volume_adf2
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_volume_adf2"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Audio level (0 is off, 1 is max) for com1 audio ([0..1])
                        struct audio_volume_com1
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_volume_com1"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Audio level (0 is off, 1 is max) for com2 audio ([0..1])
                        struct audio_volume_com2
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_volume_com2"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Audio level (0 is off, 1 is max) for dme audio ([0..1])
                        struct audio_volume_dme
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_volume_dme"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Audio level (0 is off, 1 is max) for marker beacon audio ([0..1])
                        struct audio_volume_mark
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_volume_mark"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Audio level (0 is off, 1 is max) for nav1 audio ([0..1])
                        struct audio_volume_nav1
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_volume_nav1"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Audio level (0 is off, 1 is max) for nav2 audio ([0..1])
                        struct audio_volume_nav2
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/audio_volume_nav2"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Com radio 1 frequency, Mhz component only (Mhz)
                        struct com1_frequency_Mhz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com1_frequency_Mhz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Com radio 1 frequency, 10 hz (10hertz)
                        struct com1_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com1_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Com radio 1 frequency, hz, supports 8.3 khz spacing (hertz)
                        struct com1_frequency_hz_833
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com1_frequency_hz_833"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Com radio 1 frequency, khz component only (khz)
                        struct com1_frequency_khz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com1_frequency_khz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Left Com radio 1 frequency, 10 hz (10hertz)
                        struct com1_left_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com1_left_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Left Nav radio 1 frequency, hz, supports 8.3 khz spacing (hertz)
                        struct com1_left_frequency_hz_833
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com1_left_frequency_hz_833"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Com radio 1 off or on, 0 or 1. (boolean)
                        struct com1_power
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com1_power"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Right Com radio 1 frequency, hz (10hertz)
                        struct com1_right_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com1_right_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! 1 if right com 1 radio is selected, 0 if left is selected (boolean)
                        struct com1_right_is_selected
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com1_right_is_selected"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Standby Com radio 1 frequency, Mhz component only (Mhz)
                        struct com1_standby_frequency_Mhz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com1_standby_frequency_Mhz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Com radio 1 standby frequency, 10 hz (10hertz)
                        struct com1_standby_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com1_standby_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Com radio 1 standby frequency, hz, supports 8.3 khz spacing (hertz)
                        struct com1_standby_frequency_hz_833
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com1_standby_frequency_hz_833"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Standby Com radio 1 frequency, khz component only (khz)
                        struct com1_standby_frequency_khz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com1_standby_frequency_khz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Com radio 2 frequency, Mhz component only (Mhz)
                        struct com2_frequency_Mhz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com2_frequency_Mhz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Com radio 2 frequency, 10 hz (10hertz)
                        struct com2_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com2_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Com radio 2 frequency, hz, supports 8.3 khz spacing (hertz)
                        struct com2_frequency_hz_833
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com2_frequency_hz_833"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Com radio 2 frequency, khz component only (khz)
                        struct com2_frequency_khz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com2_frequency_khz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Left Com radio 2 frequency, 10 hz (10hertz)
                        struct com2_left_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com2_left_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Left Nav radio 2 frequency, hz, supports 8.3 khz spacing (hertz)
                        struct com2_left_frequency_hz_833
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com2_left_frequency_hz_833"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Com radio 2 off or on, 0 or 1. (boolean)
                        struct com2_power
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com2_power"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Right Com radio 2 frequency, hz (10hertz)
                        struct com2_right_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com2_right_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! 1 if right com 2 radio is selected, 0 if left is selected (boolean)
                        struct com2_right_is_selected
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com2_right_is_selected"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Standby Com radio 2 frequency, Mhz component only (Mhz)
                        struct com2_standby_frequency_Mhz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com2_standby_frequency_Mhz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Com radio 2 standby frequency, 10 hz (10hertz)
                        struct com2_standby_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com2_standby_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Com radio 2 standby frequency, hz, supports 8.3 khz spacing (hertz)
                        struct com2_standby_frequency_hz_833
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com2_standby_frequency_hz_833"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Standby com radio 2 frequency, khz component only (khz)
                        struct com2_standby_frequency_khz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/com2_standby_frequency_khz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! DME radio frequency, hz (10hertz)
                        struct dme_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/dme_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Left DME radio frequency, hz (10hertz)
                        struct dme_left_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/dme_left_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! DME radio 1 off or on, 0 or 1. (boolean)
                        struct dme_power
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/dme_power"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Right DME radio frequency, hz (10hertz)
                        struct dme_right_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/dme_right_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! 1 if right DME radio is selected, 0 if left is selected (boolean)
                        struct dme_right_is_selected
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/dme_right_is_selected"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! DME radio standby frequency, hz (10hertz)
                        struct dme_standby_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/dme_standby_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! GPS 2 off or on, 0 or 1. (boolean)
                        struct gps2_power
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/gps2_power"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! GPS 1 off or on, 0 or 1. (boolean)
                        struct gps_power
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/gps_power"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! HSI OBS (copilot side) selection, in degrees magnetic. (degrees_magnetic)
                        struct hsi_obs_deg_mag_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/hsi_obs_deg_mag_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! HSI OBS (pilot side) selection, in degrees magnetic. (degrees_magnetic)
                        struct hsi_obs_deg_mag_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/hsi_obs_deg_mag_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! 0 = Hi Sens, 1 = Low sens (enum)
                        struct marker_sens
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/marker_sens"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Selected course based on nav1, copilot, degrees magnetic.  This is OBS for VORs, or localizer heading for ILS (degrees_magnetic)
                        struct nav1_course_deg_mag_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav1_course_deg_mag_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Selected course based on nav1, pilot, degrees magnetic.  This is OBS for VORs, or localizer heading for ILS (degrees_magnetic)
                        struct nav1_course_deg_mag_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav1_course_deg_mag_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Nav radio 1 frequency, Mhz component only (Mhz)
                        struct nav1_frequency_Mhz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav1_frequency_Mhz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Nav radio 1 frequency, hz (10hertz)
                        struct nav1_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav1_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Nav radio 1 frequency, khz component only (khz)
                        struct nav1_frequency_khz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav1_frequency_khz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Left Nav radio 1 frequency, hz (10hertz)
                        struct nav1_left_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav1_left_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! OBS 1 (copilot side) selection, in degrees magnetic. (degrees_magnetic)
                        struct nav1_obs_deg_mag_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav1_obs_deg_mag_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! OBS 1 (pilot side) selection, in degrees magnetic. (degrees_magnetic)
                        struct nav1_obs_deg_mag_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav1_obs_deg_mag_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Nav radio 1 off or on, 0 or 1. (boolean)
                        struct nav1_power
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav1_power"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Right Nav radio 1 frequency, hz (10hertz)
                        struct nav1_right_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav1_right_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! 1 if right nav 1 radio is selected, 0 if left is selected (boolean)
                        struct nav1_right_is_selected
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav1_right_is_selected"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Standby Nav radio 1 frequency, Mhz component only (Mhz)
                        struct nav1_standby_frequency_Mhz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav1_standby_frequency_Mhz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Nav radio 1 standby frequency, hz (10hertz)
                        struct nav1_standby_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav1_standby_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Standby Nav radio 1 frequency, khz component only (khz)
                        struct nav1_standby_frequency_khz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav1_standby_frequency_khz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Selected course based on nav2, copilot, degrees magnetic.  This is OBS for VORs, or localizer heading for ILS (degrees_magnetic)
                        struct nav2_course_deg_mag_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav2_course_deg_mag_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Selected course based on nav2, pilot, degrees magnetic.  This is OBS for VORs, or localizer heading for ILS (degrees_magnetic)
                        struct nav2_course_deg_mag_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav2_course_deg_mag_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Nav radio 2 frequency, Mhz component only (Mhz)
                        struct nav2_frequency_Mhz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav2_frequency_Mhz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Nav radio 2 frequency, hz (10hertz)
                        struct nav2_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav2_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Nav radio 2 frequency, khz component only (khz)
                        struct nav2_frequency_khz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav2_frequency_khz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Left Nav radio 2 frequency, hz (10hertz)
                        struct nav2_left_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav2_left_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! OBS 2 (copilot isde) selection, in degrees magnetic. (degrees_magnetic)
                        struct nav2_obs_deg_mag_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav2_obs_deg_mag_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! OBS 2 (pilot isde) selection, in degrees magnetic. (degrees_magnetic)
                        struct nav2_obs_deg_mag_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav2_obs_deg_mag_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Nav radio 2 off or on, 0 or 1. (boolean)
                        struct nav2_power
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav2_power"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Right Nav radio 2 frequency, hz (10hertz)
                        struct nav2_right_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav2_right_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! 1 if right nav 2 radio is selected, 0 if left is selected (boolean)
                        struct nav2_right_is_selected
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav2_right_is_selected"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Standby Nav radio 2 frequency, Mhz component only (Mhz)
                        struct nav2_standby_frequency_Mhz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav2_standby_frequency_Mhz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Nav radio 2 standby frequency, hz (10hertz)
                        struct nav2_standby_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav2_standby_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Standby Nav radio 2 frequency, khz component only (khz)
                        struct nav2_standby_frequency_khz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav2_standby_frequency_khz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Frequency-to-change selection for the all-in-one radio, 0->5 are Nav1, Nav2, Com1, Com2, ADF1, ADF2. (enum)
                        struct nav_com_adf_mode
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav_com_adf_mode"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Selected course based on navN, copilot, degrees magnetic.  This is OBS for VORs, or localizer heading for ILS (degrees_magnetic)
                        struct nav_course_deg_mag_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav_course_deg_mag_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Selected course based on navN, pilot, degrees magnetic.  This is OBS for VORs, or localizer heading for ILS (degrees_magnetic)
                        struct nav_course_deg_mag_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav_course_deg_mag_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Nav radio N frequency, Mhz component only (Mhz)
                        struct nav_frequency_Mhz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav_frequency_Mhz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Nav radio N frequency, hz (10hertz)
                        struct nav_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Nav radio N frequency, khz component only (khz)
                        struct nav_frequency_khz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav_frequency_khz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! OBS N (copilot isde) selection, in degrees magnetic. (degrees_magnetic)
                        struct nav_obs_deg_mag_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav_obs_deg_mag_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! OBS N (pilot isde) selection, in degrees magnetic. (degrees_magnetic)
                        struct nav_obs_deg_mag_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav_obs_deg_mag_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Nav radio N off or on, 0 or 1. Was 0-10 pre-11.10. Radios 11 and 12 are WAAS/EGNOS receivers (boolean)
                        struct nav_power
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav_power"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Standby Nav radio N frequency, Mhz component only (Mhz)
                        struct nav_standby_frequency_Mhz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav_standby_frequency_Mhz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Nav radio N standby frequency, hz (10hertz)
                        struct nav_standby_frequency_hz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav_standby_frequency_hz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Standby Nav radio N frequency, khz component only (khz)
                        struct nav_standby_frequency_khz
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/nav_standby_frequency_khz"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Current Transponder code (0000-7777) (transponder_code)
                        struct transponder_code
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/transponder_code"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Transponder mode (off=0,stdby=1,on=2,test=3) (enum)
                        struct transponder_mode
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/actuators/transponder_mode"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                    }

                    //! indicators datarefs
                    namespace indicators
                    {
                        //! Indicated bearing to the adf1 navaid (degrees_magnetic)
                        struct adf1_bearing_deg_mag
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/adf1_bearing_deg_mag"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! adf1 DME distance in nautical miles. (nautical_miles)
                        struct adf1_dme_distance_nm
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/adf1_dme_distance_nm"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! adf1 DME speed in knots. (knots)
                        struct adf1_dme_speed_kts
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/adf1_dme_speed_kts"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! adf1 DME time in minutes. (minutes)
                        struct adf1_dme_time_min
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/adf1_dme_time_min"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there a DME signal from ADF1's DME? (boolean)
                        struct adf1_has_dme
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/adf1_has_dme"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! current selected navID - ADF 1 (string)
                        struct adf1_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/adf1_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! Indicated relative bearing to the adf1 navaid (degrees)
                        struct adf1_relative_bearing_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/adf1_relative_bearing_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated bearing to the adf2 navaid (degrees_magnetic)
                        struct adf2_bearing_deg_mag
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/adf2_bearing_deg_mag"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! adf2 DME distance in nautical miles. (nautical_miles)
                        struct adf2_dme_distance_nm
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/adf2_dme_distance_nm"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! adf2 DME speed in knots. (knots)
                        struct adf2_dme_speed_kts
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/adf2_dme_speed_kts"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! adf2 DME time in minutes. (minutes)
                        struct adf2_dme_time_min
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/adf2_dme_time_min"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there a DME signal from ADF2's DME? (boolean)
                        struct adf2_has_dme
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/adf2_has_dme"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! current selected navID - ADF 2 (string)
                        struct adf2_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/adf2_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! Indicated relative bearing to the adf2 navaid (degrees)
                        struct adf2_relative_bearing_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/adf2_relative_bearing_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! standalone dme DME distance in nautical miles. (nautical_miles)
                        struct dme_dme_distance_nm
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/dme_dme_distance_nm"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! standalone dme DME speed in knots. (knots)
                        struct dme_dme_speed_kts
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/dme_dme_speed_kts"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! standalone dme DME time in minutes. (minutes)
                        struct dme_dme_time_min
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/dme_dme_time_min"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there a DME signal from standalone DME? (boolean)
                        struct dme_has_dme
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/dme_has_dme"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! current selected navID - DME (string)
                        struct dme_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/dme_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! FMS Distance to Top of Descent (nm)
                        struct fms_distance_to_tod_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/fms_distance_to_tod_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is the exec FMS light/warning lit for the co-pilot (Boolean)
                        struct fms_exec_light_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/fms_exec_light_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is the exec FMS light/warning lit for the pilot (Boolean)
                        struct fms_exec_light_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/fms_exec_light_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! FMS Flight Plan Target Altitude (Feet)
                        struct fms_fpta_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/fms_fpta_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Distance from top of descent to Nth waypoint (wayoint found via fms_tod_before_index_pilot) (nm)
                        struct fms_tod_before_distance_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/fms_tod_before_distance_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Index of waypoint in flightplan before which top of descent is located (index)
                        struct fms_tod_before_index_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/fms_tod_before_index_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! FMS Vertical Path Angle (Degrees)
                        struct fms_vpa_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/fms_vpa_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! FMS Vertical Track Error (Degrees)
                        struct fms_vtk_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/fms_vtk_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated bearing to the selected GPS 2 destination (degrees_magnetic)
                        struct gps2_bearing_deg_mag
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps2_bearing_deg_mag"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! gps 2 DME distance in nautical miles. (nautical_miles)
                        struct gps2_dme_distance_nm
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps2_dme_distance_nm"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! gps 2 DME speed in knots. (knots)
                        struct gps2_dme_speed_kts
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps2_dme_speed_kts"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! gps 2 DME time in minutes. (minutes)
                        struct gps2_dme_time_min
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps2_dme_time_min"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there a DME signal from GPS 2? (boolean)
                        struct gps2_has_dme
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps2_has_dme"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CDI lateral deflection in dots, gps 2, copilot (dots)
                        struct gps2_hdef_dots_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps2_hdef_dots_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CDI lateral deflection in dots, gps 2, pilot (dots)
                        struct gps2_hdef_dots_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps2_hdef_dots_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! current selected navID - GPS 2 (string)
                        struct gps2_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps2_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! Indicated relative bearing to the selected GPS 2 destination (degrees)
                        struct gps2_relative_bearing_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps2_relative_bearing_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the GPS 2 course to AHARS for the copilot. (degrees)
                        struct gps2_relative_heading_AHARS_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps2_relative_heading_AHARS_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the GPS 2 course to AHARS gyro for the pilot. (degrees)
                        struct gps2_relative_heading_AHARS_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps2_relative_heading_AHARS_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the GPS 2 course to the electric gyro for the copilot. (degrees)
                        struct gps2_relative_heading_electric_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps2_relative_heading_electric_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the GPS 2 course to the electric gyro for the pilot. (degrees)
                        struct gps2_relative_heading_electric_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps2_relative_heading_electric_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the GPS 2 course to the vacuum driven gyro for the copilot. (degrees)
                        struct gps2_relative_heading_vacuum_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps2_relative_heading_vacuum_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the GPS 2 course to the vacuum driven gyro for the pilot. (degrees)
                        struct gps2_relative_heading_vacuum_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps2_relative_heading_vacuum_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated bearing to the selected GPS 1 destination (degrees_magnetic)
                        struct gps_bearing_deg_mag
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps_bearing_deg_mag"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! gps 1 DME distance in nautical miles. (nautical_miles)
                        struct gps_dme_distance_nm
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps_dme_distance_nm"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! gps 1 DME speed in knots. (knots)
                        struct gps_dme_speed_kts
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps_dme_speed_kts"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! gps 1 DME time in minutes. (minutes)
                        struct gps_dme_time_min
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps_dme_time_min"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there a DME signal from GPS 1? (boolean)
                        struct gps_has_dme
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps_has_dme"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CDI lateral deflection in dots, gps, copilot (dots)
                        struct gps_hdef_dots_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps_hdef_dots_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CDI lateral deflection in dots, gps 1, pilot (dots)
                        struct gps_hdef_dots_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps_hdef_dots_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! current selected navID - GPS 1 (string)
                        struct gps_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! Indicated relative bearing to the selected GPS 1 destination (degrees)
                        struct gps_relative_bearing_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps_relative_bearing_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the GPS 1 course to AHARS for the copilot. (degrees)
                        struct gps_relative_heading_AHARS_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps_relative_heading_AHARS_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the GPS 1 course to AHARS gyro for the pilot. (degrees)
                        struct gps_relative_heading_AHARS_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps_relative_heading_AHARS_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the GPS 1 course to the electric gyro for the copilot. (degrees)
                        struct gps_relative_heading_electric_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps_relative_heading_electric_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the GPS 1 course to the electric gyro for the pilot. (degrees)
                        struct gps_relative_heading_electric_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps_relative_heading_electric_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the GPS 1 course to the vacuum driven gyro for the copilot. (degrees)
                        struct gps_relative_heading_vacuum_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps_relative_heading_vacuum_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the GPS 1 course to the vacuum driven gyro for the pilot. (degrees)
                        struct gps_relative_heading_vacuum_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/gps_relative_heading_vacuum_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated bearing to the copilot's HSI-selected navaid (degrees_magnetic)
                        struct hsi_bearing_deg_mag_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_bearing_deg_mag_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated bearing to the pilot's HSI-selected navaid (degrees_magnetic)
                        struct hsi_bearing_deg_mag_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_bearing_deg_mag_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there some kind of horizontal signal on copilot side HSI (boolean)
                        struct hsi_display_horizontal_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_display_horizontal_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there some kind of horizontal signal on pilot side HSI (boolean)
                        struct hsi_display_horizontal_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_display_horizontal_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there some kind of vertical signal on copilot side HSI (boolean)
                        struct hsi_display_vertical_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_display_vertical_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there some kind of vertical signal on pilot side HSI (boolean)
                        struct hsi_display_vertical_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_display_vertical_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! nav1 DME distance in nautical miles. copilot HSI (nautical_miles)
                        struct hsi_dme_distance_nm_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_dme_distance_nm_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! nav1 DME distance in nautical miles, pilot HSI (nautical_miles)
                        struct hsi_dme_distance_nm_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_dme_distance_nm_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! nav1 DME speed in knots. copilot HSI (knots)
                        struct hsi_dme_speed_kts_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_dme_speed_kts_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! nav1 DME speed in knots. pilot HSI (knots)
                        struct hsi_dme_speed_kts_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_dme_speed_kts_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! nav1 DME time in minutes. copilot HSI (minutes)
                        struct hsi_dme_time_min_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_dme_time_min_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! nav1 DME time in minutes. pilot HSI (minutes)
                        struct hsi_dme_time_min_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_dme_time_min_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Nav-To-From indication, nav1, copilot, 0 is flag, 1 is to, 2 is from. (enum)
                        struct hsi_flag_from_to_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_flag_from_to_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Nav-To-From indication, nav1, pilot, 0 is flag, 1 is to, 2 is from. (enum)
                        struct hsi_flag_from_to_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_flag_from_to_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Glide slope flag, copilot side HSI - EFIS style flag that shows when glideslope is expected, but not received (boolean)
                        struct hsi_flag_glideslope_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_flag_glideslope_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Glide slope flag, copilot side HSI - mechanical instrument flag that shows whenever no glideslope signal is received (boolean)
                        struct hsi_flag_glideslope_copilot_mech
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_flag_glideslope_copilot_mech"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Glide slope flag, pilot side HSI - EFIS style flag that shows when glideslope is expected, but not received (boolean)
                        struct hsi_flag_glideslope_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_flag_glideslope_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Glide slope flag, pilot side HSI - mechanical instrument flag that shows whenever no glideslope signal is received (boolean)
                        struct hsi_flag_glideslope_pilot_mech
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_flag_glideslope_pilot_mech"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there a DME signal from nav1's DME? (boolean)
                        struct hsi_has_dme_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_has_dme_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there a DME signal from nav1's DME? (boolean)
                        struct hsi_has_dme_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_has_dme_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CDI lateral deflection in dots, nav1, copilot (dots)
                        struct hsi_hdef_dots_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_hdef_dots_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CDI lateral deflection in dots, nav1, pilot (dots)
                        struct hsi_hdef_dots_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_hdef_dots_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated relative bearing to the copilot's HSI-selected navaid (degrees)
                        struct hsi_relative_bearing_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_relative_bearing_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated relative bearing to the pilot's HSI-selected navaid (degrees)
                        struct hsi_relative_bearing_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_relative_bearing_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav1 OBS to AHARS for the copilot. (degrees)
                        struct hsi_relative_heading_AHARS_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_relative_heading_AHARS_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav1 OBS to AHARS gyro for the pilot. (degrees)
                        struct hsi_relative_heading_AHARS_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_relative_heading_AHARS_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav1 OBS to the electric gyro for the copilot. (degrees)
                        struct hsi_relative_heading_electric_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_relative_heading_electric_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav1 OBS to the electric gyro for the pilot. (degrees)
                        struct hsi_relative_heading_electric_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_relative_heading_electric_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav1 OBS to the vacuum driven gyro for the copilot. (degrees)
                        struct hsi_relative_heading_vacuum_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_relative_heading_vacuum_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav1 OBS to the vacuum driven gyro for the pilot. (degrees)
                        struct hsi_relative_heading_vacuum_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_relative_heading_vacuum_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CDI vertical deflection in dots, nav1, copilot (dots)
                        struct hsi_vdef_dots_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_vdef_dots_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CDI vertical deflection in dots, nav1, pilot (dots)
                        struct hsi_vdef_dots_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/hsi_vdef_dots_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Marker light actually lit, 0 or 1. (boolean)
                        struct inner_marker_lit
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/inner_marker_lit"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Received signal strength of the marker. 0 when not receiving, 1 when at max strength (ratio)
                        struct inner_marker_signal_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/inner_marker_signal_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Marker light actually lit, 0 or 1. (boolean)
                        struct middle_marker_lit
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/middle_marker_lit"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Received signal strength of the marker. 0 when not receiving, 1 when at max strength (ratio)
                        struct middle_marker_signal_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/middle_marker_signal_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! The morse-code id output for the tuned radio. Only if the audio is being monitored. 0 for silent. 1 for dot. 2 for dash. (enum)
                        struct morse_id_tone_adf1
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/morse_id_tone_adf1"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! The morse-code id output for the tuned radio. Only if the audio is being monitored. 0 for silent. 1 for dot. 2 for dash. (enum)
                        struct morse_id_tone_adf2
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/morse_id_tone_adf2"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! The morse-code id output for the tuned radio. Only if the audio is being monitored. 0 for silent. 1 for dot. 2 for dash. (enum)
                        struct morse_id_tone_dme
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/morse_id_tone_dme"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! The morse-code id output for the tuned radio. Only if the audio is being monitored. 0 for silent. 1 for dot. 2 for dash. (enum)
                        struct morse_id_tone_nav1
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/morse_id_tone_nav1"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! The morse-code id output for the tuned radio. Only if the audio is being monitored. 0 for silent. 1 for dot. 2 for dash. (enum)
                        struct morse_id_tone_nav2
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/morse_id_tone_nav2"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! current selected navID - nav radio 10 (string)
                        struct nav10_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav10_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! current selected navID - nav radio 11. WAAS/EGNOS receiver (string)
                        struct nav11_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav11_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! current selected navID - nav radio 12. WAAS/EGNOS receiver (string)
                        struct nav12_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav12_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! Indicated bearing to the nav1 navaid (degrees_magnetic)
                        struct nav1_bearing_deg_mag
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_bearing_deg_mag"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there some kind of horizontal signal on nav1 (boolean)
                        struct nav1_display_horizontal
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_display_horizontal"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there some kind of vertical signal on nav1 (boolean)
                        struct nav1_display_vertical
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_display_vertical"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! nav1 DME distance in nautical miles. (nautical_miles)
                        struct nav1_dme_distance_nm
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_dme_distance_nm"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! nav1 DME speed in knots. (knots)
                        struct nav1_dme_speed_kts
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_dme_speed_kts"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! nav1 DME time in minutes. (minutes)
                        struct nav1_dme_time_min
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_dme_time_min"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Nav-To-From indication, nav1, copilot, 0 is flag, 1 is to, 2 is from. (enum)
                        struct nav1_flag_from_to_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_flag_from_to_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Nav-To-From indication, nav1, pilot, 0 is flag, 1 is to, 2 is from. (enum)
                        struct nav1_flag_from_to_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_flag_from_to_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Glide slope flag, nav1 - EFIS style flag that shows when glideslope is expected, but not received (boolean)
                        struct nav1_flag_glideslope
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_flag_glideslope"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Glide slope flag, nav1 - mechanical instrument flag that shows whenever no glideslope signal is received (boolean)
                        struct nav1_flag_glideslope_mech
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_flag_glideslope_mech"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there a DME signal from nav1's DME? (boolean)
                        struct nav1_has_dme
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_has_dme"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CDI lateral deflection in dots, nav1, copilot (dots)
                        struct nav1_hdef_dots_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_hdef_dots_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CDI lateral deflection in dots, nav1, pilot (dots)
                        struct nav1_hdef_dots_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_hdef_dots_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! current selected navID - nav radio 1 (string)
                        struct nav1_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! Indicated relative bearing to the nav1 navaid (degrees)
                        struct nav1_relative_bearing_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_relative_bearing_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav1 OBS to AHARS for the copilot. (degrees)
                        struct nav1_relative_heading_AHARS_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_relative_heading_AHARS_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav1 OBS to AHARS gyro for the pilot. (degrees)
                        struct nav1_relative_heading_AHARS_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_relative_heading_AHARS_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav1 OBS to the electric gyro for the copilot. (degrees)
                        struct nav1_relative_heading_electric_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_relative_heading_electric_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav1 OBS to the electric gyro for the pilot. (degrees)
                        struct nav1_relative_heading_electric_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_relative_heading_electric_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav1 OBS to the vacuum driven gyro for the copilot. (degrees)
                        struct nav1_relative_heading_vacuum_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_relative_heading_vacuum_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav1 OBS to the vacuum driven gyro for the pilot. (degrees)
                        struct nav1_relative_heading_vacuum_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_relative_heading_vacuum_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Type of navaid that's currently tuned in and being received - nav1 (enum)
                        struct nav1_type
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_type"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CDI vertical deflection in dots, nav1, copilot (dots)
                        struct nav1_vdef_dots_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_vdef_dots_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CDI vertical deflection in dots, nav1, pilot (dots)
                        struct nav1_vdef_dots_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav1_vdef_dots_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Indicated bearing to the nav2 navaid (degrees_magnetic)
                        struct nav2_bearing_deg_mag
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_bearing_deg_mag"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there some kind of horizontal signal on nav2 (boolean)
                        struct nav2_display_horizontal
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_display_horizontal"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there some kind of vertical signal on nav2 (boolean)
                        struct nav2_display_vertical
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_display_vertical"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! nav2 DME distance in nautical miles. (nautical_miles)
                        struct nav2_dme_distance_nm
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_dme_distance_nm"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! nav2 DME speed in knots. (knots)
                        struct nav2_dme_speed_kts
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_dme_speed_kts"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! nav2 DME time in minutes. (minutes)
                        struct nav2_dme_time_min
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_dme_time_min"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Nav-To-From indication, nav2, copilot, 0 is flag, 1 is to, 2 is from. (enum)
                        struct nav2_flag_from_to_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_flag_from_to_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Nav-To-From indication, nav2, pilot, 0 is flag, 1 is to, 2 is from. (enum)
                        struct nav2_flag_from_to_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_flag_from_to_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Glide slope flag, nav2 - EFIS style flag that shows when glideslope is expected, but not received (boolean)
                        struct nav2_flag_glideslope
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_flag_glideslope"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Glide slope flag, nav2 - mechanical instrument flag that shows whenever no glideslope signal is received (boolean)
                        struct nav2_flag_glideslope_mech
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_flag_glideslope_mech"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Is there a DME signal from nav2's DME? (boolean)
                        struct nav2_has_dme
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_has_dme"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CDI lateral deflection in dots, nav2, copilot (dots)
                        struct nav2_hdef_dots_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_hdef_dots_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CDI lateral deflection in dots, nav2, pilot (dots)
                        struct nav2_hdef_dots_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_hdef_dots_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! current selected navID - nav radio 2 (string)
                        struct nav2_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! Indicated relative bearing to the nav2 navaid (degrees)
                        struct nav2_relative_bearing_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_relative_bearing_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav2 OBS to AHARS for the copilot. (degrees)
                        struct nav2_relative_heading_AHARS_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_relative_heading_AHARS_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav2 OBS to AHARS gyro for the pilot. (degrees)
                        struct nav2_relative_heading_AHARS_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_relative_heading_AHARS_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav2 OBS to the electric gyro for the copilot. (degrees)
                        struct nav2_relative_heading_electric_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_relative_heading_electric_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav2 OBS to the electric gyro for the pilot. (degrees)
                        struct nav2_relative_heading_electric_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_relative_heading_electric_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav2 OBS to the vacuum driven gyro for the copilot. (degrees)
                        struct nav2_relative_heading_vacuum_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_relative_heading_vacuum_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! This is the relative heading of the nav2 OBS to the vacuum driven gyro for the pilot. (degrees)
                        struct nav2_relative_heading_vacuum_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_relative_heading_vacuum_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Type of navaid that's currently tuned in and being received - nav2 (enum)
                        struct nav2_type
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_type"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CDI vertical deflection in dots, nav2, copilot (dots)
                        struct nav2_vdef_dots_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_vdef_dots_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! CDI vertical deflection in dots, nav2, pilot (dots)
                        struct nav2_vdef_dots_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav2_vdef_dots_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! current selected navID - nav radio 3 (string)
                        struct nav3_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav3_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! current selected navID - nav radio 4 (string)
                        struct nav4_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav4_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! current selected navID - nav radio 5 (string)
                        struct nav5_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav5_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! current selected navID - nav radio 6 (string)
                        struct nav6_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav6_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! current selected navID - nav radio 7 (string)
                        struct nav7_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav7_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! current selected navID - nav radio 8 (string)
                        struct nav8_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav8_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! current selected navID - nav radio 9 (string)
                        struct nav9_nav_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav9_nav_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 150;
                        };

                        //! Indicated bearing to the nav N navaid (degrees_magnetic)
                        struct nav_bearing_deg_mag
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_bearing_deg_mag"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Is there some kind of horizontal signal on nav N (boolean)
                        struct nav_display_horizontal
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_display_horizontal"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Is there some kind of vertical signal on nav N (boolean)
                        struct nav_display_vertical
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_display_vertical"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! navN DME distance in nautical miles. (nautical_miles)
                        struct nav_dme_distance_nm
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_dme_distance_nm"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! navN DME speed in knots. (knots)
                        struct nav_dme_speed_kts
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_dme_speed_kts"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! navN DME time in minutes. (minutes)
                        struct nav_dme_time_min
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_dme_time_min"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Nav-To-From indication, navN, copilot, 0 is flag, 1 is to, 2 is from. (enum)
                        struct nav_flag_from_to_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_flag_from_to_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Nav-To-From indication, navN, pilot, 0 is flag, 1 is to, 2 is from. (enum)
                        struct nav_flag_from_to_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_flag_from_to_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Glide slope flag, nav N - EFIS style flag that shows when glideslope is expected, but not received (boolean)
                        struct nav_flag_glideslope
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_flag_glideslope"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Glide slope flag, nav N - mechanical instrument flag that shows whenever no glideslope signal is received (boolean)
                        struct nav_flag_glideslope_mech
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_flag_glideslope_mech"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Is there a DME signal from navN's DME? (boolean)
                        struct nav_has_dme
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_has_dme"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! CDI lateral deflection in dots, navN, copilot (dots)
                        struct nav_hdef_dots_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_hdef_dots_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! CDI lateral deflection in dots, navN, pilot (dots)
                        struct nav_hdef_dots_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_hdef_dots_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Indicated relative bearing to the nav N navaid (degrees)
                        struct nav_relative_bearing_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_relative_bearing_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! This is the relative heading of the nav N OBS to AHARS for the copilot. (degrees)
                        struct nav_relative_heading_AHARS_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_relative_heading_AHARS_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! This is the relative heading of the nav N OBS to AHARS gyro for the pilot. (degrees)
                        struct nav_relative_heading_AHARS_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_relative_heading_AHARS_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! This is the relative heading of the nav N OBS to the electric gyro for the copilot. (degrees)
                        struct nav_relative_heading_electric_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_relative_heading_electric_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! This is the relative heading of the nav N OBS to the electric gyro for the pilot. (degrees)
                        struct nav_relative_heading_electric_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_relative_heading_electric_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! This is the relative heading of the nav N OBS to the vacuum driven gyro for the copilot. (degrees)
                        struct nav_relative_heading_vacuum_deg_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_relative_heading_vacuum_deg_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! This is the relative heading of the nav N OBS to the vacuum driven gyro for the pilot. (degrees)
                        struct nav_relative_heading_vacuum_deg_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_relative_heading_vacuum_deg_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Type of navaid that's currently tuned in and being received - any nav receiver (enum)
                        struct nav_type
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_type"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! CDI vertical deflection in dots, navN, copilot (dots)
                        struct nav_vdef_dots_copilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_vdef_dots_copilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! CDI vertical deflection in dots, navN, pilot (dots)
                        struct nav_vdef_dots_pilot
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/nav_vdef_dots_pilot"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 12;
                        };

                        //! Marker light actually lit, 0 or 1.  This flashes as we go over. (boolean)
                        struct outer_marker_lit
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/outer_marker_lit"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Received signal strength of the marker. 0 when not receiving, 1 when at max strength (ratio)
                        struct outer_marker_signal_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/outer_marker_signal_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Over the marker, 0 or 1.  This stays on when over the marker (boolean)
                        struct over_inner_marker
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/over_inner_marker"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Over the marker, 0 or 1.  This stays on when over the marker (boolean)
                        struct over_middle_marker
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/over_middle_marker"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Over the marker, 0 or 1.  This stays on when over the marker (boolean)
                        struct over_outer_marker
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/over_outer_marker"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Transponder light brightness ratio from 0 to 1 (ratio)
                        struct transponder_brightness
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/transponder_brightness"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Whether we are squawking ident right now. (bool)
                        struct transponder_id
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/radios/indicators/transponder_id"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                    }

                }

                //! switches datarefs
                namespace switches
                {
                    //! Switch, 0 or 1. (boolean)
                    struct HSI_is_arc
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/HSI_is_arc"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Rheostat controlling HUD brightness. (ratio)
                    struct HUD_brightness_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/HUD_brightness_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct HUD_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/HUD_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Alternate static air ratio, 0.0 is off, 1,.0 is on. (ratio)
                    struct alternate_static_air_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/alternate_static_air_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct artificial_stability_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/artificial_stability_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct artificial_stability_pitch_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/artificial_stability_pitch_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct artificial_stability_roll_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/artificial_stability_roll_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 is RTO (Rejected Take-Off), 1 is off, 2->5 are increasing auto-brake levels. (enum)
                    struct auto_brake_level
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/auto_brake_level"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct auto_reverse_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/auto_reverse_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct avionics_power_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/avionics_power_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct beacon_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/beacon_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This can be 0 (half-power afterburners) or 1 (full-power burner). (enum)
                    struct burner_level
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/burner_level"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Camera power on (boolean)
                    struct camera_power_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/camera_power_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct canopy_open
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/canopy_open"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1 - engage/disengage rotor clutch (boolean)
                    struct clutch_engage
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/clutch_engage"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Current clutch ratio, 0.0 is off, 1.0 is on - follows clutch engage with some lag. (ratio)
                    struct clutch_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/clutch_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! custom sliders.  When flipped, slider moves based on timing in planemaker. (boolean)
                    struct custom_slider_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/custom_slider_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 24;
                    };

                    //! Switch, 0 or 1. 0 is closed, 1 is open (boolean)
                    struct door_open
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/door_open"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct dump_fuel
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/dump_fuel"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This will be set to true when water is in the process of dumping out of a water-bomber. (boolean)
                    struct dump_water
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/dump_water"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct electric_hydraulic_pump_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/electric_hydraulic_pump_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fasten Seat Belts (boolean)
                    struct fasten_seat_belts
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/fasten_seat_belts"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 is off, 0.5 is half-intensity, etc. for any of the generic lights.  Was [64] until 11.10 (ratio)
                    struct generic_lights_switch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/generic_lights_switch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 128;
                    };

                    //! Rheostat controlling instruments brightnesss.  0 = default pilot, 1 = default copilot, 2-15 = custom - was [16] until 11.10 (ratio)
                    struct instrument_brightness_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/instrument_brightness_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct jato_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/jato_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. fan=0, off=1, turbine=2#WHAT ARE THESE? (enum)
                    struct jet_sync_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/jet_sync_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1.  This affects the first landing light. (boolean)
                    struct landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 is off, 0.5 is half-intensity, etc. for any of the landing lights. (ratio)
                    struct landing_lights_switch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/landing_lights_switch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 16;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct navigation_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/navigation_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! No Smoking (boolean)
                    struct no_smoking
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/no_smoking"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Rheostat controlling panel brightness.  0 = flood, 1-3 = spot lights. (ratio)
                    struct panel_brightness_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/panel_brightness_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 4;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct parachute_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/parachute_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct pre_rotate_level
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/pre_rotate_level"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct prop_feather_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/prop_feather_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct prop_sync_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/prop_sync_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct puffers_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/puffers_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct ram_air_turbine_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/ram_air_turbine_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This will have an enumeration based on the direction of fire of any maneuvering rockets. (enum)
                    struct rocket_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/rocket_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1 - turns on the rotor brake. (boolean)
                    struct rotor_brake
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/rotor_brake"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the relative strength of the rotor brake compared to X-Plane default. (ratio)
                    struct rotor_brake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/rotor_brake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct spot_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/spot_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct standby_vacuum_pump
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/standby_vacuum_pump"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct tailhook_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/tailhook_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct total_energy_audio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/total_energy_audio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Variometer audio on (boolean)
                    struct total_energy_audio_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/total_energy_audio_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct water_scoop_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/water_scoop_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 0=off,1=25%speed,2=50%speed,3=100%speed. (enum)
                    struct wiper_speed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/wiper_speed"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Switch, 0 or 1. (boolean)
                    struct yaw_damper_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/switches/yaw_damper_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! tcas datarefs
                namespace tcas
                {
                    //! indicators datarefs
                    namespace indicators
                    {
                        //! Relative altitude (positive means above us) for TCAS (meters)
                        struct relative_altitude_mtrs
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/tcas/indicators/relative_altitude_mtrs"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 20;
                        };

                        //! Relative bearing of each other plane in degrees for TCAS (degrees)
                        struct relative_bearing_degs
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/tcas/indicators/relative_bearing_degs"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 20;
                        };

                        //! Distance to each other plane in meters for TCAS (meters)
                        struct relative_distance_mtrs
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/tcas/indicators/relative_distance_mtrs"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 20;
                        };

                        //! True if a TCAS alert is currently issued. (boolean)
                        struct tcas_alert
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/tcas/indicators/tcas_alert"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                    }

                }

                //! temperature datarefs
                namespace temperature
                {
                    //! outside air temperature with leading edge, pilot selects units (degrees)
                    struct outside_air_LE_temp_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/temperature/outside_air_LE_temp_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! outside air temperature with leading edge, celsius (degreesC)
                    struct outside_air_LE_temp_degc
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/temperature/outside_air_LE_temp_degc"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! outside air temperature with leading edge, fahrenheit (degreesF)
                    struct outside_air_LE_temp_degf
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/temperature/outside_air_LE_temp_degf"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! outside air temperature, pilot selects units (degrees)
                    struct outside_air_temp_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/temperature/outside_air_temp_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! outside air temperature, celsius (degreesC)
                    struct outside_air_temp_degc
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/temperature/outside_air_temp_degc"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! outside air temperature, fahrenheit (degreesF)
                    struct outside_air_temp_degf
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/temperature/outside_air_temp_degf"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 1 if thermo is metric, 0 if fahrenheit. (boolean)
                    struct outside_air_temp_is_metric
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/temperature/outside_air_temp_is_metric"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! transmissions datarefs
                namespace transmissions
                {
                    //! indicators datarefs
                    namespace indicators
                    {
                        //! Transmission oil pressure.  Units are the same as the max oil pressure in ACF file. (any)
                        struct oil_pressure
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/transmissions/indicators/oil_pressure"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Transmission oil temperature.  Units are the same as the max oil temperature in ACF file. (any)
                        struct oil_temperature
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/cockpit2/transmissions/indicators/oil_temperature"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                    }

                }

                //! weapons datarefs
                namespace weapons
                {
                    //! Weapon fire-mode, 0=single, 1=pair, 2=ripple, 3=salvo. (enum)
                    struct fire_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/weapons/fire_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Weapon fire-rate, 0, 1, 2, 3 depending on fire rate. (enum)
                    struct fire_rate
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/weapons/fire_rate"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Heading offset of the gun from within its maximum heading range (ratio)
                    struct gun_offset_heading_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/weapons/gun_offset_heading_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Pitch offset of the gun from within its maximum pitch range (ratio)
                    struct gun_offset_pitch_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/weapons/gun_offset_pitch_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! (V10 style!) Weapon index selected on the weapon console. (index)
                    struct weapon_select_console_index
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/weapons/weapon_select_console_index"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Undocumented dataref
                    struct weapon_select_console_name
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/weapons/weapon_select_console_name"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 1024;
                    };

                    //! Switch position for each weapon-arming switch (there can be several). These are the rotaries that can be dialed up or down to select various systems. (enum)
                    struct weapon_selected
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/cockpit2/weapons/weapon_selected"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

            }

            //! flightmodel datarefs
            namespace flightmodel
            {
                //! controls datarefs
                namespace controls
                {
                    //! [WING] Deflection Aileron 1 (degrees)
                    struct ail1_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/ail1_def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! [WING] Deflection Aileron 2 (degrees)
                    struct ail2_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/ail2_def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! Current Aileron Trim, -1 = max left, 1 = max right ([-1..1])
                    struct ail_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/ail_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! canopy deployment ratio, 0 is down 1 is up (ratio)
                    struct canopy_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/canopy_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Actual dihedral ([0..1])
                    struct dihed_rat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/dihed_rat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Requested dihedral ([0..1])
                    struct dihed_rqst
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/dihed_rqst"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Distance Traveled (meters)
                    struct dist
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/dist"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! [WING] Deflection Elevators (degrees)
                    struct elv1_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/elv1_def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! [WING] Deflection Elevators (degrees)
                    struct elv2_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/elv2_def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! Elevation Trim, -1 = max nose down, 1 = max nose up ([-1..1])
                    struct elv_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/elv_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! [WING] Deflection Flaps (degrees)
                    struct fla1_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/fla1_def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! [WING] Deflection Flaps (degrees)
                    struct fla2_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/fla2_def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! Actual flap 2 deployment ratio ([0..1])
                    struct flap2rat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/flap2rat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Actual flap 1 deployment ratio ([0..1])
                    struct flaprat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/flaprat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Requested flap deployment, 0 = off, 1 = max ([0..1])
                    struct flaprqst
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/flaprqst"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Elevator 1 (degrees)
                    struct hstab1_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/hstab1_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Elevator 2 (degrees)
                    struct hstab1_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/hstab1_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Horiz Stab Left Retract (boolean)
                    struct hstab1_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/hstab1_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Horiz Stab Left Retract Max (ratio)
                    struct hstab1_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/hstab1_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Horiz Stab Left Retract Now (ratio)
                    struct hstab1_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/hstab1_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Elevator 1 (degrees)
                    struct hstab2_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/hstab2_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Elevator 2 (degrees)
                    struct hstab2_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/hstab2_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Horiz Stab Right Retract (boolean)
                    struct hstab2_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/hstab2_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Horiz Stab Right Retract Max (ratio)
                    struct hstab2_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/hstab2_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Horiz Stab Right Retract Now (ratio)
                    struct hstab2_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/hstab2_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Actual incidence ([0..1])
                    struct incid_rat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/incid_rat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Requested incidence ([0..1])
                    struct incid_rqst
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/incid_rqst"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Left Brake - additional braking force ( ([0..1])
                    struct l_brake_add
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/l_brake_add"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Left Aileron 1 (degrees)
                    struct lail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/lail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Left Aileron 2 (degrees)
                    struct lail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/lail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Left Rudder (degrees)
                    struct ldruddef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/ldruddef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Left Spoiler (degrees)
                    struct lsplrdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/lsplrdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 1 Aileron 1 (degrees)
                    struct mwing01_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing01_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 1 Aileron 2 (degrees)
                    struct mwing01_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing01_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 1 Elevator 1 (degrees)
                    struct mwing01_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing01_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 1 Elevator 2 (degrees)
                    struct mwing01_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing01_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 1 Flap 1 (degrees)
                    struct mwing01_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing01_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 1 Flap 2 (degrees)
                    struct mwing01_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing01_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 1 Retract (boolean)
                    struct mwing01_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing01_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 1 Retract Max (ratio)
                    struct mwing01_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing01_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 1 Retract Now (ratio)
                    struct mwing01_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing01_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 1 Rudder 1 (degrees)
                    struct mwing01_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing01_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 1 Rudder 2 (degrees)
                    struct mwing01_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing01_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 1 Spoiler 1 (degrees)
                    struct mwing01_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing01_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 1 Spoiler 2 (degrees)
                    struct mwing01_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing01_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 1 Yaw Brake (degrees)
                    struct mwing01_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing01_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 2 Aileron 1 (degrees)
                    struct mwing02_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing02_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 2 Aileron 2 (degrees)
                    struct mwing02_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing02_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 2 Elevator 1 (degrees)
                    struct mwing02_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing02_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 2 Elevator 2 (degrees)
                    struct mwing02_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing02_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 2 Flap 1 (degrees)
                    struct mwing02_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing02_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 2 Flap 2 (degrees)
                    struct mwing02_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing02_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 2 Retract (boolean)
                    struct mwing02_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing02_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 2 Retract Max (ratio)
                    struct mwing02_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing02_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 2 Retract Now (ratio)
                    struct mwing02_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing02_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 2 Rudder 1 (degrees)
                    struct mwing02_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing02_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 2 Rudder 2 (degrees)
                    struct mwing02_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing02_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 2 Spoiler 1 (degrees)
                    struct mwing02_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing02_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 2 Spoiler 2 (degrees)
                    struct mwing02_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing02_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 2 Yaw Brake (degrees)
                    struct mwing02_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing02_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 3 Aileron 1 (degrees)
                    struct mwing03_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing03_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 3 Aileron 2 (degrees)
                    struct mwing03_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing03_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 3 Elevator 1 (degrees)
                    struct mwing03_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing03_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 3 Elevator 2 (degrees)
                    struct mwing03_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing03_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 3 Flap 1 (degrees)
                    struct mwing03_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing03_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 3 Flap 2 (degrees)
                    struct mwing03_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing03_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 3 Retract (boolean)
                    struct mwing03_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing03_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 3 Retract Max (ratio)
                    struct mwing03_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing03_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 3 Retract Now (ratio)
                    struct mwing03_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing03_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 3 Rudder 1 (degrees)
                    struct mwing03_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing03_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 3 Rudder 2 (degrees)
                    struct mwing03_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing03_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 3 Spoiler 1 (degrees)
                    struct mwing03_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing03_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 3 Spoiler 2 (degrees)
                    struct mwing03_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing03_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 3 Yaw Brake (degrees)
                    struct mwing03_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing03_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 4 Aileron 1 (degrees)
                    struct mwing04_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing04_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 4 Aileron 2 (degrees)
                    struct mwing04_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing04_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 4 Elevator 1 (degrees)
                    struct mwing04_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing04_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 4 Elevator 2 (degrees)
                    struct mwing04_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing04_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 4 Flap 1 (degrees)
                    struct mwing04_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing04_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 4 Flap 2 (degrees)
                    struct mwing04_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing04_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 4 Retract (boolean)
                    struct mwing04_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing04_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 4 Retract Max (ratio)
                    struct mwing04_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing04_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 4 Retract Now (ratio)
                    struct mwing04_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing04_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 4 Rudder 1 (degrees)
                    struct mwing04_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing04_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 4 Rudder 2 (degrees)
                    struct mwing04_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing04_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 4 Spoiler 1 (degrees)
                    struct mwing04_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing04_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 4 Spoiler 2 (degrees)
                    struct mwing04_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing04_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 4 Yaw Brake (degrees)
                    struct mwing04_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing04_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 5 Aileron 1 (degrees)
                    struct mwing05_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing05_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 5 Aileron 2 (degrees)
                    struct mwing05_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing05_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 5 Elevator 1 (degrees)
                    struct mwing05_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing05_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 5 Elevator 2 (degrees)
                    struct mwing05_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing05_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 5 Flap 1 (degrees)
                    struct mwing05_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing05_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 5 Flap 2 (degrees)
                    struct mwing05_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing05_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 5 Retract (boolean)
                    struct mwing05_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing05_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 5 Retract Max (ratio)
                    struct mwing05_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing05_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 5 Retract Now (ratio)
                    struct mwing05_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing05_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 5 Rudder 1 (degrees)
                    struct mwing05_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing05_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 5 Rudder 2 (degrees)
                    struct mwing05_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing05_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 5 Spoiler 1 (degrees)
                    struct mwing05_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing05_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 5 Spoiler 2 (degrees)
                    struct mwing05_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing05_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 5 Yaw Brake (degrees)
                    struct mwing05_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing05_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 6 Aileron 1 (degrees)
                    struct mwing06_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing06_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 6 Aileron 2 (degrees)
                    struct mwing06_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing06_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 6 Elevator 1 (degrees)
                    struct mwing06_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing06_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 6 Elevator 2 (degrees)
                    struct mwing06_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing06_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 6 Flap 1 (degrees)
                    struct mwing06_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing06_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 6 Flap 2 (degrees)
                    struct mwing06_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing06_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 6 Retract (boolean)
                    struct mwing06_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing06_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 6 Retract Max (ratio)
                    struct mwing06_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing06_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 6 Retract Now (ratio)
                    struct mwing06_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing06_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 6 Rudder 1 (degrees)
                    struct mwing06_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing06_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 6 Rudder 2 (degrees)
                    struct mwing06_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing06_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 6 Spoiler 1 (degrees)
                    struct mwing06_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing06_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 6 Spoiler 2 (degrees)
                    struct mwing06_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing06_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 6 Yaw Brake (degrees)
                    struct mwing06_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing06_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 7 Aileron 1 (degrees)
                    struct mwing07_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing07_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 7 Aileron 2 (degrees)
                    struct mwing07_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing07_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 7 Elevator 1 (degrees)
                    struct mwing07_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing07_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 7 Elevator 2 (degrees)
                    struct mwing07_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing07_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 7 Flap 1 (degrees)
                    struct mwing07_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing07_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 7 Flap 2 (degrees)
                    struct mwing07_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing07_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 7 Retract (boolean)
                    struct mwing07_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing07_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 7 Retract Max (ratio)
                    struct mwing07_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing07_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 7 Retract Now (ratio)
                    struct mwing07_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing07_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 7 Rudder 1 (degrees)
                    struct mwing07_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing07_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 7 Rudder 2 (degrees)
                    struct mwing07_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing07_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 7 Spoiler 1 (degrees)
                    struct mwing07_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing07_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 7 Spoiler 2 (degrees)
                    struct mwing07_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing07_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 7 Yaw Brake (degrees)
                    struct mwing07_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing07_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 8 Aileron 1 (degrees)
                    struct mwing08_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing08_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 8 Aileron 2 (degrees)
                    struct mwing08_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing08_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 8 Elevator 1 (degrees)
                    struct mwing08_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing08_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 8 Elevator 2 (degrees)
                    struct mwing08_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing08_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 8 Flap 1 (degrees)
                    struct mwing08_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing08_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 8 Flap 2 (degrees)
                    struct mwing08_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing08_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 8 Retract (boolean)
                    struct mwing08_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing08_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 8 Retract Max (ratio)
                    struct mwing08_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing08_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 8 Retract Now (ratio)
                    struct mwing08_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing08_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 8 Rudder 1 (degrees)
                    struct mwing08_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing08_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 8 Rudder 2 (degrees)
                    struct mwing08_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing08_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 8 Spoiler 1 (degrees)
                    struct mwing08_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing08_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 8 Spoiler 2 (degrees)
                    struct mwing08_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing08_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 8 Yaw Brake (degrees)
                    struct mwing08_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing08_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 9 Aileron 1 (degrees)
                    struct mwing09_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing09_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 9 Aileron 2 (degrees)
                    struct mwing09_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing09_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 9 Elevator 1 (degrees)
                    struct mwing09_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing09_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 9 Elevator 2 (degrees)
                    struct mwing09_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing09_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 9 Flap 1 (degrees)
                    struct mwing09_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing09_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 9 Flap 2 (degrees)
                    struct mwing09_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing09_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 9 Retract (boolean)
                    struct mwing09_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing09_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 9 Retract Max (ratio)
                    struct mwing09_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing09_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 9 Retract Now (ratio)
                    struct mwing09_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing09_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 9 Rudder 1 (degrees)
                    struct mwing09_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing09_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 9 Rudder 2 (degrees)
                    struct mwing09_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing09_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 9 Spoiler 1 (degrees)
                    struct mwing09_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing09_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 9 Spoiler 2 (degrees)
                    struct mwing09_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing09_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 9 Yaw Brake (degrees)
                    struct mwing09_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing09_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 10 Aileron 1 (degrees)
                    struct mwing10_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing10_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 10 Aileron 2 (degrees)
                    struct mwing10_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing10_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 10 Elevator 1 (degrees)
                    struct mwing10_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing10_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 10 Elevator 2 (degrees)
                    struct mwing10_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing10_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 10 Flap 1 (degrees)
                    struct mwing10_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing10_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 10 Flap 2 (degrees)
                    struct mwing10_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing10_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 10 Retract (boolean)
                    struct mwing10_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing10_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 10 Retract Max (ratio)
                    struct mwing10_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing10_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 10 Retract Now (ratio)
                    struct mwing10_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing10_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 10 Rudder 1 (degrees)
                    struct mwing10_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing10_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 10 Rudder 2 (degrees)
                    struct mwing10_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing10_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 10 Spoiler 1 (degrees)
                    struct mwing10_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing10_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 10 Spoiler 2 (degrees)
                    struct mwing10_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing10_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 10 Yaw Brake (degrees)
                    struct mwing10_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing10_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 11 Aileron 1 (degrees)
                    struct mwing11_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing11_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 11 Aileron 2 (degrees)
                    struct mwing11_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing11_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 11 Elevator 1 (degrees)
                    struct mwing11_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing11_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 11 Elevator 2 (degrees)
                    struct mwing11_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing11_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 11 Flap 1 (degrees)
                    struct mwing11_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing11_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 11 Flap 2 (degrees)
                    struct mwing11_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing11_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 11 Retract (boolean)
                    struct mwing11_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing11_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 11 Retract Max (ratio)
                    struct mwing11_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing11_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 11 Retract Now (ratio)
                    struct mwing11_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing11_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 11 Rudder 1 (degrees)
                    struct mwing11_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing11_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 11 Rudder 2 (degrees)
                    struct mwing11_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing11_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 11 Spoiler 1 (degrees)
                    struct mwing11_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing11_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 11 Spoiler 2 (degrees)
                    struct mwing11_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing11_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 11 Yaw Brake (degrees)
                    struct mwing11_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing11_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 12 Aileron 1 (degrees)
                    struct mwing12_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing12_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 12 Aileron 2 (degrees)
                    struct mwing12_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing12_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 12 Elevator 1 (degrees)
                    struct mwing12_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing12_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 12 Elevator 2 (degrees)
                    struct mwing12_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing12_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 12 Flap 1 (degrees)
                    struct mwing12_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing12_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 12 Flap 2 (degrees)
                    struct mwing12_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing12_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 12 Retract (boolean)
                    struct mwing12_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing12_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 12 Retract Max (ratio)
                    struct mwing12_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing12_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 12 Retract Now (ratio)
                    struct mwing12_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing12_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 12 Rudder 1 (degrees)
                    struct mwing12_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing12_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 12 Rudder 2 (degrees)
                    struct mwing12_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing12_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 12 Spoiler 1 (degrees)
                    struct mwing12_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing12_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 12 Spoiler 2 (degrees)
                    struct mwing12_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing12_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 12 Yaw Brake (degrees)
                    struct mwing12_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing12_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 13 Aileron 1 (degrees)
                    struct mwing13_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing13_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 13 Aileron 2 (degrees)
                    struct mwing13_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing13_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 13 Elevator 1 (degrees)
                    struct mwing13_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing13_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 13 Elevator 2 (degrees)
                    struct mwing13_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing13_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 13 Flap 1 (degrees)
                    struct mwing13_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing13_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 13 Flap 2 (degrees)
                    struct mwing13_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing13_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 13 Retract (boolean)
                    struct mwing13_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing13_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 13 Retract Max (ratio)
                    struct mwing13_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing13_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 13 Retract Now (ratio)
                    struct mwing13_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing13_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 13 Rudder 1 (degrees)
                    struct mwing13_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing13_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 13 Rudder 2 (degrees)
                    struct mwing13_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing13_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 13 Spoiler 1 (degrees)
                    struct mwing13_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing13_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 13 Spoiler 2 (degrees)
                    struct mwing13_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing13_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 13 Yaw Brake (degrees)
                    struct mwing13_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing13_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 14 Aileron 1 (degrees)
                    struct mwing14_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing14_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 14 Aileron 2 (degrees)
                    struct mwing14_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing14_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 14 Elevator 1 (degrees)
                    struct mwing14_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing14_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 14 Elevator 2 (degrees)
                    struct mwing14_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing14_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 14 Flap 1 (degrees)
                    struct mwing14_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing14_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 14 Flap 2 (degrees)
                    struct mwing14_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing14_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 14 Retract (boolean)
                    struct mwing14_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing14_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 14 Retract Max (ratio)
                    struct mwing14_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing14_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 14 Retract Now (ratio)
                    struct mwing14_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing14_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 14 Rudder 1 (degrees)
                    struct mwing14_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing14_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 14 Rudder 2 (degrees)
                    struct mwing14_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing14_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 14 Spoiler 1 (degrees)
                    struct mwing14_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing14_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 14 Spoiler 2 (degrees)
                    struct mwing14_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing14_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 14 Yaw Brake (degrees)
                    struct mwing14_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing14_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 15 Aileron 1 (degrees)
                    struct mwing15_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing15_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 15 Aileron 2 (degrees)
                    struct mwing15_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing15_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 15 Elevator 1 (degrees)
                    struct mwing15_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing15_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 15 Elevator 2 (degrees)
                    struct mwing15_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing15_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 15 Flap 1 (degrees)
                    struct mwing15_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing15_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 15 Flap 2 (degrees)
                    struct mwing15_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing15_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 15 Retract (boolean)
                    struct mwing15_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing15_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 15 Retract Max (ratio)
                    struct mwing15_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing15_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 15 Retract Now (ratio)
                    struct mwing15_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing15_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 15 Rudder 1 (degrees)
                    struct mwing15_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing15_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 15 Rudder 2 (degrees)
                    struct mwing15_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing15_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 15 Spoiler 1 (degrees)
                    struct mwing15_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing15_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 15 Spoiler 2 (degrees)
                    struct mwing15_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing15_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 15 Yaw Brake (degrees)
                    struct mwing15_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing15_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 16 Aileron 1 (degrees)
                    struct mwing16_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing16_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 16 Aileron 2 (degrees)
                    struct mwing16_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing16_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 16 Elevator 1 (degrees)
                    struct mwing16_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing16_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 16 Elevator 2 (degrees)
                    struct mwing16_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing16_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 16 Flap 1 (degrees)
                    struct mwing16_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing16_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 16 Flap 2 (degrees)
                    struct mwing16_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing16_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 16 Retract (boolean)
                    struct mwing16_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing16_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 16 Retract Max (ratio)
                    struct mwing16_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing16_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 16 Retract Now (ratio)
                    struct mwing16_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing16_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 16 Rudder 1 (degrees)
                    struct mwing16_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing16_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 16 Rudder 2 (degrees)
                    struct mwing16_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing16_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 16 Spoiler 1 (degrees)
                    struct mwing16_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing16_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 16 Spoiler 2 (degrees)
                    struct mwing16_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing16_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 16 Yaw Brake (degrees)
                    struct mwing16_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing16_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 17 Aileron 1 (degrees)
                    struct mwing17_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing17_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 17 Aileron 2 (degrees)
                    struct mwing17_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing17_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 17 Elevator 1 (degrees)
                    struct mwing17_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing17_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 17 Elevator 2 (degrees)
                    struct mwing17_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing17_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 17 Flap 1 (degrees)
                    struct mwing17_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing17_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 17 Flap 2 (degrees)
                    struct mwing17_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing17_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 17 Retract (boolean)
                    struct mwing17_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing17_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 17 Retract Max (ratio)
                    struct mwing17_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing17_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 17 Retract Now (ratio)
                    struct mwing17_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing17_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 17 Rudder 1 (degrees)
                    struct mwing17_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing17_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 17 Rudder 2 (degrees)
                    struct mwing17_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing17_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 17 Spoiler 1 (degrees)
                    struct mwing17_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing17_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 17 Spoiler 2 (degrees)
                    struct mwing17_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing17_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 17 Yaw Brake (degrees)
                    struct mwing17_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing17_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 18 Aileron 1 (degrees)
                    struct mwing18_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing18_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 18 Aileron 2 (degrees)
                    struct mwing18_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing18_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 18 Elevator 1 (degrees)
                    struct mwing18_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing18_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 18 Elevator 2 (degrees)
                    struct mwing18_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing18_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 18 Flap 1 (degrees)
                    struct mwing18_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing18_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 18 Flap 2 (degrees)
                    struct mwing18_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing18_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 18 Retract (boolean)
                    struct mwing18_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing18_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 18 Retract Max (ratio)
                    struct mwing18_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing18_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 18 Retract Now (ratio)
                    struct mwing18_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing18_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 18 Rudder 1 (degrees)
                    struct mwing18_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing18_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 18 Rudder 2 (degrees)
                    struct mwing18_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing18_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 18 Spoiler 1 (degrees)
                    struct mwing18_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing18_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 18 Spoiler 2 (degrees)
                    struct mwing18_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing18_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 18 Yaw Brake (degrees)
                    struct mwing18_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing18_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 19 Aileron 1 (degrees)
                    struct mwing19_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing19_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 19 Aileron 2 (degrees)
                    struct mwing19_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing19_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 19 Elevator 1 (degrees)
                    struct mwing19_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing19_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 19 Elevator 2 (degrees)
                    struct mwing19_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing19_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 19 Flap 1 (degrees)
                    struct mwing19_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing19_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 19 Flap 2 (degrees)
                    struct mwing19_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing19_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 19 Retract (boolean)
                    struct mwing19_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing19_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 19 Retract Max (ratio)
                    struct mwing19_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing19_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 19 Retract Now (ratio)
                    struct mwing19_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing19_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 19 Rudder 1 (degrees)
                    struct mwing19_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing19_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 19 Rudder 2 (degrees)
                    struct mwing19_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing19_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 19 Spoiler 1 (degrees)
                    struct mwing19_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing19_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 19 Spoiler 2 (degrees)
                    struct mwing19_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing19_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 19 Yaw Brake (degrees)
                    struct mwing19_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing19_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 20 Aileron 1 (degrees)
                    struct mwing20_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing20_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 20 Aileron 2 (degrees)
                    struct mwing20_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing20_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 20 Elevator 1 (degrees)
                    struct mwing20_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing20_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 20 Elevator 2 (degrees)
                    struct mwing20_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing20_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 20 Flap 1 (degrees)
                    struct mwing20_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing20_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 20 Flap 2 (degrees)
                    struct mwing20_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing20_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 20 Retract (boolean)
                    struct mwing20_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing20_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 20 Retract Max (ratio)
                    struct mwing20_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing20_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc Wing 20 Retract Now (ratio)
                    struct mwing20_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing20_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 20 Rudder 1 (degrees)
                    struct mwing20_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing20_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 20 Rudder 2 (degrees)
                    struct mwing20_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing20_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 20 Spoiler 1 (degrees)
                    struct mwing20_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing20_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 20 Spoiler 2 (degrees)
                    struct mwing20_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing20_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Misc Wing 20 Yaw Brake (degrees)
                    struct mwing20_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/mwing20_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Parking Brake, 1 = max ([0..1])
                    struct parkbrake
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/parkbrake"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Right Brake ([0..1])
                    struct r_brake_add
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/r_brake_add"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Right Aileron 1 (degrees)
                    struct rail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/rail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Right Aileron 2 (degrees)
                    struct rail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/rail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Right Rudder (degrees)
                    struct rdruddef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/rdruddef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Rotor Trim ([-1..1])
                    struct rot_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/rot_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Right Spoiler (degrees)
                    struct rsplrdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/rsplrdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Rudder Trim, -1 = max left, 1 = max right ([-1..1])
                    struct rud_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/rud_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! [WING] Deflection Rudders (degrees)
                    struct rudd2_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/rudd2_def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! [WING] Deflection Rudders (degrees)
                    struct rudd_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/rudd_def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! Actual speed brake deployment [0..1 = schedule for in-air, 1..1.5 = extra deployment when on ground] ([0..1.5])
                    struct sbrkrat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/sbrkrat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Speed Brake, -0.5 = armed, 0 = off, 1 = max deployment ([-0.5..1])
                    struct sbrkrqst
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/sbrkrqst"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Actual slat deployment ratio ([0..1])
                    struct slatrat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/slatrat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! [WING] Deflection Spoilers 2 (degrees)
                    struct splr2_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/splr2_def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! [WING] Deflection Spoilers (degrees)
                    struct splr_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/splr_def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! Actual wing sweep ratio ([0..1])
                    struct swdi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/swdi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Requested sweep ratio ([0..1])
                    struct swdirqst
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/swdirqst"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is how locked the tail-wheel is ... 0 is free castoring, 1 is locked. (ratio)
                    struct tail_lock_rat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/tail_lock_rat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! tailhook deployment ratio, 0 is up 1 is down (ratio)
                    struct tailhook_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/tailhook_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Actual thrust vector ([0..1])
                    struct vect_rat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/vect_rat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Requested thrust vector ([0..1])
                    struct vectrqst
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/vectrqst"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vert Stab 1 Retract (boolean)
                    struct vstab1_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/vstab1_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vert Stab 1 Retract Max (ratio)
                    struct vstab1_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/vstab1_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vert Stab 1 Retract Now (ratio)
                    struct vstab1_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/vstab1_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Rudder 1 (degrees)
                    struct vstab1_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/vstab1_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Rudder 2 (degrees)
                    struct vstab1_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/vstab1_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vert Stab 2 Retract (boolean)
                    struct vstab2_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/vstab2_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vert Stab 2 Retract Max (ratio)
                    struct vstab2_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/vstab2_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vert Stab 2 Retract Now (ratio)
                    struct vstab2_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/vstab2_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Rudder 1 (degrees)
                    struct vstab2_rud1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/vstab2_rud1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Rudder 2 (degrees)
                    struct vstab2_rud2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/vstab2_rud2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Left Aileron 1 (degrees)
                    struct wing1l_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1l_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Left Aileron 2 (degrees)
                    struct wing1l_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1l_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Left Elevator 1 (degrees)
                    struct wing1l_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1l_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Left Elevator 2 (degrees)
                    struct wing1l_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1l_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Left Flap 1 (degrees)
                    struct wing1l_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1l_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Left Flap 2 (degrees)
                    struct wing1l_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1l_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 1 Left Retract (boolean)
                    struct wing1l_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1l_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 1 Left Retract Max (ratio)
                    struct wing1l_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1l_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 1 Left Retract Now (ratio)
                    struct wing1l_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1l_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Left Spoiler 1 (degrees)
                    struct wing1l_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1l_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Left Spoiler 2 (degrees)
                    struct wing1l_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1l_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Left Yaw Brake (degrees)
                    struct wing1l_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1l_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Right Aileron 1 (degrees)
                    struct wing1r_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1r_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Right Aileron 2 (degrees)
                    struct wing1r_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1r_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Right Elevator 1 (degrees)
                    struct wing1r_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1r_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Right Elevator 2 (degrees)
                    struct wing1r_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1r_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Right Flap 1 (degrees)
                    struct wing1r_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1r_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Right Flap 2 (degrees)
                    struct wing1r_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1r_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 1 Right Retract (boolean)
                    struct wing1r_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1r_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 1 Right Retract Max (ratio)
                    struct wing1r_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1r_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 1 Right Retract Now (ratio)
                    struct wing1r_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1r_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Right Spoiler 1 (degrees)
                    struct wing1r_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1r_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Right Spoiler 2 (degrees)
                    struct wing1r_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1r_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 1 Right Yaw Brake (degrees)
                    struct wing1r_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing1r_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Left Aileron 1 (degrees)
                    struct wing2l_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2l_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Left Aileron 2 (degrees)
                    struct wing2l_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2l_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Left Elevator 1 (degrees)
                    struct wing2l_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2l_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Left Elevator 2 (degrees)
                    struct wing2l_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2l_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Left Flap 1 (degrees)
                    struct wing2l_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2l_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Left Flap 2 (degrees)
                    struct wing2l_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2l_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 2 Left Retract (boolean)
                    struct wing2l_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2l_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 2 Left Retract Max (ratio)
                    struct wing2l_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2l_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 2 Left Retract Now (ratio)
                    struct wing2l_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2l_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Left Spoiler 1 (degrees)
                    struct wing2l_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2l_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Left Spoiler 2 (degrees)
                    struct wing2l_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2l_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Left Yaw Brake (degrees)
                    struct wing2l_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2l_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Right Aileron 1 (degrees)
                    struct wing2r_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2r_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Right Aileron 2 (degrees)
                    struct wing2r_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2r_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Right Elevator 1 (degrees)
                    struct wing2r_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2r_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Right Elevator 2 (degrees)
                    struct wing2r_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2r_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Right Flap 1 (degrees)
                    struct wing2r_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2r_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Right Flap 2 (degrees)
                    struct wing2r_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2r_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 2 Right Retract (boolean)
                    struct wing2r_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2r_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 2 Right Retract Max (ratio)
                    struct wing2r_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2r_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 2 Right Retract Now (ratio)
                    struct wing2r_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2r_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Right Spoiler 1 (degrees)
                    struct wing2r_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2r_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Right Spoiler 2 (degrees)
                    struct wing2r_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2r_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 2 Right Yaw Brake (degrees)
                    struct wing2r_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing2r_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Left Aileron 1 (degrees)
                    struct wing3l_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3l_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Left Aileron 2 (degrees)
                    struct wing3l_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3l_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Left Elevator 1 (degrees)
                    struct wing3l_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3l_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Left Elevator 2 (degrees)
                    struct wing3l_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3l_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Left Flap 1 (degrees)
                    struct wing3l_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3l_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Left Flap 2 (degrees)
                    struct wing3l_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3l_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 3 Left Retract (boolean)
                    struct wing3l_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3l_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 3 Left Retract Max (ratio)
                    struct wing3l_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3l_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 3 Left Retract Now (ratio)
                    struct wing3l_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3l_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Left Spoiler 1 (degrees)
                    struct wing3l_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3l_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Left Spoiler 2 (degrees)
                    struct wing3l_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3l_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Left Yaw Brake (degrees)
                    struct wing3l_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3l_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Right Aileron 1 (degrees)
                    struct wing3r_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3r_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Right Aileron 2 (degrees)
                    struct wing3r_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3r_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Right Elevator 1 (degrees)
                    struct wing3r_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3r_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Right Elevator 2 (degrees)
                    struct wing3r_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3r_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Right Flap 1 (degrees)
                    struct wing3r_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3r_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Right Flap 2 (degrees)
                    struct wing3r_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3r_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 3 Right Retract (boolean)
                    struct wing3r_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3r_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 3 Right Retract Max (ratio)
                    struct wing3r_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3r_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 3 Right Retract Now (ratio)
                    struct wing3r_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3r_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Right Spoiler 1 (degrees)
                    struct wing3r_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3r_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Right Spoiler 2 (degrees)
                    struct wing3r_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3r_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 3 Right Yaw Brake (degrees)
                    struct wing3r_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing3r_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Left Aileron 1 (degrees)
                    struct wing4l_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4l_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Left Aileron 2 (degrees)
                    struct wing4l_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4l_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Left Elevator 1 (degrees)
                    struct wing4l_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4l_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Left Elevator 2 (degrees)
                    struct wing4l_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4l_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Left Flap 1 (degrees)
                    struct wing4l_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4l_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Left Flap 2 (degrees)
                    struct wing4l_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4l_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 4 Left Retract (boolean)
                    struct wing4l_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4l_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 4 Left Retract Max (ratio)
                    struct wing4l_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4l_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 4 Left Retract Now (ratio)
                    struct wing4l_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4l_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Left Spoiler 1 (degrees)
                    struct wing4l_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4l_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Left Spoiler 2 (degrees)
                    struct wing4l_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4l_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Left Yaw Brake (degrees)
                    struct wing4l_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4l_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Right Aileron 1 (degrees)
                    struct wing4r_ail1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4r_ail1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Right Aileron 2 (degrees)
                    struct wing4r_ail2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4r_ail2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Right Elevator 1 (degrees)
                    struct wing4r_elv1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4r_elv1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Right Elevator 2 (degrees)
                    struct wing4r_elv2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4r_elv2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Right Flap 1 (degrees)
                    struct wing4r_fla1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4r_fla1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Right Flap 2 (degrees)
                    struct wing4r_fla2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4r_fla2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 4 Right Retract (boolean)
                    struct wing4r_retract
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4r_retract"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 4 Right Retract Max (ratio)
                    struct wing4r_retract_max
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4r_retract_max"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing 4 Right Retract Now (ratio)
                    struct wing4r_retract_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4r_retract_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Right Spoiler 1 (degrees)
                    struct wing4r_spo1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4r_spo1def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Right Spoiler 2 (degrees)
                    struct wing4r_spo2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4r_spo2def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deflection Wing 4 Right Yaw Brake (degrees)
                    struct wing4r_yawbdef
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/wing4r_yawbdef"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! [WING] (degrees)
                    struct yawb_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/controls/yawb_def"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                }

                //! cyclic datarefs
                namespace cyclic
                {
                    //! Blade alpha
                    struct cyclic_ailn_blad_alph
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/cyclic/cyclic_ailn_blad_alph"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ???
                    struct cyclic_ailn_command
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/cyclic/cyclic_ailn_command"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Disc tilt
                    struct cyclic_ailn_disc_tilt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/cyclic/cyclic_ailn_disc_tilt"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Blade alpha
                    struct cyclic_elev_blad_alph
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/cyclic/cyclic_elev_blad_alph"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ???
                    struct cyclic_elev_command
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/cyclic/cyclic_elev_command"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Disc tilt
                    struct cyclic_elev_disc_tilt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/cyclic/cyclic_elev_disc_tilt"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ???
                    struct sidecant
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/cyclic/sidecant"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ???
                    struct vertcant
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/cyclic/vertcant"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                }

                //! engine datarefs
                namespace engine
                {
                    //! Cylinder Head Temperature (ratio from min to max) (ratio)
                    struct ENGN_CHT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_CHT"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! CHT (per engine in degrees  - units depend on plane, label wrong (degc_or_f)
                    struct ENGN_CHT_c
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_CHT_c"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Exhaust Gas Temperature (ratio from min to max) (ratio)
                    struct ENGN_EGT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_EGT"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! EGT (per engine) in degrees  - units depend on plane, label wrong (degc_or_f)
                    struct ENGN_EGT_c
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_EGT_c"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Engine Pressure Ratio (per engine) (EPR)
                    struct ENGN_EPR
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_EPR"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Fuel flow (per engine) in kg/second (kg/s)
                    struct ENGN_FF_
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_FF_"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Interturbine Temperature per engine (ratio from min to max, min = 0, max = 700) (ratio)
                    struct ENGN_ITT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_ITT"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ITT (per engine) in degrees - units depend on plane, label wrong (degc_or_f)
                    struct ENGN_ITT_c
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_ITT_c"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! MPR (per engine)
                    struct ENGN_MPR
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_MPR"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! N1 speed as percent of max (per engine) (percent)
                    struct ENGN_N1_
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_N1_"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! N2 speed as percent of max (per engine) (percent)
                    struct ENGN_N2_
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_N2_"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Torque (per engine) (NewtonMeters)
                    struct ENGN_TRQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_TRQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Battery amps (per engine)
                    struct ENGN_bat_amp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_bat_amp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Batery volts (per engine)
                    struct ENGN_bat_volt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_bat_volt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Afterburner on (only reliable in 740 and later) (boolean)
                    struct ENGN_burning
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_burning"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ???
                    struct ENGN_burnrat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_burnrat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Cowl flaps control (per engine) 0 = closed, 1 = open (ratio)
                    struct ENGN_cowl
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_cowl"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Amount of carb ice buildup (0-1) (ratio)
                    struct ENGN_crbice
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_crbice"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Generator amps (per engine)
                    struct ENGN_gen_amp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_gen_amp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Carb Heat Control (per engine), 0 = off, 1 = on (ratio)
                    struct ENGN_heat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_heat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Mixture Control (per engine), 0 = cutoff, 1 = full rich (ratio)
                    struct ENGN_mixt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_mixt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ???
                    struct ENGN_oil_lube_rat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_oil_lube_rat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Oil temp (per engine) a ratio of max (ratio)
                    struct ENGN_oil_press
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_oil_press"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Oil pressure (per engine) in PSI (psi)
                    struct ENGN_oil_press_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_oil_press_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ???
                    struct ENGN_oil_quan
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_oil_quan"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Oil pressure (per engine) as ratio of max (ratio)
                    struct ENGN_oil_temp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_oil_temp"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Oil temp (per engine) in degs - units depend on plane, dref name wrong (degc_or_f)
                    struct ENGN_oil_temp_c
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_oil_temp_c"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Power (per engine)
                    struct ENGN_power
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_power"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Commanded Prop Speed (per engine) (rad/sec)
                    struct ENGN_prop
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_prop"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Prop mode: feather=0,normal=1,beta=2,reverse=3 (enum)
                    struct ENGN_propmode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_propmode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Engine on and using fuel (only reliable in 740 and later) (boolean)
                    struct ENGN_running
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_running"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Sigma (per engine) - YOU SHOULD NEVER WRITE TO THIS DATAREF!  Read only in v11.00
                    struct ENGN_sigma
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_sigma"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Engine speed in radians/second (rad/sec)
                    struct ENGN_tacrad
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_tacrad"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Throttle (per engine) as set by user, 0 = idle, 1 = max (ratio)
                    struct ENGN_thro
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_thro"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! An override from 0.0 to max fwd thrust for overriding all throttles.  Set to -2.0 to disengage.  DEPRECATED (ratio)
                    struct ENGN_thro_override
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_thro_override"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Throttle (per engine) when overridden by you, plus with thrust vectors - use override_throttles to change. (ratio)
                    struct ENGN_thro_use
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/ENGN_thro_use"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ???
                    struct POINT_XYZ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/POINT_XYZ"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ???
                    struct POINT_cone_rad
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/POINT_cone_rad"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ???
                    struct POINT_drag_TRQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/POINT_drag_TRQ"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Torque for this prop after transmissions (newton-meters)
                    struct POINT_driv_TRQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/POINT_driv_TRQ"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Maximum torque this prop will get after transmissions (newton-meters)
                    struct POINT_max_TRQ
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/POINT_max_TRQ"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Prop Pitch as commanded by the user. (degrees)
                    struct POINT_pitch_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/POINT_pitch_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Pitch as we use, after all effects.   Use override_prop_pitch to change. (degrees)
                    struct POINT_pitch_deg_use
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/POINT_pitch_deg_use"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! This is the angle of the prop or engine-fan as it rotates. You will see this value circulate 0 to 360 degrees over and over as the engine runs and the prop or fan turns.  Override with /prop_disc/override per engine! (degrees)
                    struct POINT_prop_ang_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/POINT_prop_ang_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Efficiency
                    struct POINT_prop_eff
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/POINT_prop_eff"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ???
                    struct POINT_side_wash
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/POINT_side_wash"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Prop speed in radians/second (rad/sec)
                    struct POINT_tacrad
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/POINT_tacrad"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Thrust
                    struct POINT_thrust
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/POINT_thrust"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! 0=Stdby (will arm at sufficient throttle), 1=Armed, 2=Active (enum)
                    struct apr_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/apr_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Burner is on or off (boolean)
                    struct burner_enabled
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/burner_enabled"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Burner is high or low (boolean)
                    struct burner_level
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/burner_level"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! descent-speed ratio of the aircraft in units of propwash-speed (ratio)
                    struct descent_speed_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/descent_speed_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! wash-multiplier - vortex ring state - which are the airflows through the rotor disc normal flow is 0.5 (50%) VRS flow is 1.0 (100%) (ratio)
                    struct vortex_ring_state
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/engine/vortex_ring_state"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                }

                //! failures datarefs
                namespace failures
                {
                    //! Ratio of icing on alpha vane - pilot AoA (ratio)
                    struct aoa_ice
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/aoa_ice"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of icing on alpha vane - copilot AoA (ratio)
                    struct aoa_ice2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/aoa_ice2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of icing on wings/airframe - left wing (ratio)
                    struct frm_ice
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/frm_ice"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of icing on wings/airframe - right wing (ratio)
                    struct frm_ice2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/frm_ice2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of icing on the air inlets - first engine (ratio)
                    struct inlet_ice
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/inlet_ice"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of icing on the air inlets - array access to all engines. (ratio)
                    struct inlet_ice_per_engine
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/inlet_ice_per_engine"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Lo Rotor Warning
                    struct lo_rotor_warning
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/lo_rotor_warning"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct onground_all
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/onground_all"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! User Aircraft is on the ground when this is set to 1
                    struct onground_any
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/onground_any"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct over_g
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/over_g"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct over_vfe
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/over_vfe"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct over_vle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/over_vle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct over_vne
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/over_vne"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of icing on pitot tube (ratio)
                    struct pitot_ice
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/pitot_ice"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of icing on pitot tube2 (ratio)
                    struct pitot_ice2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/pitot_ice2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of icing on the prop - first prop (ratio)
                    struct prop_ice
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/prop_ice"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of icing on the prop - array access to all props. (ratio)
                    struct prop_ice_per_engine
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/prop_ice_per_engine"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ???
                    struct smoking
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/smoking"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Stall Warning
                    struct stallwarning
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/stallwarning"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of icing on the static port - pilot side (ratio)
                    struct stat_ice
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/stat_ice"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of icing on the static port - copilot side (ratio)
                    struct stat_ice2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/stat_ice2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of icing on the windshield (ratio)
                    struct window_ice
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/failures/window_ice"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! forces datarefs
                namespace forces
                {
                    //! The roll moment due to aerodynamic forces - positive = right roll. (NM)
                    struct L_aero
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/L_aero"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The roll moment due to gear forces - positive = right roll. (NM)
                    struct L_gear
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/L_gear"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The roll moment due to asymmetric loading - positive = right roll. (NM)
                    struct L_mass
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/L_mass"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Extra plugin-provided roll moment - ADD to this dataref to apply extra force - positive = right roll. (NM)
                    struct L_plug_acf
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/L_plug_acf"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The roll moment due to prop forces. Override with override_engines - positive = right roll. (NM)
                    struct L_prop
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/L_prop"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The roll moment total.  Override with override_force - positive = right roll. (NM)
                    struct L_total
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/L_total"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The pitch moment due to aerodynamic forces - positive = pitch up. (NM)
                    struct M_aero
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/M_aero"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The pitch moment due to gear forces - positive = pitch up. (NM)
                    struct M_gear
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/M_gear"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The pitch moment due to asymmetric loading - positive = pitch up. (NM)
                    struct M_mass
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/M_mass"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Extra plugin-provided pitch moment - ADD to this dataref to apply extra force - positive = pitch up. (NM)
                    struct M_plug_acf
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/M_plug_acf"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The pitch moment due to prop forces. Override with override_engines - positive = pitch up. (NM)
                    struct M_prop
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/M_prop"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The pitch moment total.  Override with override_force - positive = pitch up. (NM)
                    struct M_total
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/M_total"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The yaw moment due to aerodynamic forces - positive = yaw right/clockwise. (NM)
                    struct N_aero
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/N_aero"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The yaw moment due to gear forces positive = yaw right/clockwise. (NM)
                    struct N_gear
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/N_gear"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The yaw moment due to asymmetric loading - positive = yaw right/clockwise. (NM)
                    struct N_mass
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/N_mass"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Extra plugin-provided yaw moment - ADD to this dataref to apply extra force - positive = yaw right/clockwise. (NM)
                    struct N_plug_acf
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/N_plug_acf"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The yaw moment due to prop forces. Override with override_engines - positive = yaw right/clockwise. (NM)
                    struct N_prop
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/N_prop"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The yaw moment total.  Override with override_forces - positive = yaw right/clockwise. (NM)
                    struct N_total
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/N_total"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct Q_rotor_rad
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/Q_rotor_rad"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ???
                    struct R_rotor_rad
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/R_rotor_rad"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ???
                    struct drag_path_axis
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/drag_path_axis"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Aerodynamic forces - backward - ACF Z (Newtons)
                    struct faxil_aero
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/faxil_aero"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Gear/ground forces - backward - ACF Z (Newtons)
                    struct faxil_gear
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/faxil_gear"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Extra plugin-provided forward force.  (ACF Z axis, positive pushes airplane backward). ADD to this dataref to apply extra force. (Newtons)
                    struct faxil_plug_acf
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/faxil_plug_acf"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! force backward by all engines on the ACF (usually this is a negative number).  Override with override_engines (Newtons)
                    struct faxil_prop
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/faxil_prop"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! total/ground forces - ACF Z axis.  Override with override_forces (Newtons)
                    struct faxil_total
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/faxil_total"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Aerodynamic forces - upward - ACF Y (Newtons)
                    struct fnrml_aero
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/fnrml_aero"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Gear/ground forces - upward - ACF Y (Newtons)
                    struct fnrml_gear
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/fnrml_gear"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Extra plugin-provided upward force (ACF Y axis, positive pushes airplane up). ADD to this dataref to apply extra force. (Newtons)
                    struct fnrml_plug_acf
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/fnrml_plug_acf"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! force upward by all engines on the ACF.  Override with override_engines  Writable in v10 only (Newtons)
                    struct fnrml_prop
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/fnrml_prop"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Total/ground forces - ACF Y axis.  Override with override_forces (Newtons)
                    struct fnrml_total
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/fnrml_total"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Aerodynamic forces - sideways - ACF X (Newtons)
                    struct fside_aero
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/fside_aero"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Gear/ground forces - sideways - ACF X (Newtons)
                    struct fside_gear
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/fside_gear"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Extra plugin-provided sideways force (ACF X axis, positive pushes airplane to the right). ADD to this dataref to apply extra force. (Newtons)
                    struct fside_plug_acf
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/fside_plug_acf"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! force sideways by all engines on the ACF.  Override with override_engines (Newtons)
                    struct fside_prop
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/fside_prop"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! total/ground forces - ACF X axis.  Override with override_forces (Newtons)
                    struct fside_total
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/fside_total"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Total g-forces on the plane as a multiple, along the plane (Gs)
                    struct g_axil
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/g_axil"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Total g-forces on the plane as a multiple, downward (Gs)
                    struct g_nrml
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/g_nrml"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Total g-forces on the plane as a multiple, sideways (Gs)
                    struct g_side
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/g_side"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct lift_path_axis
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/lift_path_axis"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct side_path_axis
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/side_path_axis"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Velocity of aircraft in its own coordinate system (mtr/sec)
                    struct vx_acf_axis
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/vx_acf_axis"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Velocity of air relative to airplane (mtr/sec)
                    struct vx_air_on_acf
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/vx_air_on_acf"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Velocity of aircraft in its own coordinate system (mtr/sec)
                    struct vy_acf_axis
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/vy_acf_axis"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Velocity of air relative to airplane (mtr/sec)
                    struct vy_air_on_acf
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/vy_air_on_acf"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Velocity of aircraft in its own coordinate system (mtr/sec)
                    struct vz_acf_axis
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/vz_acf_axis"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Velocity of air relative to airplane (mtr/sec)
                    struct vz_air_on_acf
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/forces/vz_air_on_acf"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! ground datarefs
                namespace ground
                {
                    //! Location of a pt on the ground in local coords (meters)
                    struct plugin_ground_center
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/ground/plugin_ground_center"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                    //! Normal vector of the terrain (must be normalized) (vector)
                    struct plugin_ground_slope_normal
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/ground/plugin_ground_slope_normal"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                    //! speed of deck moving under us (this is a velocity vector) (m/s)
                    struct plugin_ground_terrain_velocity
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/ground/plugin_ground_terrain_velocity"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                    //! tbd - writable only with override_groundplane (enum)
                    struct surface_texture_type
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/ground/surface_texture_type"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! jetwash datarefs
                namespace jetwash
                {
                    //! DVinc
                    struct DVinc
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/jetwash/DVinc"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ringDVinc
                    struct ringDVinc
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/jetwash/ringDVinc"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                }

                //! misc datarefs
                namespace misc
                {
                    //! ???
                    struct C_m
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/C_m"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct C_n
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/C_n"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct Q_centroid_MULT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/Q_centroid_MULT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! Ambient Q (psf)
                    struct Qstatic
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/Qstatic"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Force feedback: total pounds on pedals by ACF due to heading (lbs)
                    struct act_frc_hdng_lb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/act_frc_hdng_lb"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Force feedback: total pounds on pedals by ACF due to left brake (lbs)
                    struct act_frc_lbrk_lb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/act_frc_lbrk_lb"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Force feedback: total pounds on yoke by ACF due to pitch (lbs)
                    struct act_frc_ptch_lb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/act_frc_ptch_lb"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Force feedback: total pounds on pedals by ACF due to right brake (lbs)
                    struct act_frc_rbrk_lb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/act_frc_rbrk_lb"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Force feedback: total pounds on yoke by ACF due to roll (lbs)
                    struct act_frc_roll_lb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/act_frc_roll_lb"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct blown_flap_engage_rat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/blown_flap_engage_rat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct cd_overall
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/cd_overall"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Center of Gravity (meters)
                    struct cgz_ref_to_default
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/cgz_ref_to_default"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct cl_overall
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/cl_overall"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct displace_rat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/displace_rat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ??? Slung/jettisonable load size (this should read JETT size but has a typo)
                    struct ett_size
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/ett_size"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct g_total
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/g_total"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Indicated barometric altitude, quite probably in feet actually. (meters)
                    struct h_ind
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/h_ind"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Indicated barometric altitude, quite probably in feet actually. (meters)
                    struct h_ind2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/h_ind2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Indicated barometric altitude, quite probably in feet actually. (meters)
                    struct h_ind_copilot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/h_ind_copilot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Indicated barometric altitude, quite probably in feet actually. (meters)
                    struct h_ind_copilot2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/h_ind_copilot2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct jato_left
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/jato_left"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ??? slung jettisonable load length (length of cable??!)
                    struct jett_len
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/jett_len"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ??? Slung/jettisonable load size - this fixes the typo above.
                    struct jett_size
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/jett_size"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct l_o_d
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/l_o_d"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct lift_fan_total_power
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/lift_fan_total_power"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct machno
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/machno"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! [GEAR]
                    struct nosewheel_speed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/nosewheel_speed"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct prop_ospeed_test_timeout
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/prop_ospeed_test_timeout"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct rocket_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/rocket_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct rocket_timeout
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/rocket_timeout"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct slip
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/slip"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Global location of slung load, meters, x coordinate (meters)
                    struct slung_load_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/slung_load_x"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Global location of slung load, meters, y coordinate (meters)
                    struct slung_load_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/slung_load_y"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Global location of slung load, meters, z coordinate (meters)
                    struct slung_load_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/slung_load_z"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Computed Stability drivative - heading
                    struct stab_hdng_test
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/stab_hdng_test"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Computed stability derivative - pitch
                    struct stab_ptch_test
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/stab_ptch_test"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct turnrate_noroll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/turnrate_noroll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct turnrate_noroll2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/turnrate_noroll2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct turnrate_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/turnrate_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct turnrate_roll2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/turnrate_roll2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct wing_tilt_ptch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/wing_tilt_ptch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ???
                    struct wing_tilt_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/misc/wing_tilt_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! movingparts datarefs
                namespace movingparts
                {
                    //! landing gear1 def
                    struct gear1def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/movingparts/gear1def"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! landing gear2 def
                    struct gear2def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/movingparts/gear2def"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! landing gear3 def
                    struct gear3def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/movingparts/gear3def"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! landing gear4 def
                    struct gear4def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/movingparts/gear4def"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! landing gear5 def
                    struct gear5def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/movingparts/gear5def"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! parts datarefs
                namespace parts
                {
                    //! 73 [WING]
                    struct CD_grndeffect
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/CD_grndeffect"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! 73 [WING]
                    struct CL_grndeffect
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/CL_grndeffect"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! 73x4 centroid is TOTALLY DIFFERENT FOR EACH BLADE on helos and gyros!
                    struct Q_centroid_MULT
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/Q_centroid_MULT"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! 73x4 centroid is TOTALLY DIFFERENT FOR EACH BLADE on helos and gyros!
                    struct Q_centroid_loc
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/Q_centroid_loc"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! 73x10x4 alpha is DIFFERENT FOR EACH BLADE!
                    struct alpha_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/alpha_el"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! 73 [WING] for data output, for the entire flying surface
                    struct axil_force
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/axil_force"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! 56x10x4 [WING]
                    struct cl_el_raw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/cl_el_raw"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! 73x10x4 corkscrew path is DIFFERENT FOR EACH BLADE!
                    struct del_dir
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/del_dir"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2920;
                    };

                    //! 73x10 (degrees)
                    struct elem_inc
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/elem_inc"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! 73 [WING] different for each part since def may be positive on a canard and negative on an aft wing... ON THE SAME PLANE AT THE SAME TIME! (degrees)
                    struct elev_cont_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/elev_cont_def"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! 73 [WING] different for each part since def may be positive on a canard and negative on an aft wing... ON THE SAME PLANE AT THE SAME TIME! (degrees)
                    struct elev_trim_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/elev_trim_def"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! 56 [WING] with flap setting, and then variation with pitch and roll input, on a 4 wing plane, with flaps on every wing, some going up and down with pitch input, we better find the flap def on each surface! (degrees)
                    struct flap2_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/flap2_def"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! 73 [WING] with flap setting, and then variation with pitch and roll input, on a 4 wing plane, with flaps on every wing, some going up and down with pitch input, we better find the flap def on each surface! (degrees)
                    struct flap_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/flap_def"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! 73 [WING] for data output, for the entire flying surface
                    struct nrml_force
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/nrml_force"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! 56 [WING] different for each part since def may be positive on top vstab and neg on the bottom one.... ON THE SAME PLANE AT THE SAME TIME! (degrees)
                    struct rudd2_cont_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/rudd2_cont_def"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! 73 [WING] different for each part since def may be positive on top vstab and neg on the bottom one.... ON THE SAME PLANE AT THE SAME TIME! (degrees)
                    struct rudd_cont_def
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/rudd_cont_def"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                    //! 73
                    struct tire_drag_dis
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/tire_drag_dis"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! 73
                    struct tire_prop_rot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/tire_prop_rot"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! 73
                    struct tire_speed_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/tire_speed_now"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! 73
                    struct tire_speed_term
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/tire_speed_term"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Steering command actually enacted by the gear, degrees positive right. Writable in 1030.  Override via override_wheel_steer (degrees)
                    struct tire_steer_act
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/tire_steer_act"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Steering command being sent to this gear, degrees positive right.  This takes into account steering algorithms for big planes like 747, but does not free castoring and springiness. Writable in 1030.  Override via override_wheel_steer (degrees)
                    struct tire_steer_cmd
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/tire_steer_cmd"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! [GEAR] This is amount the Nth gear is deflected upwards due to vehicle weight on struts. (meters)
                    struct tire_vrt_def_veh
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/tire_vrt_def_veh"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! 73
                    struct tire_vrt_frc_veh
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/tire_vrt_frc_veh"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! [GEAR] x location of the Nth gear's wheel relative to the CG, airplane coordinates.  This doesn't take into account strut compression.  Writable in v8/9, read-only in v10. (meters)
                    struct tire_x_no_deflection
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/tire_x_no_deflection"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! [GEAR] y location of the Nth gear's wheel relative to the CG, airplane coordinates.  This doesn't take into account strut compression.  Writable in v8/9, read-only in v10. (meters)
                    struct tire_y_no_deflection
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/tire_y_no_deflection"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! [GEAR] z location of the Nth gear's wheel relative to the CG, airplane coordinates.  This doesn't take into account strut compression.  Writable in v8/9, read-only in v10. (meters)
                    struct tire_z_no_deflection
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/tire_z_no_deflection"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! 73x10x4 speed is DIFFERENT FOR EACH BLADE!
                    struct v_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/v_el"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 73;
                    };

                    //! 56 [WING]
                    struct wash_grndeffect
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/parts/wash_grndeffect"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 56;
                    };

                }

                //! position datarefs
                namespace position
                {
                    //! The angular momentum of the aircraft (relative to flight axis) (NM)
                    struct L
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/L"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The angular momentum of the aircraft (relative to flight axis). (NM)
                    struct M
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/M"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The angular momentum of the aircraft (relative to flight axis) (NM)
                    struct N
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/N"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The roll rotation rates (relative to the flight) (deg/sec)
                    struct P
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/P"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The roll angular acceleration (relative to the flight) (deg/sec2)
                    struct P_dot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/P_dot"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The roll rotation rates (relative to the flight) (rad/sec)
                    struct Prad
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/Prad"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The pitch rotation rates (relative to the flight) (deg/sec)
                    struct Q
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/Q"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The pitch angular acceleration (relative to the flight) (deg/sec2)
                    struct Q_dot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/Q_dot"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The pitch rotation rates (relative to the flight) (rad/sec)
                    struct Qrad
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/Qrad"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The yaw rotation rates (relative to the flight) (deg/sec)
                    struct R
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/R"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The yaw angular acceleration rates (relative to the flight) (deg/sec2)
                    struct R_dot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/R_dot"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The yaw rotation rates (relative to the flight) (rad/sec)
                    struct Rrad
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/Rrad"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The pitch relative to the flown path (angle of attack) (degrees)
                    struct alpha
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/alpha"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The heading relative to the flown path (yaw) (degrees)
                    struct beta
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/beta"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The elevation above MSL of the aircraft (meters)
                    struct elevation
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/elevation"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The ground speed of the aircraft (meters/sec)
                    struct groundspeed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/groundspeed"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The heading the aircraft actually flies.  (hpath+beta=psi) (degrees)
                    struct hpath
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/hpath"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Air speed indicated - this takes into account air density and wind direction (kias)
                    struct indicated_airspeed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/indicated_airspeed"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Air speed indicated - this takes into account air density and wind direction (kias)
                    struct indicated_airspeed2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/indicated_airspeed2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The latitude of the point 0,0,0 in OpenGL coordinates (Writing NOT recommended!!) (degrees)
                    struct lat_ref
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/lat_ref"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The latitude of the aircraft (degrees)
                    struct latitude
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/latitude"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The acceleration in local OGL coordinates (mtr/sec2)
                    struct local_ax
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/local_ax"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The acceleration in local OGL coordinates (mtr/sec2)
                    struct local_ay
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/local_ay"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The acceleration in local OGL coordinates (mtr/sec2)
                    struct local_az
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/local_az"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The velocity in local OGL coordinates (mtr/sec)
                    struct local_vx
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/local_vx"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The velocity in local OGL coordinates (mtr/sec)
                    struct local_vy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/local_vy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The velocity in local OGL coordinates (mtr/sec)
                    struct local_vz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/local_vz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The location of the plane in OpenGL coordinates (meters)
                    struct local_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/local_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The location of the plane in OpenGL coordinates (meters)
                    struct local_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/local_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The location of the plane in OpenGL coordinates (meters)
                    struct local_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/local_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The longitude of the point 0,0,0 in OpenGL coordinates. (degrees)
                    struct lon_ref
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/lon_ref"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The longitude of the aircraft (degrees)
                    struct longitude
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/longitude"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The real magnetic heading of the aircraft - the old magpsi dataref was FUBAR (degrees)
                    struct mag_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/mag_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The local magnetic variation (degrees)
                    struct magnetic_variation
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/magnetic_variation"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! DO NOT USE THIS (degrees)
                    struct magpsi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/magpsi"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The roll of the aircraft in degrees - OpenGL coordinates (degrees)
                    struct phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The true heading of the aircraft in degrees from the Z axis - OpenGL coordinates (degrees)
                    struct psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! A quaternion representing the rotation from local OpenGL coordinates to the aircraft's coordinates. (quaternion)
                    struct q
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/q"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 4;
                    };

                    //! The pitch relative to the plane normal to the Y axis in degrees - OpenGL coordinates (degrees)
                    struct theta
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/theta"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Air speed true - this does not take into account air density at altitude! (meters/sec)
                    struct true_airspeed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/true_airspeed"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The roll of the aircraft relative to the earth precisely below the aircraft (degrees)
                    struct true_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/true_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The heading of the aircraft relative to the earth precisely below the aircraft - true degrees north, always (degrees)
                    struct true_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/true_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The pitch of the aircraft relative to the earth precisely below the aircraft (degrees)
                    struct true_theta
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/true_theta"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! VVI (vertical velocity in meters per second) (meters/second)
                    struct vh_ind
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/vh_ind"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! VVI (vertical velocity in feet per second) (fpm)
                    struct vh_ind_fpm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/vh_ind_fpm"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! VVI (vertical velocity in feet per second) (fpm)
                    struct vh_ind_fpm2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/vh_ind_fpm2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The pitch the aircraft actually flies.  (vpath+alpha=theta) (degrees)
                    struct vpath
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/vpath"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! AGL (meters)
                    struct y_agl
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/position/y_agl"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! transmissions datarefs
                namespace transmissions
                {
                    //! transmission pressure
                    struct xmsn_press
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/transmissions/xmsn_press"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! transmission temperature
                    struct xmsn_temp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/transmissions/xmsn_temp"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! weight datarefs
                namespace weight
                {
                    //! Payload Weight (kgs)
                    struct m_fixed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/weight/m_fixed"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Tank Weight - for 9 tanks (kgs)
                    struct m_fuel
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/weight/m_fuel"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 9;
                    };

                    //! Fuel Tank 1 Weight (kgs)
                    struct m_fuel1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/weight/m_fuel1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Tank 2 Weight (kgs)
                    struct m_fuel2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/weight/m_fuel2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Tank 3 Weight (kgs)
                    struct m_fuel3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/weight/m_fuel3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Total Weight (kgs)
                    struct m_fuel_total
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/weight/m_fuel_total"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Jettison (kgs)
                    struct m_jettison
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/weight/m_jettison"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Total Weight (kgs)
                    struct m_total
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel/weight/m_total"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

            }

            //! flightmodel2 datarefs
            namespace flightmodel2
            {
                //! controls datarefs
                namespace controls
                {
                    //! Aileron trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the aileron trim is deflected enough to move the ailerons through 30% of their travel, then that is an aileron trim of 0.3. (ratio)
                    struct aileron_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/aileron_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Actual dihedral, in ratio. 0.0 is no dihedral deployment, 1 is max dihedral deployment. (ratio)
                    struct dihedral_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/dihedral_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Elevator trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the elevator trim is deflected enough to move the elevators through 30% of their travel, then that is an elevator trim of 0.3. (ratio)
                    struct elevator_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/elevator_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the ACTUAL FLAP deployment for flap-set #1, in ratio, where 0.0 is flaps fully retracted, and 1.0 is flaps fully extended. (ratio)
                    struct flap1_deploy_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/flap1_deploy_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the ACTUAL FLAP deployment for flap-set #2, in ratio, where 0.0 is flaps fully retracted, and 1.0 is flaps fully extended. (ratio)
                    struct flap2_deploy_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/flap2_deploy_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the ACTUAL FLAP deployment for overall flap system, in ratio, where 0.0 is flaps fully retracted, and 1.0 is flaps fully extended. You should probably use the deployment for flap set 1 or flap set 2 to deflect the surfaces though.  This takes into account that flaps deploy slowly, not instantaneously as the handle is dragged. (ratio)
                    struct flap_handle_deploy_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/flap_handle_deploy_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is how much the flight controls are deflected in heading after any stability augmentation, where -1.0 is full left, and 1.0 is full right. (ratio)
                    struct heading_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/heading_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Actual incidence, in ratio. 0.0 is no incidence deployment, 1 is max incidence deployment. (ratio)
                    struct incidence_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/incidence_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is how much the flight controls are deflected in pitch after any stability augmentation, in ratio, where -1.0 is full down, and 1.0 is full up. (ratio)
                    struct pitch_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/pitch_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is how much the flight controls are deflected in roll after any stability augmentation, in ratio, where -1.0 is full left, and 1.0 is full right. (ratio)
                    struct roll_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/roll_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Rotor trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the rotor trim is deflected enough to move the rotor through 30% of its travel, then that is a rotor trim of 0.3. (ratio)
                    struct rotor_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/rotor_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Rudder trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the rudder trim is deflected enough to move the rudders through 30% of their travel, then that is an rudder trim of 0.3. (ratio)
                    struct rudder_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/rudder_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Slat deployment, where 0.0 is slats fully retracted, 1.0 is slats fully extended. This variable applies to lading-edge flaps as well. (ratio)
                    struct slat1_deploy_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/slat1_deploy_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Slat deployment, where 0.0 is slats fully retracted, 1.0 is slats fully extended. This variable applies to lading-edge flaps as well. (ratio)
                    struct slat2_deploy_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/slat2_deploy_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is how much the speedbrakes surfaces are extended, in ratio, where 0.0 is fully retracted, and 1.0 is fully extended. (ratio)
                    struct speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the actual stabilizer deflection with trim for all-moving horizontal stabilizers. This is the deflection you can see visually on airliners. This is in degrees, positive for leading-edge nose up. (degrees)
                    struct stabilizer_deflection_degrees
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/stabilizer_deflection_degrees"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Actual thrust vector, in ratio. 0.0 is no thrust vector deployment, 1 is max thrust vector deployment. (ratio)
                    struct thrust_vector_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/thrust_vector_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deployment of the water rudder, 0 is none, 1 is max (ratio)
                    struct water_rudder_deploy_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/water_rudder_deploy_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Actual wing-retraction, in ratio. 0.0 is no wing-retraction deployment, 1 is max wing-retraction deployment. (ratio)
                    struct wing_retraction_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/wing_retraction_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Actual sweep, in ratio. 0.0 is no sweep deployment, 1 is max sweep deployment. (ratio)
                    struct wingsweep_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/controls/wingsweep_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! doors datarefs
                namespace doors
                {
                    //! Current angle about the axis of rotation of this gear door, degrees. (degrees)
                    struct angle_now_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/doors/angle_now_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! 0=unused (plane does not use this door) 1=standard (opens before gear goes down) 2=attached to strut (cycles with door), 3=closed (opens before gear goes down, then closes again) (enumeration)
                    struct type_
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/doors/type"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                }

                //! engines datarefs
                namespace engines
                {
                    //! CHT (per engine) in degrees C (degrees)
                    struct CHT_deg_C
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/CHT_deg_C"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! EGT (per engine) in degrees C (degrees)
                    struct EGT_deg_C
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/EGT_deg_C"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! ITT (per engine) in degrees C (degrees)
                    struct ITT_deg_C
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/ITT_deg_C"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! N1 speed as percent of max (per engine) (percent)
                    struct N1_percent
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/N1_percent"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! N2 speed as percent of max (per engine) (percent)
                    struct N2_percent
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/N2_percent"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Afterburner on, yes or no. (boolean)
                    struct afterburner_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/afterburner_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Afterburner engaged ratio, 0.0 to 1.0. (ratio)
                    struct afterburner_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/afterburner_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! How much fuel has been primed into the intake port (fuel-injected engine) 0..1 (ratio)
                    struct engine_fuel_in_intake
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/engine_fuel_in_intake"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Engine is currently burning fuel, yes or no. (boolean)
                    struct engine_is_burning_fuel
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/engine_is_burning_fuel"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! This is the angle of the engine as it turns over, running 0 to 360 over and over again in normal operation. Engine speed can be different than prop rotation speed in clutched designs. This is radians per second. (degrees)
                    struct engine_rotation_angle_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/engine_rotation_angle_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Rotational speed of the engine, in radians per second. (radians/second)
                    struct engine_rotation_speed_rad_sec
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/engine_rotation_speed_rad_sec"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Is the electric fuel pump for this engine spinning?  1 = yes, 0 = no. (0..1)
                    struct fuel_pump_spinning
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/fuel_pump_spinning"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Engine has fuel making to the combustion process, yes or no. (boolean)
                    struct has_fuel_flow_after_mixture
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/has_fuel_flow_after_mixture"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Engine has fuel making to the mixture control, yes or no.  Writable if override_fuel_system is true. (boolean)
                    struct has_fuel_flow_before_mixture
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/has_fuel_flow_before_mixture"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Engine fire, 0 means none, 1 means max. (0..1)
                    struct is_on_fire
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/is_on_fire"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Speed of propwash/jetwash behind the prop disc/engine exhaust in meters/second (meters/second)
                    struct jetwash_mtr_sec
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/jetwash_mtr_sec"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Engine location, meters x, y, z, with respect to the default center of gravity. (meters)
                    struct location_x_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/location_x_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Engine location, meters x, y, z, with respect to the default center of gravity. (meters)
                    struct location_y_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/location_y_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Engine location, meters x, y, z, with respect to the default center of gravity. (meters)
                    struct location_z_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/location_z_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! This engine nacelle vertical vector, in degrees, where 0 is straight forwards, 90 is straight up. (degrees)
                    struct nacelle_vertical_angle_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/nacelle_vertical_angle_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! This is the coning angle of the disc, in radians. Typically close to 0.0. (radians)
                    struct prop_cone_angle_rad
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/prop_cone_angle_rad"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! prop_disc datarefs
                    namespace prop_disc
                    {
                        //! Alpha of prop disc when viewed from front.  X-Plane interpolates as the view angle moves. (ratio)
                        struct disc_alpha_front
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/disc_alpha_front"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Ratio to multiply disc alpha when view is inside the airplane. (ratio)
                        struct disc_alpha_inside
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/disc_alpha_inside"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Alpha of prop disc when viewed of side. (ratio)
                        struct disc_alpha_side
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/disc_alpha_side"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Offset from left (in "slots") for the prop disc texture.  Fractions blend horizontal images. (offset)
                        struct disc_s
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/disc_s"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Number of horizontal slots for the prop disc in the prop disc texture (count)
                        struct disc_s_dim
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/disc_s_dim"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Offset from bottom (in "slots") for the prop disc texture (offset)
                        struct disc_t
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/disc_t"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Number of vertical slots for the prop disc in the prop disc texture (count)
                        struct disc_t_dim
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/disc_t_dim"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! If larger than zero, the prop disc is actually two discs, with this separation at the root and no separation at the tip. (meters)
                        struct disc_width
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/disc_width"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Set to 1 to control the prop disc from a plugin.  Overrides all other variables in this section. (boolean)
                        struct override
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/override"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Alpha of prop side when viewed from front.  X-Plane interpolates as the view angle moves. (ratio)
                        struct side_alpha_front
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/side_alpha_front"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Ratio to multiply side alpha when view is inside the airplane. (ratio)
                        struct side_alpha_inside
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/side_alpha_inside"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Alpha of prop side when viewed of side. (ratio)
                        struct side_alpha_side
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/side_alpha_side"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! A ratio to multiply side alpha when the rotor is extending toward the camera. (ratio)
                        struct side_alpha_to_camera
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/side_alpha_to_camera"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Rotation angle of the side images now - allows side to rotate independently of disc, perhaps faster. (degrees)
                        struct side_angle
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/side_angle"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! If true, prop side angle comes from billboarding logic - if false, it comes from side_angle dataref. (boolean)
                        struct side_is_billboard
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/side_is_billboard"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Ratio to scale the length of the side image.  1.0 = the real length of the prop. (ratio)
                        struct side_length_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/side_length_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Number of side blades to draw.  Should be at least 2! (count)
                        struct side_number_of_blades
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/side_number_of_blades"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Offset from left (in "slots") for the prop disc texture.  Fractions blend horizontal images. (offset)
                        struct side_s
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/side_s"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Number of horizontal slots for the prop side in the prop disc texture (count)
                        struct side_s_dim
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/side_s_dim"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Offset from bottom (in "slots") for the prop disc texture (offset)
                        struct side_t
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/side_t"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Number of vertical slots for the prop side in the prop disc texture (count)
                        struct side_t_dim
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/side_t_dim"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = int;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                        //! Width of prop side image in meters.  Height comes from prop radius. (meters)
                        struct side_width
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/engines/prop_disc/side_width"; }
                            //! Can be written to?
                            static constexpr bool writable = true;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 8;
                        };

                    }

                    //! Is the prop a disc now?  Override with /prop_disc/override per engine! (boolean)
                    struct prop_is_disc
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/prop_is_disc"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! This is the angle of the prop or engine-fan as it rotates. You will see this value circulate 0 to 360 degrees over and over as the engine runs and the prop or fan turns. This dataref NEVER shows the speed of the prop disc if it happens to be showing. This always tracks the actual prop.  Override witih /prop_disc/override per engine! (degrees)
                    struct prop_no_disc_rotation_angle_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/prop_no_disc_rotation_angle_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! This is the ACTUAL pitch of the prop in degrees from its flat-pitch setting. (degrees)
                    struct prop_pitch_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/prop_pitch_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! This is the angle of the prop or engine-fan as it rotates. You will see this value circulate 0 to 360 degrees over and over as the engine runs and the prop or fan turns.  Override witih /prop_disc/override per engine! (degrees)
                    struct prop_rotation_angle_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/prop_rotation_angle_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Radians per second rotation speed of the prop. (radians/second)
                    struct prop_rotation_speed_rad_sec
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/prop_rotation_speed_rad_sec"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Degrees of deflection of a line from the crank shaft to the prop tip. (degrees)
                    struct prop_tip_deflection_degrees
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/prop_tip_deflection_degrees"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Lateral disc tilt from cyclic deflection. (degrees)
                    struct rotor_cyclic_aileron_tilt_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/rotor_cyclic_aileron_tilt_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Longitudinal disc tilt from cyclic deflection. (degrees)
                    struct rotor_cyclic_elevator_tilt_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/rotor_cyclic_elevator_tilt_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! This engine rotor-disc lateral cyclic, in degrees, where -10 is 10 degrees left, 10 is 10 degrees right. (degrees)
                    struct rotor_side_cyclic_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/rotor_side_cyclic_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! This engine rotor-disc longitudinal cyclic, in degrees, where -10 is 10 degrees forwards, 10 is 10 degrees aft. (degrees)
                    struct rotor_vertical_cyclic_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/rotor_vertical_cyclic_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! This engine rotor-disc vertical vector, in degrees, where 0 is straight forwards, 90 is straight up. (degrees)
                    struct rotor_vertical_vector_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/rotor_vertical_vector_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Sign of the side of the ACF for this engine: -1 for left side, 0 for inline, 1 for right side (-1,0,1)
                    struct side_sign
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/side_sign"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Is this starter running at all (boolean)
                    struct starter_is_running
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/starter_is_running"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Is this starter applying torque to the engine (boolean)
                    struct starter_making_torque
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/starter_making_torque"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Throttle that is actually going to the engine, which could be different than the commanded throttle due to FADEC throttle adjustments. (ratio)
                    struct throttle_used_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/throttle_used_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! How far the reverser doors/mechanism have traveled.  0 = fully stowed, 1.0 = fully deployed. (ratio)
                    struct thrust_reverser_deploy_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/engines/thrust_reverser_deploy_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                }

                //! gear datarefs
                namespace gear
                {
                    //! This is how far down the landing gear is.  0=up, 1= down (ratio)
                    struct deploy_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/deploy_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Angle of eagle-claw landing gear now, degrees, per gear. (degrees)
                    struct eagle_claw_angle_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/eagle_claw_angle_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Current gear heading angle, degrees. (degrees)
                    struct gear_heading_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/gear_heading_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Current gear pitch angle, degrees. (degrees)
                    struct gear_pitch_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/gear_pitch_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Current gear roll angle, degrees. (degrees)
                    struct gear_roll_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/gear_roll_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Is this wheel on grass (boolean)
                    struct on_grass
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/on_grass"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Is this wheel on the ground (boolean)
                    struct on_ground
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/on_ground"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Is this wheel on some kind of noisy surface like gravel (boolean)
                    struct on_noisy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/on_noisy"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Tire rotation in degrees, running 0 to 360 over and over as it rolls. (degrees)
                    struct tire_rotation_angle_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/tire_rotation_angle_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Rotational speed of this tire, radians per second. (radians/second)
                    struct tire_rotation_speed_rad_sec
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/tire_rotation_speed_rad_sec"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Ratio of how much this tire is in a skid - 0 = full traction, 1 = completely skidding (0..1)
                    struct tire_skid_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/tire_skid_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! This is how fast the skidding part of the tire is dragged across the surface it is skidding on in meters/second. (meters/second)
                    struct tire_skid_speed_mtr_sec
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/tire_skid_speed_mtr_sec"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Steering command actually enacted by the gear, degrees positive right.  Writable in 1030.  Override via override_wheel_steer (degrees)
                    struct tire_steer_actual_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/tire_steer_actual_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Steering command being sent to this gear, degrees positive right.  This takes into account steering algorithms for big planes like 747, but does not free castoring and springiness.  Writable in 1030.  Override via override_wheel_steer (degrees)
                    struct tire_steer_command_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/tire_steer_command_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Vertical deflection of this gear, meters. (meters)
                    struct tire_vertical_deflection_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/tire_vertical_deflection_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Vertical force on this gear, newtons. (newton_meters)
                    struct tire_vertical_force_n_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/tire_vertical_force_n_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Rate at which the tires are deflecting, positive means shocks are contracting (meters/second)
                    struct total_deflection_rate
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/gear/total_deflection_rate"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                }

                //! lights datarefs
                namespace lights
                {
                    //! Ratio of the brightness of the beacon, 0 is off, 1 is max.  Use override_beacons_and_strobes (ratio)
                    struct beacon_brightness_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/lights/beacon_brightness_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 4;
                    };

                    //! Ratio of the brightness of the landing lights, 0 is off, 1 is max.  Was dim [64] until 11.10 (ratio)
                    struct generic_lights_brightness_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/lights/generic_lights_brightness_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 128;
                    };

                    //! Ratio of the brightness of the landing lights, 0 is off, 1 is max. (ratio)
                    struct landing_lights_brightness_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/lights/landing_lights_brightness_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 16;
                    };

                    //! Ratio of the brightness of the nav lights, 0 is off, 1 is max. (ratio)
                    struct nav_lights_brightness_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/lights/nav_lights_brightness_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 1;
                    };

                    //! override beacon and strobe control (boolean)
                    struct override_beacons_and_strobes
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/lights/override_beacons_and_strobes"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Heading offset in degrees of the spot light from its default position, positive is right. (degrees)
                    struct spot_light_heading_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/lights/spot_light_heading_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 1;
                    };

                    //! Pitch offset in degrees of the spot light from its default position, positive is up. (degrees)
                    struct spot_light_pitch_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/lights/spot_light_pitch_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 1;
                    };

                    //! Ratio of the brightness of the spot light, 0 is off, 1 is max. (ratio)
                    struct spot_lights_brightness_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/lights/spot_lights_brightness_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 1;
                    };

                    //! Ratio of the brightness of the strobe, 0 is off, 1 is max.  Use override_beacons_and_strobes (ratio)
                    struct strobe_brightness_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/lights/strobe_brightness_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 4;
                    };

                    //! Is any strobe flashing right now? (boolean)
                    struct strobe_flash_now
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/lights/strobe_flash_now"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of the brightness of the taxi light, 0 is off, 1 is max. (ratio)
                    struct taxi_lights_brightness_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/lights/taxi_lights_brightness_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 1;
                    };

                }

                //! misc datarefs
                namespace misc
                {
                    //! Angle of attack probe.  Positive means aircracft nose is above the flight path in aircraft coordinates. (degrees)
                    struct AoA_angle_degrees
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/AoA_angle_degrees"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! True while the auto-board sequence is happening.  Plugins that override the auto-board sequence should set this to 1 during the sequence and clear it when done. (boolean)
                    struct auto_board_in_progress
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/auto_board_in_progress"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! True while the auto-start sequence is happening.  Plugins that override the auto-start sequence should set this to 1 during the sequence and clear it when done. (boolean)
                    struct auto_start_in_progress
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/auto_start_in_progress"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! lateral offset in meters from default for this bouncer (meters)
                    struct bouncer_vx
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/bouncer_vx"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 14;
                    };

                    //! vertical offset in meters from default for this bouncer (meters)
                    struct bouncer_vy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/bouncer_vy"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 14;
                    };

                    //! longitudinal offset in meters from default for this bouncer (meters)
                    struct bouncer_vz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/bouncer_vz"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 14;
                    };

                    //! lateral offset in meters from default for this bouncer (meters)
                    struct bouncer_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/bouncer_x"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 14;
                    };

                    //! vertical offset in meters from default for this bouncer (meters)
                    struct bouncer_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/bouncer_y"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 14;
                    };

                    //! longitudinal offset in meters from default for this bouncer (meters)
                    struct bouncer_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/bouncer_z"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 14;
                    };

                    //! Canopy position: 0 = closed, 1 = open (ratio)
                    struct canopy_open_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/canopy_open_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc. traveling items for your use.  You define the meaning. (ratio)
                    struct custom_slider_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/custom_slider_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 24;
                    };

                    //! How open is the door, 0 = closed, 1 = open (ratio)
                    struct door_open_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/door_open_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! desc (todo)
                    struct gforce_axil
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/gforce_axil"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! desc (todo)
                    struct gforce_normal
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/gforce_normal"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! desc (todo)
                    struct gforce_side
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/gforce_side"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! How far is the pressure-outflow valve open?  0=closed, 1=open (ratio)
                    struct pressure_outflow_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/pressure_outflow_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Angle of the tailhook (degrees)
                    struct tailhook_angle_degrees
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/tailhook_angle_degrees"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Tailhook position: 0 = up, 1 = down (ratio)
                    struct tailhook_deploy_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/tailhook_deploy_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! True while a tow operation is currently taking place.  (boolean)
                    struct tow_in_progress
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/tow_in_progress"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Water drop door position: 0 = up, 1=  down (ratio)
                    struct water_drop_deploy_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/water_drop_deploy_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Water scoop position: 0 = up, 1 = down (ratio)
                    struct water_scoop_deploy_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/water_scoop_deploy_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! current angle of the wiper.  range of motion is set in PlaneMaker. (degrees)
                    struct wiper_angle_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/wiper_angle_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 4;
                    };

                    //! desc (kias)
                    struct yaw_string_airspeed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/yaw_string_airspeed"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! desc (degrees)
                    struct yaw_string_angle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/misc/yaw_string_angle"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! wing datarefs
                namespace wing
                {
                    //! Deflection of the aileron from set #1 on this wing. Degrees, positive is trailing-edge down. (degrees)
                    struct aileron1_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/wing/aileron1_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Deflection of the aileron from set #2 on this wing. Degrees, positive is trailing-edge down. (degrees)
                    struct aileron2_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/wing/aileron2_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! elements datarefs
                    namespace elements
                    {
                        //! Width of chord at the MAC. (meters)
                        struct element_MAC_mtr
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/wing/elements/element_MAC_mtr"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 320;
                        };

                        //! Per element condensation ratio (ratio)
                        struct element_condensation_ratio
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/wing/elements/element_condensation_ratio"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 320;
                        };

                        //! per element surface area (square_meters)
                        struct element_surface_area_mtr_sq
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/flightmodel2/wing/elements/element_surface_area_mtr_sq"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 320;
                        };

                    }

                    //! Deflection of the elevator from set #1 on this wing. Degrees, positive is trailing-edge down. (degrees)
                    struct elevator1_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/wing/elevator1_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Deflection of the elevator from set #2 on this wing. Degrees, positive is trailing-edge down. (degrees)
                    struct elevator2_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/wing/elevator2_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Deflection of the flap from set #1 on this wing. Degrees, positive is trailing-edge down. (degrees)
                    struct flap1_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/wing/flap1_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Deflection of the flap from set #2 on this wing. Degrees, positive is trailing-edge down. (degrees)
                    struct flap2_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/wing/flap2_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Deflection of the rudder from set #1 on this wing. Degrees, positive is trailing-edge right. (degrees)
                    struct rudder1_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/wing/rudder1_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Deflection of the rudder from set #2 on this wing. Degrees, positive is trailing-edge right. (degrees)
                    struct rudder2_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/wing/rudder2_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Deflection of the speedbrakes from set #1 on this wing. (degrees)
                    struct speedbrake1_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/wing/speedbrake1_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Deflection of the speedbrakes from set #2 on this wing. (degrees)
                    struct speedbrake2_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/wing/speedbrake2_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Deflection of the roll-spoilerfrom set #1 on this wing. Degrees, positive is trailing-edge down. (degrees)
                    struct spoiler1_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/wing/spoiler1_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Deflection of the roll-spoilerfrom set #1 on this wing. Degrees, positive is trailing-edge down. (degrees)
                    struct spoiler2_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/wing/spoiler2_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Strength of wing condensation for this wing, 0 is none, 1 = max (ratio)
                    struct wing_condensation_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/wing/wing_condensation_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Strength of wing tip vapor trail for this wing, 0 is none, 1 = max (ratio)
                    struct wing_tip_condensation_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/wing/wing_tip_condensation_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Degrees of deflection of a line from the wing root (extended to the plane centerline) to the tip. (degrees)
                    struct wing_tip_deflection_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/wing/wing_tip_deflection_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                    //! Deflection of the yaw-brake on this wing. A yaw-brake is a set of spoilers on the top and bottom of the wing that split open symmetrically to drag that wing aft and yaw the plane. They are used on the B-2, for example. (degrees)
                    struct yawbrake_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/flightmodel2/wing/yawbrake_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 32;
                    };

                }

            }

            //! graphics datarefs
            namespace graphics
            {
                //! VR datarefs
                namespace VR
                {
                    //! For OBJs used to draw VR controllers: Level of back lighting on the controller. (Ratio)
                    struct backlight_level
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/VR/backlight_level"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! For OBJs used to draw VR controllers: the X deflection (or axis deflection) of each axis on the controller. (Ratio)
                    struct button_axis_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/VR/button_axis_x"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 5;
                    };

                    //! For OBJs used to draw VR controllers: for 2-d thumb sticks or dpads, this is the second axis. (Ratio)
                    struct button_axis_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/VR/button_axis_y"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 5;
                    };

                    //! For OBJs used to draw VR controllers: button status of each button on the controller. (Boolean)
                    struct button_down
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/VR/button_down"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 64;
                    };

                    //! True if VR is enabled, false if it is disabled (Boolean)
                    struct enabled
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/VR/enabled"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! For OBJs used to draw VR controllers: Level of lighting on the tip of the controller. (Ratio)
                    struct seeker_light_level
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/VR/seeker_light_level"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! True if the user is teleporting outside the aircraft.  In this case the pilot's head position is not reliable - use the regular camera location (Boolean)
                    struct teleport_on_ground
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/VR/teleport_on_ground"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! For OBJs used to draw VR controllers: Level of lighting on the D-Pad/joystick part of the controller. (Ratio)
                    struct touch_spot_light_level
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/VR/touch_spot_light_level"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! True if the 3-d VR mouse is in use (Boolean)
                    struct using_3d_mouse
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/VR/using_3d_mouse"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! animation datarefs
                namespace animation
                {
                    //! angle this beacon is rotating (0-360) (degrees)
                    struct airport_beacon_rotation
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/airport_beacon_rotation"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! birds datarefs
                    namespace birds
                    {
                        //! angle the bird's feet are retracted for the flock of birds. (float)
                        struct feet_retract_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/birds/feet_retract_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! degree of wing flap for the currently drawn bird (float)
                        struct wing_flap_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/birds/wing_flap_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                    }

                    //! how high above MSL 0 is this buoy riding? (meters)
                    struct buoy_height
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/buoy_height"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of deployment of carrier blast door (left front) (ratio)
                    struct carrier_blast_def_lf
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/carrier_blast_def_lf"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of deployment of carrier blast door (left rear) (ratio)
                    struct carrier_blast_def_lr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/carrier_blast_def_lr"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of deployment of carrier blast door (right front) (ratio)
                    struct carrier_blast_def_rf
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/carrier_blast_def_rf"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ratio of deployment of carrier blast door (right rear) (ratio)
                    struct carrier_blast_def_rr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/carrier_blast_def_rr"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! crane heading (ratio)
                    struct crane_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/crane_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! deer datarefs
                    namespace deer
                    {
                        //! ratio for deer running (float)
                        struct deer_run_cycle
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/deer/deer_run_cycle"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! ratio for deer turning (float)
                        struct deer_turn_cycle
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/deer/deer_turn_cycle"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                    }

                    //! This is the default _LIT light level that the object is being drawn at, before ATTR_light_level is applied. (float)
                    struct draw_light_level
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/draw_light_level"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! rotation in cartesian space of currently drawn object (float)
                    struct draw_object_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/draw_object_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! X position in cartesian space of currently drawn object (float)
                    struct draw_object_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/draw_object_x"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Y position in cartesian space of currently drawn object (float)
                    struct draw_object_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/draw_object_y"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Z position in cartesian space of currently drawn object (float)
                    struct draw_object_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/draw_object_z"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ground_traffic datarefs
                    namespace ground_traffic
                    {
                        //! TODO (TODOV11)
                        struct belt_loader_height_meters
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/ground_traffic/belt_loader_height_meters"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! TODO (TODOV11)
                        struct door_open
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/ground_traffic/door_open"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 2;
                        };

                        //! TODO (TODOV11)
                        struct tire_rotation_angle_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/ground_traffic/tire_rotation_angle_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 5;
                        };

                        //! TODO (TODOV11)
                        struct tire_steer_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/ground_traffic/tire_steer_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! TODO (TODOV11)
                        struct towbar_heading_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/ground_traffic/towbar_heading_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! TODO (TODOV11)
                        struct towbar_pitch_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/ground_traffic/towbar_pitch_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! TODO (TODOV11)
                        struct wiper_angle_deg
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/ground_traffic/wiper_angle_deg"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 2;
                        };

                    }

                    //! Ratio of the position of all level crossing gates, 0 is up, 1 is down (ratio)
                    struct level_crossing_gate
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/level_crossing_gate"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! lights datarefs
                    namespace lights
                    {
                        //! Airplane beacon light.   RGB = ignore, A = light number (light)
                        struct airplane_beacon_light
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_beacon_light"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Airplane beacon light.   RGB = direction, A = light number (light)
                        struct airplane_beacon_light_dir
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_beacon_light_dir"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Airplane beacon light for rotating beacon billboard. (light)
                        struct airplane_beacon_light_rotate
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_beacon_light_rotate"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Airplane beacon light for rotating beacon spill. (light)
                        struct airplane_beacon_light_rotate_spill
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_beacon_light_rotate_spill"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Airplane beacon light.   RGB = direction, A = light number (light)
                        struct airplane_beacon_light_spill
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_beacon_light_spill"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Airplane generic light.   RGB = dir, A = light number (light)
                        struct airplane_generic_light
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_generic_light"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Airplane generic light.   RGB = dir, A = light number (light)
                        struct airplane_generic_light_flash
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_generic_light_flash"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Airplane generic light.   RGB = dir, A = light number (light)
                        struct airplane_generic_light_spill
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_generic_light_spill"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Internal instrument post lights, A = index (light)
                        struct airplane_inst_spill
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_inst_spill"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Airplane landing light.   RGB = dir, A = light number (light)
                        struct airplane_landing_light
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_landing_light"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Airplane landing light.   RGB = dir, A = light number (light)
                        struct airplane_landing_light_flash
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_landing_light_flash"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Airplane landing light.   RGB = dir, A = light number (light)
                        struct airplane_landing_light_spill
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_landing_light_spill"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Airplane navigation light.   RGB = ignore, A = reserved, use 0 (light)
                        struct airplane_navigation_light
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_navigation_light"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Airplane navigation light.   RGB = ignored, A = reserved, use 0 (light)
                        struct airplane_navigation_light_dir
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_navigation_light_dir"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Airplane navigation light.   RGB = ignored, A = reserved, use 0 (light)
                        struct airplane_navigation_light_spill
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_navigation_light_spill"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Internal panel floods, A = index (light)
                        struct airplane_panel_spill
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_panel_spill"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! AIrplane spot light.   RGB = dir, A = reserved, use 0 (light)
                        struct airplane_spot_light
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_spot_light"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! AIrplane spot light.   RGB = dir, A = reserved, use 0 (light)
                        struct airplane_spot_light_flash
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_spot_light_flash"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! AIrplane spot light.   RGB = dir, A = reserved, use 0 (light)
                        struct airplane_spot_light_spill
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_spot_light_spill"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Airplane strobe light.   RGB = ignore, A = light number (light)
                        struct airplane_strobe_light
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_strobe_light"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Airplane strobe light.   RGB = direction, A = light number (light)
                        struct airplane_strobe_light_dir
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_strobe_light_dir"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! Airplane strobe light.   RGB = direction, A = light number (light)
                        struct airplane_strobe_light_spill
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_strobe_light_spill"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! AIrplane taxi light.   RGB = dir, A = reserved, use 0 (light)
                        struct airplane_taxi_light
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_taxi_light"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! AIrplane taxi light.   RGB = dir, A = reserved, use 0 (light)
                        struct airplane_taxi_light_flash
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_taxi_light_flash"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! AIrplane taxi light.   RGB = dir, A = reserved, use 0 (light)
                        struct airplane_taxi_light_spill
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airplane_taxi_light_spill"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! An airport beacon light, RGBA is a homogenous normal vector (light)
                        struct airport_beacon
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airport_beacon"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! An airport beacon light, RGBA is a homogenous normal vector (light)
                        struct airport_beacon_flash
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/airport_beacon_flash"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! A light that turns on when the carrier app is waved off (light)
                        struct carrier_waveoff
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/carrier_waveoff"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! A flashing light, on only at night, matches v7 (light)
                        struct flasher
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/flasher"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! A horizontal fresnel.  RG = long range, BA = vert range (light)
                        struct fresnel_horizontal
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/fresnel_horizontal"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! A vertical fresnel.  RG = long range, BA = vert range (light)
                        struct fresnel_vertical
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/fresnel_vertical"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! A normal on-at-night light, matches v7 (light)
                        struct normal
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/normal"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! A red pulsing light, on only at night, matches v7 (light)
                        struct pulse
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/pulse"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! RG = rescaling, B = flash frequency (light)
                        struct rabbit
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/rabbit"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! RGB = ignored, A = frequency (light)
                        struct rabbit_sp
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/rabbit_sp"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! RG = rescaling, B = flash frequency, A= phase (light)
                        struct strobe
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/strobe"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! RGB = ignored, A = frequency (light)
                        struct strobe_sp
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/strobe_sp"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! A white strobe light, on only at night, matches v7 (light)
                        struct strobe_v7
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/strobe_v7"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! A 3-color traffic light, matches v7 (light)
                        struct traffic_light
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/traffic_light"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! VASI light, RG = rescaling of brightness, B= beam+, A=beam- (light)
                        struct vasi3
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/vasi3"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! VASI light, RG = rescaling of brightness (light)
                        struct vasi_papi
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/vasi_papi"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! VASI light, RG = rescaling of brightness (light)
                        struct vasi_papi_tint
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/vasi_papi_tint"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! RG = rescaling, B = flash frequency, A= phase (light)
                        struct wigwag
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/wigwag"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                        //! RGB = ignored, A = phase, dx = frequency (light)
                        struct wigwag_sp
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/graphics/animation/lights/wigwag_sp"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = float;
                            //! Is an array dataref
                            static constexpr bool is_array = true;
                            //! Size of array dataref
                            static constexpr size_t size = 9;
                        };

                    }

                    //! Brightness of the wig-wag lights - stays in sync with sim/graphics/animation/lights/wigwag (ratio)
                    struct obj_wigwag_brightness
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/obj_wigwag_brightness"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! -1 to 1 (ratio)
                    struct ping_pong_2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/ping_pong_2"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! -1 to 1 (ratio)
                    struct sin_wave_2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/sin_wave_2"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! windsock roll (degrees)
                    struct windsock_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/windsock_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! windsock heading (degrees)
                    struct windsock_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/windsock_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! windsock pitch (degrees)
                    struct windsock_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/animation/windsock_the"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! colors datarefs
                namespace colors
                {
                    //! Background color behind a modal window (RGB)
                    struct background_rgb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/colors/background_rgb"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                    //! Caption text (for on a main window) (RGB)
                    struct caption_text_rgb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/colors/caption_text_rgb"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                    //! Text color for on a 'glass' screen (RGB)
                    struct glass_text_rgb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/colors/glass_text_rgb"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                    //! Text Color for scrolling lists (RGB)
                    struct list_text_rgb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/colors/list_text_rgb"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                    //! Dark tinging for menus (RGB)
                    struct menu_dark_rgb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/colors/menu_dark_rgb"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                    //! Menu color of a selected item (RGB)
                    struct menu_hilite_rgb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/colors/menu_hilite_rgb"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                    //! Light tinging for menus (RGB)
                    struct menu_lite_rgb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/colors/menu_lite_rgb"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                    //! Menu Item Text Color When Disabled (RGB)
                    struct menu_text_disabled_rgb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/colors/menu_text_disabled_rgb"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                    //! Menu Item Text Color (RGB)
                    struct menu_text_rgb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/colors/menu_text_rgb"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                    //! Color for 3-d plane path (RGB)
                    struct plane_path1_3d_rgb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/colors/plane_path1_3d_rgb"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                    //! Striping color for 3-d plane path (RGB)
                    struct plane_path2_3d_rgb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/colors/plane_path2_3d_rgb"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                    //! Subtitle text colors (RGB)
                    struct subtitle_text_rgb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/colors/subtitle_text_rgb"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                    //! Color of text on tabs that are in the bkgnd (RGB)
                    struct tab_back_rgb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/colors/tab_back_rgb"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                    //! Color of text on tabs that are forward (RGB)
                    struct tab_front_rgb
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/colors/tab_front_rgb"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 3;
                    };

                }

                //! misc datarefs
                namespace misc
                {
                    //! The blue level for the cockpit 'night' tinting, from 0 to 1 (ratio)
                    struct cockpit_light_level_b
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/cockpit_light_level_b"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The green level for the cockpit 'night' tinting, from 0 to 1 (ratio)
                    struct cockpit_light_level_g
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/cockpit_light_level_g"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The red level for the cockpit 'night' tinting, from 0 to 1 (ratio)
                    struct cockpit_light_level_r
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/cockpit_light_level_r"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Current position of that panel (pixels)
                    struct current_scroll_pos
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/current_scroll_pos"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Current position of that panel (pixels)
                    struct current_scroll_pos_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/current_scroll_pos_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Default position for a scrolling plane panel (pixels)
                    struct default_scroll_pos
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/default_scroll_pos"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Default position for a scrolling plane panel (pixels)
                    struct default_scroll_pos_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/default_scroll_pos_x"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! If set to true, the G1000 PFD instrument won't draw the attitude indicator background. SET THIS BACK TO 0 WHEN YOUR PLANE UNLOADS! (boolean)
                    struct kill_g1000_ah
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/kill_g1000_ah"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! If set to true, the map instruments won't draw the red FMS course line. SET THIS BACK TO 0 WHEN YOUR PLANE UNLOADS! (boolean)
                    struct kill_map_fms_line
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/kill_map_fms_line"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Kill blowing snow effect on runways. (boolean)
                    struct kill_runway_snow
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/kill_runway_snow"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Amount that artificial light is dimmed due to the sun's magnitude (ratio)
                    struct light_attenuation
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/light_attenuation"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The blue level for the world, from 0 to 1 (ratio)
                    struct outside_light_level_b
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/outside_light_level_b"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The green level for the world, from 0 to 1 (ratio)
                    struct outside_light_level_g
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/outside_light_level_g"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The red level for the world, from 0 to 1 (ratio)
                    struct outside_light_level_r
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/outside_light_level_r"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the red flashlight on now.  Note that the flashlight is inop when HDR is off. (boolean)
                    struct red_flashlight_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/red_flashlight_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Show instrument descriptions on the panel? (boolean)
                    struct show_instrument_descriptions
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/show_instrument_descriptions"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Show the clickable parts of the panel? (boolean)
                    struct show_panel_click_spots
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/show_panel_click_spots"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Set this to 1 to enable proportional fonts when available. (boolean)
                    struct use_proportional_fonts
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/use_proportional_fonts"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the white flashlight on now.  Note that the flashlight is inop when HDR is off. (boolean)
                    struct white_flashlight_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/misc/white_flashlight_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! scenery datarefs
                namespace scenery
                {
                    //! Level of airport light illumination, 0 = off, 1 = max brightness (ratio)
                    struct airport_light_level
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/scenery/airport_light_level"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Are the airport lites on?  set override_airport_lites to 1t o write this. (boolean)
                    struct airport_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/scenery/airport_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! True when some kind of asynchronous scenery load or unload is in progress. (boolean)
                    struct async_scenery_load_in_progress
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/scenery/async_scenery_load_in_progress"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! What planet are we on?  (Earth = 0, mars = 1) (enum)
                    struct current_planet
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/scenery/current_planet"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! moon heading from true north in OGL coordinates (degrees)
                    struct moon_heading_degrees
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/scenery/moon_heading_degrees"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! moon pitch from flat in OGL coordinates (degrees)
                    struct moon_pitch_degrees
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/scenery/moon_pitch_degrees"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! what percentage of city lites are on as night hits (percent)
                    struct percent_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/scenery/percent_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! sun heading from true north in OGL coordinates (degrees)
                    struct sun_heading_degrees
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/scenery/sun_heading_degrees"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! sun pitch from flat in OGL coordinates (degrees)
                    struct sun_pitch_degrees
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/scenery/sun_pitch_degrees"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! settings datarefs
                namespace settings
                {
                    //! True if HDR rendering is enabled. (boolean)
                    struct HDR_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/settings/HDR_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! dim under high g-load? (boolean)
                    struct dim_gload
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/settings/dim_gload"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! draw forest fires? (boolean)
                    struct draw_forestfires
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/settings/draw_forestfires"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! FOV is non proportional, use if sim/graphics/view/vertical_field_of_view_deg needs to be written to. (boolean)
                    struct non_proportional_vertical_FOV
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/settings/non_proportional_vertical_FOV"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Texture Rendering Level (int)
                    struct rendering_res
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/settings/rendering_res"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! True if atmospheric scattering is enabled. (boolean)
                    struct scattering_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/settings/scattering_on"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! view datarefs
                namespace view
                {
                    //! A modelview matrix to draw in the user's aircraft coordinates - valid only during draw callbacks (Matrix4x4)
                    struct acf_matrix
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/acf_matrix"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 16;
                    };

                    //! True if cinema verite camera is on. (boolean)
                    struct cinema_verite
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/cinema_verite"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! coordinates of the panel click in 3-d (0-1)
                    struct click_3d_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/click_3d_x"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! coordinates of the panel click in 3-d (0-1)
                    struct click_3d_x_pixels
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/click_3d_x_pixels"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! as texture coords (E.g. 0-1) (0-1)
                    struct click_3d_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/click_3d_y"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! as texture coords (E.g. 0-1) (0-1)
                    struct click_3d_y_pixels
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/click_3d_y_pixels"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! the cockpit's roll (the dataref is name wrong - this is really roll) (degrees)
                    struct cockpit_heading
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/cockpit_heading"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The cockpit's pitch (degrees)
                    struct cockpit_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/cockpit_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The cockpit's heading (the dataref name is wrong - this is really true heading) (degrees)
                    struct cockpit_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/cockpit_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the number of passes to render for a multi-dome setup.  This x-plane feature requires a level-3 USB KEY (count)
                    struct dome_number_of_passes
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/dome_number_of_passes"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The horizontal offset for this pass, in degrees (degrees)
                    struct dome_offset_heading
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/dome_offset_heading"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 16;
                    };

                    //! The vertical offset for this pass, in degrees (degrees)
                    struct dome_offset_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/dome_offset_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 16;
                    };

                    //! Stereo status of the draw callback. 0 = not in draw callback, 1 = mono, 2 = direct stereo (only use XPLMDrawObjects), 3 = left eye, 4 = right eye (enum)
                    struct draw_call_type
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/draw_call_type"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does the user have trackIR hardware enabled (boolean)
                    struct eq_trackir
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/eq_trackir"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! horizontal field of view in degrees (degrees)
                    struct field_of_view_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/field_of_view_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! heading rotation for multi-monitor setup. (degrees)
                    struct field_of_view_horizontal_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/field_of_view_horizontal_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! horizontal frustum shift (xp 6,7,8,10) - 1 unit shifts frustum by screen width (ratio)
                    struct field_of_view_horizontal_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/field_of_view_horizontal_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Roll rotation for multi-monitor setup. (degrees)
                    struct field_of_view_roll_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/field_of_view_roll_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! pitch rotation for multi-monitor setup. (degrees)
                    struct field_of_view_vertical_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/field_of_view_vertical_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the yoke visible in the 3-d cockpit? (boolean)
                    struct hide_yoke
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/hide_yoke"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! True if current rendering is reverse-float-Z with clip control set ot 0..1.  False for conventional GL rendering. (Boolean)
                    struct is_reverse_float_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/is_reverse_float_z"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Bounds of the local map window during callbacks - bottom (pixels)
                    struct local_map_b
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/local_map_b"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Bounds of the local map window during callbacks - left (pixels)
                    struct local_map_l
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/local_map_l"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Bounds of the local map window during callbacks - right (pixels)
                    struct local_map_r
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/local_map_r"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Bounds of the local map window during callbacks - top (pixels)
                    struct local_map_t
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/local_map_t"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Current modelview matrix during window callbacks.  use to map boxels to device pixels for scissors. (Matrix4x4)
                    struct modelview_matrix
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/modelview_matrix"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 16;
                    };

                    //! True if modern correct RGBA blending is being used to draw panels; false if the legacy alpha-max equation is being used. (boolean)
                    struct panel_render_new_blending
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_render_new_blending"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! How to draw the panel?  0=2-d panel, 1=3-d, non-lit, 2=3-d, lit (enum)
                    struct panel_render_type
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_render_type"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the location of the bottom edge of the panel, in the coordinate system used during panel drawing. (pixels)
                    struct panel_total_pnl_b
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_total_pnl_b"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the location of the left edge of the panel, in the coordinate system used during panel drawing. (pixels)
                    struct panel_total_pnl_l
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_total_pnl_l"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the location of the right edge of the panel, in the coordinate system used during panel drawing. (pixels)
                    struct panel_total_pnl_r
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_total_pnl_r"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the location of the top edge of the panel, in the coordinate system used during panel drawing. (pixels)
                    struct panel_total_pnl_t
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_total_pnl_t"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the location of the bottom edge of the panel, in the coordinate system used during plugin window drawing. (pixels)
                    struct panel_total_win_b
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_total_win_b"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the location of the left edge of the panel, in the coordinate system used during plugin window drawing. (pixels)
                    struct panel_total_win_l
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_total_win_l"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the location of the right edge of the panel, in the coordinate system used during plugin window drawing. (pixels)
                    struct panel_total_win_r
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_total_win_r"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the location of the top edge of the panel, in the coordinate system used during plugin window drawing. (pixels)
                    struct panel_total_win_t
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_total_win_t"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the location of the bottom edge of the screen, in the coordinate system used during panel drawing. (pixels)
                    struct panel_visible_pnl_b
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_visible_pnl_b"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the location of the left edge of the screen, in the coordinate system used during panel drawing. (pixels)
                    struct panel_visible_pnl_l
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_visible_pnl_l"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the location of the right edge of the screen, in the coordinate system used during panel drawing. (pixels)
                    struct panel_visible_pnl_r
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_visible_pnl_r"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the location of the top edge of the screen, in the coordinate system used during plugin window drawing. (pixels)
                    struct panel_visible_pnl_t
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_visible_pnl_t"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the location of the bottom edge of the screen, in the coordinate system used during plugin window drawing. (pixels)
                    struct panel_visible_win_b
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_visible_win_b"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the location of the left edge of the screen, in the coordinate system used during plugin window drawing. (pixels)
                    struct panel_visible_win_l
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_visible_win_l"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the location of the right edge of the screen, in the coordinate system used during plugin window drawing. (pixels)
                    struct panel_visible_win_r
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_visible_win_r"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the location of the top edge of the screen, in the coordinate system used during plugin window drawing. (pixels)
                    struct panel_visible_win_t
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/panel_visible_win_t"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Position of the pilot's head roll' (degrees)
                    struct pilots_head_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/pilots_head_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Position of pilot's head heading (degrees)
                    struct pilots_head_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/pilots_head_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Position of pilot's head pitch (degrees)
                    struct pilots_head_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/pilots_head_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Position of pilot's head relative to CG, X (meters)
                    struct pilots_head_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/pilots_head_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Position of pilot's head relative to CG, Y (meters)
                    struct pilots_head_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/pilots_head_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Position of pilot's head relative to CG, Z (meters)
                    struct pilots_head_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/pilots_head_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! What kind of rendering is being done during the xplm_Phase_Airplanes callback.  solid = 1, blended/alpha = 2 (0 = N/A, outside draw callback) (enum)
                    struct plane_render_type
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/plane_render_type"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The current projection matrix - valid only during draw callbacks (Matrix4x4)
                    struct projection_matrix
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/projection_matrix"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 16;
                    };

                    //! vertical field of view in degrees, see sim/graphics/settings/non_proportional_vertical_FOV. (degrees)
                    struct vertical_field_of_view_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/vertical_field_of_view_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! the camera's heading, CW frmo true north (degrees)
                    struct view_heading
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/view_heading"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is the view in the cockpit or outside?  Affects sound! (boolean)
                    struct view_is_external
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/view_is_external"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The camera's pitch (degrees)
                    struct view_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/view_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The camera's roll (degrees)
                    struct view_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/view_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The current camera view (enum)
                    struct view_type
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/view_type"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The location of the camera, X coordinate (OpenGL) (OGLcoords)
                    struct view_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/view_x"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The location of the camera, Y coordinate (OpenGL) (OGLcoords)
                    struct view_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/view_y"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The location of the camera, Z coordinate (OpenGL) (OGLcoords)
                    struct view_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/view_z"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Current OpenGL viewport in device window coordinates.  Note thiat this is left, bottom, right top, NOT left, bottom, width, height!! (Pixels)
                    struct viewport
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/viewport"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 4;
                    };

                    //! >= 0 (meters)
                    struct visibility_effective_m
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/visibility_effective_m"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! - 1.0] ([0.0)
                    struct visibility_framerate_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/visibility_framerate_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This used to indicate what level of 3-d force visualization was shown to the user in 3-d. (enum)
                    struct visibility_math_level
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/visibility_math_level"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! >= 0 (meters)
                    struct visibility_terrain_m
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/visibility_terrain_m"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Size of rendering window (pixels)
                    struct window_height
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/window_height"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Size of rendering window (pixels)
                    struct window_width
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/window_width"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The current modelview matrix to draw in standard "OGL" coordinates - valid only during draw callbacks (Matrix4x4)
                    struct world_matrix
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/world_matrix"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 16;
                    };

                    //! What kind of 3-d rendering pass are we on? 0=normal,1=reflections in water (enum)
                    struct world_render_type
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/graphics/view/world_render_type"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

            }

            //! joystick datarefs
            namespace joystick
            {
                //! Flight Control Heading (sum of yoke plus artificial stability) ([-1..1])
                struct FC_hdng
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/FC_hdng"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Flight Control Pitch (sum of yoke plus artificial stability) ([-1..1])
                struct FC_ptch
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/FC_ptch"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Flight Control Roll (sum of yoke plus artificial stability) ([-1..1])
                struct FC_roll
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/FC_roll"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The artificial stability input modifications for yaw. Use override_artstab ([-1..1])
                struct artstab_heading_ratio
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/artstab_heading_ratio"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The artificial stability input modifications for pitch. Use override_artstab ([-1..1])
                struct artstab_pitch_ratio
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/artstab_pitch_ratio"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The artificial stability input modifications for roll. Use override_artstab ([-1..1])
                struct artstab_roll_ratio
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/artstab_roll_ratio"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Hardware settings: Pedal nobrk (writable since 930 to auto-set user preferences) (boolean)
                struct eq_ped_nobrk
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/eq_ped_nobrk"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Hardware settings: Pedal wlbrk (writable since 930 to auto-set user preferences) (boolean)
                struct eq_ped_wibrk
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/eq_ped_wibrk"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Equipment settings: PFC avionics (writable since 930 to auto-set user preferences) (boolean)
                struct eq_pfc_avio
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/eq_pfc_avio"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Equipment settings: PFC brake toggle (writable since 930 to auto-set user preferences) (boolean)
                struct eq_pfc_brake_tog
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/eq_pfc_brake_tog"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Equipment settings: PFC center console (writable since 930 to auto-set user preferences) (boolean)
                struct eq_pfc_centercon
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/eq_pfc_centercon"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Equipment settings: PFC dual cowl (writable since 930 to auto-set user preferences) (boolean)
                struct eq_pfc_dual_cowl
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/eq_pfc_dual_cowl"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Equipment settings: PFC electric trim (writable since 930 to auto-set user preferences) (boolean)
                struct eq_pfc_elec_trim
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/eq_pfc_elec_trim"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Equipment settings: PFC pedal (writable since 930 to auto-set user preferences) (boolean)
                struct eq_pfc_pedals
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/eq_pfc_pedals"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Equipment settings: PFC throttle (writable since 930 to auto-set user preferences) (boolean)
                struct eq_pfc_throt
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/eq_pfc_throt"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Equipment settings: PFC yoke (writable since 930 to auto-set user preferences) (boolean)
                struct eq_pfc_yoke
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/eq_pfc_yoke"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! True if the fire key is held down (boolean)
                struct fire_key_is_down
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/fire_key_is_down"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! True if there is FAA-certified hardware controlling the brakes. (boolean)
                struct has_certified_brakes
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/has_certified_brakes"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! True if there is FAA-certified hardware controlling the heading. (boolean)
                struct has_certified_heading
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/has_certified_heading"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! True if there is FAA-certified hardware controlling the mixture. (boolean)
                struct has_certified_mixture
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/has_certified_mixture"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! True if there is FAA-certified hardware controlling the pitch. (boolean)
                struct has_certified_pitch
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/has_certified_pitch"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! True if there is FAA-certified hardware controlling the pitch. (boolean)
                struct has_certified_prop
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/has_certified_prop"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! True if there is FAA-certified hardware controlling the roll. (boolean)
                struct has_certified_roll
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/has_certified_roll"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! True if there is FAA-certified hardware controlling the throttle. (boolean)
                struct has_certified_throttle
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/has_certified_throttle"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Do we have a joystick? (boolean)
                struct has_joystick
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/has_joystick"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! True if there is joystick hardware of some kind providing this axis right now. (boolean)
                struct joy_mapped_axis_avail
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joy_mapped_axis_avail"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 65;
                };

                //! Fully processed ratio for each axis - either -1 to 1 or 0 to 1. (float)
                struct joy_mapped_axis_value
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joy_mapped_axis_value"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 65;
                };

                //! Assignments for the joystick axes - what does X-Plane think each one is? [Was 15 before 850][Was 24 before 860][was 32 before 900] (enums)
                struct joystick_axis_assignments
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_axis_assignments"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 500;
                };

                //! Max raw value ever seen [Was 15 before 850][Was 24 before 860][was 32 before 900] (ratio)
                struct joystick_axis_maximum
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_axis_maximum"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 500;
                };

                //! Min raw value ever seen [Was 15 before 850][Was 24 before 860][was 32 before 900] (ratio)
                struct joystick_axis_minimum
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_axis_minimum"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 500;
                };

                //! Reverse this axis? [Was 15 before 850][Was 24 before 860][was 32 before 900] (boolean)
                struct joystick_axis_reverse
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_axis_reverse"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 500;
                };

                //! The deflection of this joystick [Was 15 before 850][Was 24 before 860][was 32 before 900] (ratio)
                struct joystick_axis_values
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_axis_values"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 500;
                };

                //! Assignments for the joystick buttons - what does each one do? [Was 64 before 850][was 160 before 900] (enums)
                struct joystick_button_assignments
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_button_assignments"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 3200;
                };

                //! Is this button pressed? [Was 64 before 850][was 160 before 900] (boolean)
                struct joystick_button_values
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_button_values"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 3200;
                };

                //! Amount of artificial stability to add to the heading.  This is AS set by user, not in Plane-Maker. (ratio)
                struct joystick_heading_augment
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_heading_augment"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Joystick center for heading axis (ratio)
                struct joystick_heading_center
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_heading_center"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The nullzone size for the heading axis (ratio)
                struct joystick_heading_nullzone
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_heading_nullzone"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The sensitivity for the heading axis (ratio)
                struct joystick_heading_sensitivity
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_heading_sensitivity"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Amount of artificial stability to add to the pitch.  This is AS set by user, not in Plane-Maker. (ratio)
                struct joystick_pitch_augment
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_pitch_augment"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Joystick center for pitch axis (ratio)
                struct joystick_pitch_center
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_pitch_center"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The nullzone size for the pitch axis (as of 940, one null zone serves all 3 axes) (ratio)
                struct joystick_pitch_nullzone
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_pitch_nullzone"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The sensitivity for the pitch axis (the power ratio) (ratio)
                struct joystick_pitch_sensitivity
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_pitch_sensitivity"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Amount of artificial stability to add to the roll.  This is AS set by user, not in Plane-Maker. (ratio)
                struct joystick_roll_augment
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_roll_augment"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Joystick center for roll axis (ratio)
                struct joystick_roll_center
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_roll_center"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The nullzone size for the roll axis (ratio)
                struct joystick_roll_nullzone
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_roll_nullzone"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The sensitivity for the roll axis (ratio)
                struct joystick_roll_sensitivity
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/joystick_roll_sensitivity"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Can the mouse be used to fly?  False if there is any LEGIT hardware plugged in. (boolean)
                struct mouse_can_be_joystick
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/mouse_can_be_joystick"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Is the mouse acting as a joystick? (boolean)
                struct mouse_is_joystick
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/mouse_is_joystick"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Servo input for yaw ([-1..1])
                struct servo_heading_ratio
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/servo_heading_ratio"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Servo input for pitch ([-1..1])
                struct servo_pitch_ratio
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/servo_pitch_ratio"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Servo input for roll ([-1..1])
                struct servo_roll_ratio
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/servo_roll_ratio"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The deflection of the joystick axis controlling yaw. Use override_joystick or override_joystick_heading ([-1..1])
                struct yoke_heading_ratio
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/yoke_heading_ratio"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The deflection of the joystick axis controlling pitch. Use override_joystick or override_joystick_pitch ([-1..1])
                struct yoke_pitch_ratio
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/yoke_pitch_ratio"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The deflection of the joystick axis controlling roll. Use override_joystick or override_joystick_roll ([-1..1])
                struct yoke_roll_ratio
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/yoke_roll_ratio"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Legacy - this spelling error is still present for backward compatibility with older plugins. ([-1..1])
                struct yolk_heading_ratio
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/yolk_heading_ratio"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Legacy - this spelling error is still present for ([-1..1])
                struct yolk_pitch_ratio
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/yolk_pitch_ratio"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Legacy - this spelling error is still present for backward compatibility with older plugins. ([-1..1])
                struct yolk_roll_ratio
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/joystick/yolk_roll_ratio"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

            }

            //! multiplayer datarefs
            namespace multiplayer
            {
                //! combat datarefs
                namespace combat
                {
                    //! Is the aircraft friend or foe? (0 = neutral, 1 = friend, 2 = enemy) (enum)
                    struct team_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/combat/team_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                }

                //! controls datarefs
                namespace controls
                {
                    //! Aileron Trim (as ratio of full control surface deflection) -1=left,1=right ([-1..1])
                    struct aileron_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/aileron_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Variable Wing Dihedral ([0..1])
                    struct dihedral_request
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/dihedral_request"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Elevation Trim (as ratio of full control surface deflection) -1=down,1=up ([-1..1])
                    struct elevator_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/elevator_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Requested Mixture Position ([0..1])
                    struct engine_mixture_request
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/engine_mixture_request"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Requested Pitch Position ([0..1])
                    struct engine_pitch_request
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/engine_pitch_request"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Requested Prop Position ([0..1])
                    struct engine_prop_request
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/engine_prop_request"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Requested Throttle Position ([0..1])
                    struct engine_throttle_request
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/engine_throttle_request"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Requested flap deployment ([0..1])
                    struct flap_request
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/flap_request"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! 0 = up, 1 = down (enum)
                    struct gear_request
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/gear_request"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Variable Wing Incidence ([0..1])
                    struct incidence_request
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/incidence_request"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Left Brake (off to max braking) ([0..1])
                    struct l_brake_add
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/l_brake_add"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Parking Brake (off to max braking) ([0..1])
                    struct parking_brake
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/parking_brake"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Right Brake (off to max braking) ([0..1])
                    struct r_brake_add
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/r_brake_add"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Rotor Trim (as ratio of full control surface deflection) -1=nose down,1=nose up ([-1..1])
                    struct rotor_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/rotor_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Rudder Trim (as ratio of full control surface deflection) -1=left,1=right ([-1..1])
                    struct rudder_trim
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/rudder_trim"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Speed Brake ([0..1])
                    struct speed_brake_request
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/speed_brake_request"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Wing Sweep ([0..1])
                    struct sweep__request
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/sweep__request"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! This is how locked the tail-wheel is ... 0 is free castoring, 1 is locked. ([0..1])
                    struct tail_lock_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/tail_lock_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Vectored Thrust ([0..1])
                    struct vector_request
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/vector_request"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! The deflection of the axis controlling yaw. ([-1..1])
                    struct yoke_heading_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/yoke_heading_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! The deflection of the axis controlling pitch. ([-1..1])
                    struct yoke_pitch_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/yoke_pitch_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! The deflection of the axis controlling roll. ([-1..1])
                    struct yoke_roll_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/controls/yoke_roll_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                }

                //! position datarefs
                namespace position
                {
                    //! Plane 10 Beacon Light (bool)
                    struct plane10_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane10_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_el"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane10_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane10_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane10_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 10 Landing Light (bool)
                    struct plane10_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane10_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane10_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 Navigation Light (bool)
                    struct plane10_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 phi (roll) (degrees)
                    struct plane10_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 psi (heading) (degrees)
                    struct plane10_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane10_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane10_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane10_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 Strobe Light (bool)
                    struct plane10_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 Taxi Lights (bool)
                    struct plane10_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 theta (pitch) (degrees)
                    struct plane10_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane10_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 10 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane10_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane10_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane10_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane10_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 x location (meters)
                    struct plane10_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 y location (meters)
                    struct plane10_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane10_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane10_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane10_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 10 z location (meters)
                    struct plane10_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane10_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 Beacon Light (bool)
                    struct plane11_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane11_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_el"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane11_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane11_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane11_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 11 Landing Light (bool)
                    struct plane11_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane11_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane11_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 Navigation Light (bool)
                    struct plane11_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 phi (roll) (degrees)
                    struct plane11_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 psi (heading) (degrees)
                    struct plane11_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane11_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane11_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane11_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 Strobe Light (bool)
                    struct plane11_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 Taxi Lights (bool)
                    struct plane11_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 theta (pitch) (degrees)
                    struct plane11_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane11_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 11 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane11_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane11_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane11_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane11_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 x location (meters)
                    struct plane11_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 y location (meters)
                    struct plane11_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane11_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane11_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane11_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 11 z location (meters)
                    struct plane11_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane11_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 Beacon Light (bool)
                    struct plane12_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane12_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_el"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane12_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane12_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane12_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 12 Landing Light (bool)
                    struct plane12_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane12_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane12_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 Navigation Light (bool)
                    struct plane12_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 phi (roll) (degrees)
                    struct plane12_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 psi (heading) (degrees)
                    struct plane12_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane12_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane12_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane12_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 Strobe Light (bool)
                    struct plane12_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 Taxi Lights (bool)
                    struct plane12_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 theta (pitch) (degrees)
                    struct plane12_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane12_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 12 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane12_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane12_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane12_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane12_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 x location (meters)
                    struct plane12_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 y location (meters)
                    struct plane12_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane12_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane12_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane12_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 12 z location (meters)
                    struct plane12_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane12_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 Beacon Light (bool)
                    struct plane13_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane13_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_el"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane13_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane13_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane13_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 13 Landing Light (bool)
                    struct plane13_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane13_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane13_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 Navigation Light (bool)
                    struct plane13_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 phi (roll) (degrees)
                    struct plane13_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 psi (heading) (degrees)
                    struct plane13_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane13_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane13_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane13_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 Strobe Light (bool)
                    struct plane13_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 Taxi Lights (bool)
                    struct plane13_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 theta (pitch) (degrees)
                    struct plane13_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane13_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 13 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane13_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane13_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane13_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane13_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 x location (meters)
                    struct plane13_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 y location (meters)
                    struct plane13_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane13_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane13_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane13_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 13 z location (meters)
                    struct plane13_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane13_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 Beacon Light (bool)
                    struct plane14_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane14_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_el"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane14_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane14_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane14_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 14 Landing Light (bool)
                    struct plane14_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane14_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane14_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 Navigation Light (bool)
                    struct plane14_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 phi (roll) (degrees)
                    struct plane14_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 psi (heading) (degrees)
                    struct plane14_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane14_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane14_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane14_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 Strobe Light (bool)
                    struct plane14_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 Taxi Lights (bool)
                    struct plane14_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 theta (pitch) (degrees)
                    struct plane14_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane14_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 14 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane14_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane14_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane14_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane14_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 x location (meters)
                    struct plane14_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 y location (meters)
                    struct plane14_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane14_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane14_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane14_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 14 z location (meters)
                    struct plane14_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane14_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 Beacon Light (bool)
                    struct plane15_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane15_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_el"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane15_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane15_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane15_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 15 Landing Light (bool)
                    struct plane15_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane15_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane15_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 Navigation Light (bool)
                    struct plane15_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 phi (roll) (degrees)
                    struct plane15_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 psi (heading) (degrees)
                    struct plane15_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane15_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane15_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane15_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 Strobe Light (bool)
                    struct plane15_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 Taxi Lights (bool)
                    struct plane15_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 theta (pitch) (degrees)
                    struct plane15_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane15_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 15 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane15_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane15_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane15_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane15_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 x location (meters)
                    struct plane15_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 y location (meters)
                    struct plane15_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane15_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane15_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane15_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 15 z location (meters)
                    struct plane15_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane15_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 Beacon Light (bool)
                    struct plane16_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane16_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_el"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane16_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane16_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane16_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 16 Landing Light (bool)
                    struct plane16_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane16_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane16_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 Navigation Light (bool)
                    struct plane16_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 phi (roll) (degrees)
                    struct plane16_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 psi (heading) (degrees)
                    struct plane16_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane16_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane16_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane16_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 Strobe Light (bool)
                    struct plane16_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 Taxi Lights (bool)
                    struct plane16_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 theta (pitch) (degrees)
                    struct plane16_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane16_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 16 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane16_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane16_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane16_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane16_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 x location (meters)
                    struct plane16_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 y location (meters)
                    struct plane16_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane16_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane16_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane16_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 16 z location (meters)
                    struct plane16_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane16_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 Beacon Light (bool)
                    struct plane17_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane17_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_el"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane17_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane17_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane17_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 17 Landing Light (bool)
                    struct plane17_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane17_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane17_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 Navigation Light (bool)
                    struct plane17_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 phi (roll) (degrees)
                    struct plane17_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 psi (heading) (degrees)
                    struct plane17_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane17_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane17_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane17_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 Strobe Light (bool)
                    struct plane17_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 Taxi Lights (bool)
                    struct plane17_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 theta (pitch) (degrees)
                    struct plane17_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane17_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 17 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane17_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane17_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane17_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane17_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 x location (meters)
                    struct plane17_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 y location (meters)
                    struct plane17_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane17_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane17_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane17_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 17 z location (meters)
                    struct plane17_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane17_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 Beacon Light (bool)
                    struct plane18_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane18_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_el"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane18_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane18_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane18_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 18 Landing Light (bool)
                    struct plane18_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane18_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane18_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 Navigation Light (bool)
                    struct plane18_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 phi (roll) (degrees)
                    struct plane18_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 psi (heading) (degrees)
                    struct plane18_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane18_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane18_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane18_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 Strobe Light (bool)
                    struct plane18_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 Taxi Lights (bool)
                    struct plane18_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 theta (pitch) (degrees)
                    struct plane18_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane18_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 18 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane18_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane18_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane18_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane18_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 x location (meters)
                    struct plane18_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 y location (meters)
                    struct plane18_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane18_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane18_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane18_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 18 z location (meters)
                    struct plane18_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane18_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 Beacon Light (bool)
                    struct plane19_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane19_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_el"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane19_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane19_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane19_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 19 Landing Light (bool)
                    struct plane19_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane19_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane19_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 Navigation Light (bool)
                    struct plane19_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 phi (roll) (degrees)
                    struct plane19_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 psi (heading) (degrees)
                    struct plane19_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane19_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane19_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane19_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 Strobe Light (bool)
                    struct plane19_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 Taxi Lights (bool)
                    struct plane19_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 theta (pitch) (degrees)
                    struct plane19_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane19_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 19 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane19_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane19_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane19_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane19_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 x location (meters)
                    struct plane19_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 y location (meters)
                    struct plane19_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane19_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane19_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane19_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 19 z location (meters)
                    struct plane19_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane19_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 Beacon Light (bool)
                    struct plane1_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane1_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_el"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane1_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane1_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane1_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 1 Landing Light (bool)
                    struct plane1_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane1_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane1_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 Navigation Light (bool)
                    struct plane1_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 phi (roll) (degrees)
                    struct plane1_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 psi (heading) (degrees)
                    struct plane1_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane1_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_slat_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane1_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane1_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 Strobe Light (bool)
                    struct plane1_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 Taxi Lights (bool)
                    struct plane1_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 theta (pitch) (degrees)
                    struct plane1_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane1_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 1 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane1_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane1_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane1_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane1_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 x location (meters)
                    struct plane1_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 y location (meters)
                    struct plane1_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane1_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane1_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane1_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 z location (meters)
                    struct plane1_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane1_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 Beacon Light (bool)
                    struct plane2_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane2_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_el"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane2_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane2_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane2_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 2 Landing Light (bool)
                    struct plane2_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane2_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane2_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 Navigation Light (bool)
                    struct plane2_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 phi (roll) (degrees)
                    struct plane2_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 psi (heading) (degrees)
                    struct plane2_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane2_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane2_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane2_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 Strobe Light (bool)
                    struct plane2_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 Taxi Lights (bool)
                    struct plane2_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 theta (pitch) (degrees)
                    struct plane2_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane2_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 2 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane2_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane2_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane2_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane2_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 x location (meters)
                    struct plane2_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 y location (meters)
                    struct plane2_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane2_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane2_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane2_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 2 z location (meters)
                    struct plane2_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane2_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 Beacon Light (bool)
                    struct plane3_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane3_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_el"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane3_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane3_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane3_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 3 Landing Light (bool)
                    struct plane3_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane3_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane3_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 Navigation Light (bool)
                    struct plane3_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 phi (roll) (degrees)
                    struct plane3_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 psi (heading) (degrees)
                    struct plane3_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane3_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane3_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane3_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 Strobe Light (bool)
                    struct plane3_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 Taxi Lights (bool)
                    struct plane3_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 theta (pitch) (degrees)
                    struct plane3_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane3_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 3 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane3_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane3_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane3_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane3_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 x location (meters)
                    struct plane3_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 y location (meters)
                    struct plane3_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane3_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane3_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane3_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 3 z location (meters)
                    struct plane3_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane3_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 Beacon Light (bool)
                    struct plane4_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane4_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_el"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane4_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane4_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane4_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 4 Landing Light (bool)
                    struct plane4_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane4_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane4_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 Navigation Light (bool)
                    struct plane4_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 phi (roll) (degrees)
                    struct plane4_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 psi (heading) (degrees)
                    struct plane4_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane4_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane4_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane4_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 Strobe Light (bool)
                    struct plane4_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 Taxi Lights (bool)
                    struct plane4_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 theta (pitch) (degrees)
                    struct plane4_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane4_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 4 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane4_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane4_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane4_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane4_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 x location (meters)
                    struct plane4_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 y location (meters)
                    struct plane4_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane4_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane4_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane4_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 4 z location (meters)
                    struct plane4_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane4_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 Beacon Light (bool)
                    struct plane5_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane5_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_el"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane5_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane5_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane5_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 5 Landing Light (bool)
                    struct plane5_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane5_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane5_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 Navigation Light (bool)
                    struct plane5_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 phi (roll) (degrees)
                    struct plane5_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 psi (heading) (degrees)
                    struct plane5_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane5_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane5_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane5_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 Strobe Light (bool)
                    struct plane5_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 Taxi Lights (bool)
                    struct plane5_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 theta (pitch) (degrees)
                    struct plane5_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane5_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 5 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane5_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane5_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane5_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane5_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 x location (meters)
                    struct plane5_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 y location (meters)
                    struct plane5_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane5_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane5_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane5_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 5 z location (meters)
                    struct plane5_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane5_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 Beacon Light (bool)
                    struct plane6_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane6_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_el"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane6_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane6_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane6_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 6 Landing Light (bool)
                    struct plane6_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane6_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane6_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 Navigation Light (bool)
                    struct plane6_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 phi (roll) (degrees)
                    struct plane6_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 psi (heading) (degrees)
                    struct plane6_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane6_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane6_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane6_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 Strobe Light (bool)
                    struct plane6_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 Taxi Lights (bool)
                    struct plane6_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 theta (pitch) (degrees)
                    struct plane6_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane6_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 6 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane6_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane6_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane6_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane6_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 x location (meters)
                    struct plane6_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 y location (meters)
                    struct plane6_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane6_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane6_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane6_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 6 z location (meters)
                    struct plane6_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane6_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 Beacon Light (bool)
                    struct plane7_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane7_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_el"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane7_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane7_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane7_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 7 Landing Light (bool)
                    struct plane7_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane7_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane7_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 Navigation Light (bool)
                    struct plane7_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 phi (roll) (degrees)
                    struct plane7_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 psi (heading) (degrees)
                    struct plane7_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane7_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane7_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane7_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 Strobe Light (bool)
                    struct plane7_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 Taxi Lights (bool)
                    struct plane7_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 theta (pitch) (degrees)
                    struct plane7_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane7_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 7 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane7_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane7_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane7_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane7_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 x location (meters)
                    struct plane7_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 y location (meters)
                    struct plane7_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane7_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane7_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane7_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 7 z location (meters)
                    struct plane7_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane7_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 Beacon Light (bool)
                    struct plane8_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane8_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_el"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane8_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane8_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane8_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 8 Landing Light (bool)
                    struct plane8_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane8_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane8_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 Navigation Light (bool)
                    struct plane8_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 phi (roll) (degrees)
                    struct plane8_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 psi (heading) (degrees)
                    struct plane8_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane8_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane8_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane8_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 Strobe Light (bool)
                    struct plane8_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 Taxi Lights (bool)
                    struct plane8_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 theta (pitch) (degrees)
                    struct plane8_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane8_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 8 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane8_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane8_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane8_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane8_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 x location (meters)
                    struct plane8_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 y location (meters)
                    struct plane8_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane8_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane8_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane8_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 8 z location (meters)
                    struct plane8_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane8_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 Beacon Light (bool)
                    struct plane9_beacon_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_beacon_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position then these will not be accurate unless the plane updates them. (meters)
                    struct plane9_el
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_el"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane9_flap_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_flap_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 1 flap lowering 0 = clean, 1 = max flaps (ratio)
                    struct plane9_flap_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_flap_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 gear deployment for 6 gear. 0 = up, 1 = down (ratio)
                    struct plane9_gear_deploy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_gear_deploy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Plane 9 Landing Light (bool)
                    struct plane9_landing_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_landing_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 Lat lon and elevation.  NOTE: your plugin must set the plane's (degs)
                    struct plane9_lat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_lat"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! position by writing x, y and z.  Also if another plugin is updating plane (degs)
                    struct plane9_lon
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_lon"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 Navigation Light (bool)
                    struct plane9_nav_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_nav_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 phi (roll) (degrees)
                    struct plane9_phi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_phi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 psi (heading) (degrees)
                    struct plane9_psi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_psi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 slat deployment ratio 0 = clean, 1 = max slats (ratio)
                    struct plane9_slat_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_sla1_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 speed brake ratio (0 = clean, 1 = max speed brakes) (ratio)
                    struct plane9_speedbrake_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_speedbrake_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 spoiler ratio (0 = clean, 1 = max spoilers) (ratio)
                    struct plane9_spoiler_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_spoiler_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 Strobe Light (bool)
                    struct plane9_strobe_lights_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_strobe_lights_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 Taxi Lights (bool)
                    struct plane9_taxi_light_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_taxi_light_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 theta (pitch) (degrees)
                    struct plane9_the
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_the"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 Percent of max throttle per 8 engines (0 = none, 1 = full fwd, -1 = full reverse) (ratio)
                    struct plane9_throttle
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_throttle"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Plane 9 cartesian velocities.  These may not be accurate if another plugin (m/s)
                    struct plane9_v_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_v_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! is controlling the plane andn ot updating this data.  You cannot use these to (m/s)
                    struct plane9_v_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_v_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! manipulate the plane. (m/s)
                    struct plane9_v_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_v_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 wing sweep, 0 = normal, 1 = most sweep (ratio)
                    struct plane9_wing_sweep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_wing_sweep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 x location (meters)
                    struct plane9_x
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_x"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 y location (meters)
                    struct plane9_y
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_y"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio) (ratio)
                    struct plane9_yolk_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_yolk_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio) (ratio)
                    struct plane9_yolk_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_yolk_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio) (ratio)
                    struct plane9_yolk_yaw
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_yolk_yaw"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Plane 9 z location (meters)
                    struct plane9_z
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/multiplayer/position/plane9_z"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = double;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

            }

            //! network datarefs
            namespace network
            {
                //! dataout datarefs
                namespace dataout
                {
                    //! Enable data output of this data ref to disk file (boolean)
                    struct data_to_disk
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/network/dataout/data_to_disk"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 200;
                    };

                    //! Enable data output of this data ref to graph (boolean)
                    struct data_to_graph
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/network/dataout/data_to_graph"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 200;
                    };

                    //! Enable data output of this data ref to internet (boolean)
                    struct data_to_internet
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/network/dataout/data_to_internet"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 200;
                    };

                    //! Enable data output of this data ref to screen (boolean)
                    struct data_to_screen
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/network/dataout/data_to_screen"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 200;
                    };

                    //! Dump extra prop data to screen (boolean)
                    struct dump_parts_props
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/network/dataout/dump_parts_props"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Dump vertical stabilizer prop data to screen (boolean)
                    struct dump_parts_vstabs
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/network/dataout/dump_parts_vstabs"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Dump wing prop data to screen (boolean)
                    struct dump_parts_wings
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/network/dataout/dump_parts_wings"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! IP addresses of external visuals (or 0 if not in use in v10).  Dim 8 in v9. (ip)
                    struct external_visual_ip
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/network/dataout/external_visual_ip"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Is this machine running as an external visual for another X-Plane machine. (boolean)
                    struct is_external_visual
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/network/dataout/is_external_visual"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is this machine part of an x-plane built-in multiplayer session? (boolean)
                    struct is_multiplayer_session
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/network/dataout/is_multiplayer_session"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! IP addresses of multiplayer players (or 0 if not in used in v10) (ip)
                    struct multiplayer_ip
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/network/dataout/multiplayer_ip"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 19;
                    };

                    //! Rate to send data over UDP at (hz)
                    struct network_data_rate
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/network/dataout/network_data_rate"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! True if this remote visual tracks the master's view changes (boolean)
                    struct track_external_visual
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/network/dataout/track_external_visual"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                }

                //! misc datarefs
                namespace misc
                {
                    //! The current elapsed time synched across the network (seconds)
                    struct network_time_sec
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/network/misc/network_time_sec"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Has x-plane already inited Open Transport?  YOU SHOULD NEVER USE THIS DATAREF!!! (boolean)
                    struct opentransport_inited
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/network/misc/opentransport_inited"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

            }

            //! operation datarefs
            namespace operation
            {
                //! failures datarefs
                namespace failures
                {
                    //! Enable random failures basde on mean time between failures (boolean)
                    struct enable_random_failures
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/enable_random_failures"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Enable random failures based on mean time between failures (boolean)
                    struct enable_random_falures
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/enable_random_falures"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 564 separate failure codes [was 137] (enum)
                    struct failures
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/failures"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 564;
                    };

                    //! Hydraulic pressure ratio (ratio)
                    struct hydraulic_pressure_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/hydraulic_pressure_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic pressure ratio (ratio)
                    struct hydraulic_pressure_ratio2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/hydraulic_pressure_ratio2"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Mean time between failures (hours)
                    struct mean_time_between_failure_hrs
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/mean_time_between_failure_hrs"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Oil power or thrust ratio (ratio)
                    struct oil_power_thrust_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/oil_power_thrust_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 8;
                    };

                    //! Ram air turbine is on? (boolean)
                    struct ram_air_turbine_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/ram_air_turbine_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! AOA (failure_enum)
                    struct rel_AOA
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_AOA"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! APU is not providing bleed air for engine start or pressurization (failure_enum)
                    struct rel_APU_press
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_APU_press"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - cht engine 1 (failure_enum)
                    struct rel_CHT_ind_0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_CHT_ind_0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - cht engine 2 (failure_enum)
                    struct rel_CHT_ind_1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_CHT_ind_1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - egt engine 1 (failure_enum)
                    struct rel_EGT_ind_0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_EGT_ind_0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - egt engine 2 (failure_enum)
                    struct rel_EGT_ind_1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_EGT_ind_1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - epr engine 1 (failure_enum)
                    struct rel_EPRind0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_EPRind0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - epr engine 2 (failure_enum)
                    struct rel_EPRind1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_EPRind1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - ff engine 1 (failure_enum)
                    struct rel_FF_ind0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_FF_ind0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - ff engine 2 (failure_enum)
                    struct rel_FF_ind1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_FF_ind1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! air conditioning failed (failure_enum)
                    struct rel_HVAC
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_HVAC"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - itt engine 1 (failure_enum)
                    struct rel_ITTind0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ITTind0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - itt engine 2 (failure_enum)
                    struct rel_ITTind1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ITTind1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Left flap remove (failure_enum)
                    struct rel_L_flp_off
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_L_flp_off"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - mp engine 1 (failure_enum)
                    struct rel_MP_ind_0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_MP_ind_0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - mp engine 2 (failure_enum)
                    struct rel_MP_ind_1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_MP_ind_1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - n1 engine 1 (failure_enum)
                    struct rel_N1_ind0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_N1_ind0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - n1 engine 2 (failure_enum)
                    struct rel_N1_ind1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_N1_ind1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - n2 engine 1 (failure_enum)
                    struct rel_N2_ind0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_N2_ind0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - n2 engine 2 (failure_enum)
                    struct rel_N2_ind1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_N2_ind1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - rpm engine 1 (failure_enum)
                    struct rel_RPM_ind_0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_RPM_ind_0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - rpm engine 2 (failure_enum)
                    struct rel_RPM_ind_1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_RPM_ind_1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Right flap remove (failure_enum)
                    struct rel_R_flp_off
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_R_flp_off"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - trq engine 1 (failure_enum)
                    struct rel_TRQind0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_TRQind0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - trq engine 2 (failure_enum)
                    struct rel_TRQind1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_TRQind1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! air data computer (failure_enum)
                    struct rel_adc_comp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_adc_comp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ADF 1 (only one ADF failure in 830!) (failure_enum)
                    struct rel_adf1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_adf1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! ADF 2 (failure_enum)
                    struct rel_adf2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_adf2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Afterburners - engine 1 (failure_enum)
                    struct rel_aftbur0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_aftbur0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Afterburners - engine 2 (failure_enum)
                    struct rel_aftbur1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_aftbur1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Afterburners - engine 3 (failure_enum)
                    struct rel_aftbur2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_aftbur2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Afterburners - engine 4 (failure_enum)
                    struct rel_aftbur3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_aftbur3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Afterburners - engine 5 (failure_enum)
                    struct rel_aftbur4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_aftbur4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Afterburners - engine 6 (failure_enum)
                    struct rel_aftbur5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_aftbur5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Afterburners - engine 7 (failure_enum)
                    struct rel_aftbur6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_aftbur6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Afterburners - engine 8 (failure_enum)
                    struct rel_aftbur7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_aftbur7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Pitch Trim Runaway (failure_enum)
                    struct rel_ail_trim_run
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ail_trim_run"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Airflow restricted - Engine 1 (failure_enum)
                    struct rel_airres0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_airres0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Airflow restricted - Engine 2 (failure_enum)
                    struct rel_airres1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_airres1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Airflow restricted - Engine 3 (failure_enum)
                    struct rel_airres2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_airres2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Airflow restricted - Engine 4 (failure_enum)
                    struct rel_airres3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_airres3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Airflow restricted - Engine 5 (failure_enum)
                    struct rel_airres4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_airres4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Airflow restricted - Engine 6 (failure_enum)
                    struct rel_airres5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_airres5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Airflow restricted - Engine 7 (failure_enum)
                    struct rel_airres6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_airres6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Airflow restricted - Engine 8 (failure_enum)
                    struct rel_airres7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_airres7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Anti-ice (failure_enum)
                    struct rel_antice
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_antice"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! AutoPilot (Runaway!!!) (failure_enum)
                    struct rel_auto_runaway
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_auto_runaway"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! AutoPilot (Servos) (failure_enum)
                    struct rel_auto_servos
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_auto_servos"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Battery 0 voltage hi (failure_enum)
                    struct rel_bat0_hi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_bat0_hi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Battery 0 voltage low (failure_enum)
                    struct rel_bat0_lo
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_bat0_lo"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Battery 1 voltage hi (failure_enum)
                    struct rel_bat1_hi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_bat1_hi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Battery 1 voltage low (failure_enum)
                    struct rel_bat1_lo
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_bat1_lo"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Battery 1 (failure_enum)
                    struct rel_batter0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_batter0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Battery 2 (failure_enum)
                    struct rel_batter1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_batter1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Battery 3 (failure_enum)
                    struct rel_batter2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_batter2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Battery 4 (failure_enum)
                    struct rel_batter3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_batter3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Battery 5 (failure_enum)
                    struct rel_batter4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_batter4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Battery 6 (failure_enum)
                    struct rel_batter5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_batter5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Battery 7 (failure_enum)
                    struct rel_batter6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_batter6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Battery 8 (failure_enum)
                    struct rel_batter7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_batter7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Bird has hit the plane (failure_enum)
                    struct rel_bird_strike
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_bird_strike"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The left engine is not providing enough pressure (failure_enum)
                    struct rel_bleed_air_lft
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_bleed_air_lft"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The right engine is not providing enough pressure (failure_enum)
                    struct rel_bleed_air_rgt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_bleed_air_rgt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Induce dusty brown-out (failure_enum)
                    struct rel_brown_out
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_brown_out"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Chip Detected - engine 1 (failure_enum)
                    struct rel_chipde0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_chipde0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Chip Detected - engine 2 (failure_enum)
                    struct rel_chipde1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_chipde1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Chip Detected - engine 3 (failure_enum)
                    struct rel_chipde2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_chipde2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Chip Detected - engine 4 (failure_enum)
                    struct rel_chipde3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_chipde3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Chip Detected - engine 5 (failure_enum)
                    struct rel_chipde4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_chipde4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Chip Detected - engine 6 (failure_enum)
                    struct rel_chipde5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_chipde5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Chip Detected - engine 7 (failure_enum)
                    struct rel_chipde6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_chipde6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Chip Detected - engine 8 (failure_enum)
                    struct rel_chipde7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_chipde7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Cockpit Lights (failure_enum)
                    struct rel_clights
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_clights"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hung start (clogged nozzles) - Engine 1 (failure_enum)
                    struct rel_clonoz0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_clonoz0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hung start (clogged nozzles) - Engine 2 (failure_enum)
                    struct rel_clonoz1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_clonoz1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hung start (clogged nozzles) - Engine 3 (failure_enum)
                    struct rel_clonoz2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_clonoz2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hung start (clogged nozzles) - Engine 4 (failure_enum)
                    struct rel_clonoz3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_clonoz3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hung start (clogged nozzles) - Engine 5 (failure_enum)
                    struct rel_clonoz4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_clonoz4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hung start (clogged nozzles) - Engine 6 (failure_enum)
                    struct rel_clonoz5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_clonoz5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hung start (clogged nozzles) - Engine 7 (failure_enum)
                    struct rel_clonoz6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_clonoz6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hung start (clogged nozzles) - Engine 8 (failure_enum)
                    struct rel_clonoz7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_clonoz7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing gear 1 gear collapse (failure_enum)
                    struct rel_collapse1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_collapse1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing gear 10 gear collapse (failure_enum)
                    struct rel_collapse10
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_collapse10"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing gear 2 gear collapse (failure_enum)
                    struct rel_collapse2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_collapse2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing gear 3 gear collapse (failure_enum)
                    struct rel_collapse3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_collapse3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing gear 4 gear collapse (failure_enum)
                    struct rel_collapse4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_collapse4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing gear 5 gear collapse (failure_enum)
                    struct rel_collapse5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_collapse5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing gear 6 gear collapse (failure_enum)
                    struct rel_collapse6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_collapse6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing gear 7 gear collapse (failure_enum)
                    struct rel_collapse7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_collapse7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing gear 8 gear collapse (failure_enum)
                    struct rel_collapse8
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_collapse8"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing gear 9 gear collapse (failure_enum)
                    struct rel_collapse9
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_collapse9"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Com-1 radio (failure_enum)
                    struct rel_com1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_com1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Com-2 radio (failure_enum)
                    struct rel_com2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_com2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Compressor Stall - engine 1 (failure_enum)
                    struct rel_comsta0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_comsta0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Compressor Stall - engine 2 (failure_enum)
                    struct rel_comsta1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_comsta1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Compressor Stall - engine 3 (failure_enum)
                    struct rel_comsta2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_comsta2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Compressor Stall - engine 4 (failure_enum)
                    struct rel_comsta3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_comsta3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Compressor Stall - engine 5 (failure_enum)
                    struct rel_comsta4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_comsta4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Compressor Stall - engine 6 (failure_enum)
                    struct rel_comsta5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_comsta5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Compressor Stall - engine 7 (failure_enum)
                    struct rel_comsta6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_comsta6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Compressor Stall - engine 8 (failure_enum)
                    struct rel_comsta7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_comsta7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Controls locked (failure_enum)
                    struct rel_conlock
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_conlock"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Artificial Horizon (Copilot) (failure_enum)
                    struct rel_cop_ahz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_cop_ahz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Altimeter (Copilot) (failure_enum)
                    struct rel_cop_alt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_cop_alt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Airspeed Indicator (Copilot) (failure_enum)
                    struct rel_cop_asi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_cop_asi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Directional Gyro (Copilot) (failure_enum)
                    struct rel_cop_dgy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_cop_dgy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Turn indicator (Copilot) (failure_enum)
                    struct rel_cop_tsi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_cop_tsi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vertical Velocity Indicator (Copilot) (failure_enum)
                    struct rel_cop_vvi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_cop_vvi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! catastrophic decompression - yer dead (failure_enum)
                    struct rel_depres_fast
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_depres_fast"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Slow cabin leak - descend or black out (failure_enum)
                    struct rel_depres_slow
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_depres_slow"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! DME (failure_enum)
                    struct rel_dme
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_dme"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Door Open (failure_enum)
                    struct rel_door_open
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_door_open"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Primary EFIS (failure_enum)
                    struct rel_efis_1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_efis_1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Secondary EFIS (failure_enum)
                    struct rel_efis_2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_efis_2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump - engine 1 (electric driven) (failure_enum)
                    struct rel_ele_fuepmp0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ele_fuepmp0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump - engine 2 (electric driven) (failure_enum)
                    struct rel_ele_fuepmp1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ele_fuepmp1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump - engine 3 (electric driven) (failure_enum)
                    struct rel_ele_fuepmp2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ele_fuepmp2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump - engine 4 (electric driven) (failure_enum)
                    struct rel_ele_fuepmp3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ele_fuepmp3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump - engine 5 (electric driven) (failure_enum)
                    struct rel_ele_fuepmp4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ele_fuepmp4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump - engine 6 (electric driven) (failure_enum)
                    struct rel_ele_fuepmp5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ele_fuepmp5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump - engine 7 (electric driven) (failure_enum)
                    struct rel_ele_fuepmp6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ele_fuepmp6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump - engine 8 (electric driven) (failure_enum)
                    struct rel_ele_fuepmp7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ele_fuepmp7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Electric gyro system 1 - gyro motor Failure (failure_enum)
                    struct rel_elec_gyr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_elec_gyr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Electric gyro system 2 - gyro motor Failure (failure_enum)
                    struct rel_elec_gyr2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_elec_gyr2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Elevator Trim Runaway (failure_enum)
                    struct rel_elv_trim_run
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_elv_trim_run"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump Low Pressure - engine 1 (engine driven) (failure_enum)
                    struct rel_eng_lo0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_eng_lo0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump Low Pressure - engine 2 (engine driven) (failure_enum)
                    struct rel_eng_lo1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_eng_lo1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump Low Pressure - engine 3 (engine driven) (failure_enum)
                    struct rel_eng_lo2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_eng_lo2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump Low Pressure - engine 4 (engine driven) (failure_enum)
                    struct rel_eng_lo3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_eng_lo3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump Low Pressure - engine 5 (engine driven) (failure_enum)
                    struct rel_eng_lo4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_eng_lo4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump Low Pressure - engine 6 (engine driven) (failure_enum)
                    struct rel_eng_lo5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_eng_lo5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump Low Pressure - engine 7 (engine driven) (failure_enum)
                    struct rel_eng_lo6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_eng_lo6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump Low Pressure - engine 8 (engine driven) (failure_enum)
                    struct rel_eng_lo7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_eng_lo7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 1 loss of power without smoke (failure_enum)
                    struct rel_engfai0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfai0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 2 (failure_enum)
                    struct rel_engfai1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfai1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 3 (failure_enum)
                    struct rel_engfai2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfai2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 4 (failure_enum)
                    struct rel_engfai3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfai3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 5 (failure_enum)
                    struct rel_engfai4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfai4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 6 (failure_enum)
                    struct rel_engfai5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfai5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 7 (failure_enum)
                    struct rel_engfai6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfai6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 8 (failure_enum)
                    struct rel_engfai7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfai7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 1 Fire (failure_enum)
                    struct rel_engfir0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfir0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 2 Fire (failure_enum)
                    struct rel_engfir1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfir1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 3 Fire (failure_enum)
                    struct rel_engfir2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfir2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 4 Fire (failure_enum)
                    struct rel_engfir3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfir3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 5 Fire (failure_enum)
                    struct rel_engfir4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfir4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 6 Fire (failure_enum)
                    struct rel_engfir5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfir5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 7 Fire (failure_enum)
                    struct rel_engfir6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfir6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 8 Fire (failure_enum)
                    struct rel_engfir7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfir7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 1 Flameout (failure_enum)
                    struct rel_engfla0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfla0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 2 Flameout (failure_enum)
                    struct rel_engfla1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfla1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 3 Flameout (failure_enum)
                    struct rel_engfla2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfla2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 4 Flameout (failure_enum)
                    struct rel_engfla3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfla3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 5 Flameout (failure_enum)
                    struct rel_engfla4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfla4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 6 Flameout (failure_enum)
                    struct rel_engfla5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfla5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 7 Flameout (failure_enum)
                    struct rel_engfla6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfla6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Failure - engine 8 Flameout (failure_enum)
                    struct rel_engfla7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engfla7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Separation - engine 1 (failure_enum)
                    struct rel_engsep0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engsep0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Separation - engine 2 (failure_enum)
                    struct rel_engsep1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engsep1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Separation - engine 3 (failure_enum)
                    struct rel_engsep2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engsep2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Separation - engine 4 (failure_enum)
                    struct rel_engsep3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engsep3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Separation - engine 5 (failure_enum)
                    struct rel_engsep4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engsep4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Separation - engine 6 (failure_enum)
                    struct rel_engsep5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engsep5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Separation - engine 7 (failure_enum)
                    struct rel_engsep6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engsep6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Separation - engine 8 (failure_enum)
                    struct rel_engsep7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_engsep7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Electrical System (Bus 1) (failure_enum)
                    struct rel_esys
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_esys"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Electrical System (Bus 2) (failure_enum)
                    struct rel_esys2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_esys2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Electrical System (Bus 3) (failure_enum)
                    struct rel_esys3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_esys3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Electrical System (Bus 4) (failure_enum)
                    struct rel_esys4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_esys4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Electrical System (Bus 5) (failure_enum)
                    struct rel_esys5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_esys5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Electrical System (Bus 6) (failure_enum)
                    struct rel_esys6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_esys6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! External power is on (failure_enum)
                    struct rel_ex_power_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ex_power_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fadec - engine 1 (failure_enum)
                    struct rel_fadec_0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fadec_0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fadec - engine 2 (failure_enum)
                    struct rel_fadec_1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fadec_1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fadec - engine 3 (failure_enum)
                    struct rel_fadec_2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fadec_2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fadec - engine 4 (failure_enum)
                    struct rel_fadec_3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fadec_3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fadec - engine 5 (failure_enum)
                    struct rel_fadec_4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fadec_4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fadec - engine 6 (failure_enum)
                    struct rel_fadec_5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fadec_5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fadec - engine 7 (failure_enum)
                    struct rel_fadec_6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fadec_6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fadec - engine 8 (failure_enum)
                    struct rel_fadec_7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fadec_7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Left flap activate (failure_enum)
                    struct rel_fc_L_flp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fc_L_flp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Right Flap activate (failure_enum)
                    struct rel_fc_R_flp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fc_R_flp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Roll left control (failure_enum)
                    struct rel_fc_ail_L
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fc_ail_L"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Roll Right Control (failure_enum)
                    struct rel_fc_ail_R
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fc_ail_R"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Pitch Down Control (failure_enum)
                    struct rel_fc_elv_D
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fc_elv_D"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Pitch Up Control (failure_enum)
                    struct rel_fc_elv_U
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fc_elv_U"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Yaw Left Control (failure_enum)
                    struct rel_fc_rud_L
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fc_rud_L"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Yaw Right control (failure_enum)
                    struct rel_fc_rud_R
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fc_rud_R"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Slats (failure_enum)
                    struct rel_fc_slt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fc_slt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Throttle failure at current position (failure_enum)
                    struct rel_fc_thr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fc_thr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Autofeather system inop (failure_enum)
                    struct rel_feather
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_feather"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Flap Actuator (failure_enum)
                    struct rel_flap_act
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_flap_act"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - Fuel Pressure 1 (failure_enum)
                    struct rel_fp_ind_0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fp_ind_0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - Fuel Pressure 2 (failure_enum)
                    struct rel_fp_ind_1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fp_ind_1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel tank filter is blocked - tank 1 (failure_enum)
                    struct rel_fuel_block0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuel_block0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel tank filter is blocked - tank 2 (failure_enum)
                    struct rel_fuel_block1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuel_block1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel tank filter is blocked - tank 3 (failure_enum)
                    struct rel_fuel_block2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuel_block2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel tank filter is blocked - tank 4 (failure_enum)
                    struct rel_fuel_block3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuel_block3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel tank filter is blocked - tank 5 (failure_enum)
                    struct rel_fuel_block4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuel_block4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel tank filter is blocked - tank 6 (failure_enum)
                    struct rel_fuel_block5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuel_block5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel tank filter is blocked - tank 7 (failure_enum)
                    struct rel_fuel_block6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuel_block6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel tank filter is blocked - tank 8 (failure_enum)
                    struct rel_fuel_block7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuel_block7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel tank filter is blocked - tank 9 (failure_enum)
                    struct rel_fuel_block8
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuel_block8"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wrong fuel type - JetA for props or Avgas for jets! (failure_enum)
                    struct rel_fuel_type
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuel_type"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Water in fuel (failure_enum)
                    struct rel_fuel_water
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuel_water"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Cap left off (failure_enum)
                    struct rel_fuelcap
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuelcap"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Flow Fluctuation - engine 1 (failure_enum)
                    struct rel_fuelfl0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuelfl0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Flow Fluctuation - engine 2 (failure_enum)
                    struct rel_fuelfl1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuelfl1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Flow Fluctuation - engine 3 (failure_enum)
                    struct rel_fuelfl2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuelfl2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Flow Fluctuation - engine 4 (failure_enum)
                    struct rel_fuelfl3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuelfl3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Flow Fluctuation - engine 5 (failure_enum)
                    struct rel_fuelfl4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuelfl4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Flow Fluctuation - engine 6 (failure_enum)
                    struct rel_fuelfl5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuelfl5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Flow Fluctuation - engine 7 (failure_enum)
                    struct rel_fuelfl6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuelfl6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Flow Fluctuation - engine 8 (failure_enum)
                    struct rel_fuelfl7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuelfl7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump Inop - engine 1 (engine driven) (failure_enum)
                    struct rel_fuepmp0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuepmp0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump Inop - engine 2 (engine driven) (failure_enum)
                    struct rel_fuepmp1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuepmp1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump Inop - engine 3 (engine driven) (failure_enum)
                    struct rel_fuepmp2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuepmp2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump Inop - engine 4 (engine driven) (failure_enum)
                    struct rel_fuepmp3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuepmp3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump Inop - engine 5 (engine driven) (failure_enum)
                    struct rel_fuepmp4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuepmp4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump Inop - engine 6 (engine driven) (failure_enum)
                    struct rel_fuepmp5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuepmp5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump Inop - engine 7 (engine driven) (failure_enum)
                    struct rel_fuepmp6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuepmp6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Fuel Pump Inop - engine 8 (engine driven) (failure_enum)
                    struct rel_fuepmp7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_fuepmp7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! G430 GPS 1 Inop (failure_enum)
                    struct rel_g430_gps1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g430_gps1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! G430 GPS 2 Inop (failure_enum)
                    struct rel_g430_gps2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g430_gps2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! G430 Nav/Com Tuner 1 Inop (failure_enum)
                    struct rel_g430_rad1_tune
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g430_rad1_tune"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! G430 Nav/Com Tuner 2 Inop (failure_enum)
                    struct rel_g430_rad2_tune
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g430_rad2_tune"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! altimeter (failure_enum)
                    struct rel_g_alt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_alt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! AHRS (failure_enum)
                    struct rel_g_arthorz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_arthorz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! airspeed (failure_enum)
                    struct rel_g_asi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_asi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! battery voltage 1 (failure_enum)
                    struct rel_g_bat1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_bat1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! battery voltage 2 (failure_enum)
                    struct rel_g_bat2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_bat2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! bus voltage 1 (failure_enum)
                    struct rel_g_bus1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_bus1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! bus voltage 2 (failure_enum)
                    struct rel_g_bus2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_bus2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! com radio 1 - removed from 10.00 - 10.36, compatibility only in 10.40 - DO NOT USE - use rel_com1 (failure_enum)
                    struct rel_g_comrad1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_comrad1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! com radio 2 - removed from 10.00 - 10.36, compatibility only in 10.40 - DO NOT USE - use rel_com2 (failure_enum)
                    struct rel_g_comrad2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_comrad2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! fuel quantity (failure_enum)
                    struct rel_g_fuel
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_fuel"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! gea (failure_enum)
                    struct rel_g_gea
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_gea"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! generator amperage 1 (failure_enum)
                    struct rel_g_gen1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_gen1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! generator amperage 2 (failure_enum)
                    struct rel_g_gen2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_gen2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! GIA 1 (failure_enum)
                    struct rel_g_gia1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_gia1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! GIA 2 (failure_enum)
                    struct rel_g_gia2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_gia2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! magnetometer (failure_enum)
                    struct rel_g_magmtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_magmtr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! MFD screen failure (failure_enum)
                    struct rel_g_mfd
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_mfd"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! nav radio 1 - removed from 10.00 - 10.36, compatibility only in 10.40 - DO NOT USE - use rel_nav1 (failure_enum)
                    struct rel_g_navrad1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_navrad1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! nav radio 2 - removed from 10.00 - 10.36, compatibility only in 10.40 - DO NOT USE - use rel_nav2 (failure_enum)
                    struct rel_g_navrad2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_navrad2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! OAT (failure_enum)
                    struct rel_g_oat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_oat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! PFD screen failure (failure_enum)
                    struct rel_g_pfd
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_pfd"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! PFD2 screen failure (failure_enum)
                    struct rel_g_pfd2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_pfd2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! vvi (failure_enum)
                    struct rel_g_vvi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_vvi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! transponder removed from 10.00 - 10.36, compatibility only in 10.40+ - DO NOT USE - use rel_xpndr (failure_enum)
                    struct rel_g_xpndr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_g_xpndr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing Gear actuator (failure_enum)
                    struct rel_gear_act
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_gear_act"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing Gear indicator (failure_enum)
                    struct rel_gear_ind
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_gear_ind"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! gear warning audio is broken (failure_enum)
                    struct rel_gear_warning
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_gear_warning"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Generator 0 voltage hi (failure_enum)
                    struct rel_gen0_hi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_gen0_hi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Generator 0 voltage low (failure_enum)
                    struct rel_gen0_lo
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_gen0_lo"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Generator 1 voltage hi (failure_enum)
                    struct rel_gen1_hi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_gen1_hi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Generator 1 voltage low (failure_enum)
                    struct rel_gen1_lo
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_gen1_lo"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! General avionics bus failure (failure_enum)
                    struct rel_gen_avio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_gen_avio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! General electrical failure (failure_enum)
                    struct rel_gen_esys
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_gen_esys"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Generator - engine 1 (failure_enum)
                    struct rel_genera0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_genera0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Generator - engine 2 (failure_enum)
                    struct rel_genera1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_genera1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Generator - engine 3 (failure_enum)
                    struct rel_genera2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_genera2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Generator - engine 4 (failure_enum)
                    struct rel_genera3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_genera3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Generator - engine 5 (failure_enum)
                    struct rel_genera4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_genera4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Generator - engine 6 (failure_enum)
                    struct rel_genera5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_genera5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Generator - engine 7 (failure_enum)
                    struct rel_genera6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_genera6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Generator - engine 8 (failure_enum)
                    struct rel_genera7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_genera7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Glide Slope (failure_enum)
                    struct rel_gls
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_gls"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Governor throttle fail - engine 1 (failure_enum)
                    struct rel_govnr_0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_govnr_0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Governor throttle fail - engine 2 (failure_enum)
                    struct rel_govnr_1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_govnr_1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Governor throttle fail - engine 3 (failure_enum)
                    struct rel_govnr_2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_govnr_2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Governor throttle fail - engine 4 (failure_enum)
                    struct rel_govnr_3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_govnr_3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Governor throttle fail - engine 5 (failure_enum)
                    struct rel_govnr_4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_govnr_4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Governor throttle fail - engine 6 (failure_enum)
                    struct rel_govnr_5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_govnr_5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Governor throttle fail - engine 7 (failure_enum)
                    struct rel_govnr_6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_govnr_6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Governor throttle fail - engine 8 (failure_enum)
                    struct rel_govnr_7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_govnr_7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! WAAS GPS receiver (failure_enum)
                    struct rel_gp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_gp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! GPS (failure_enum)
                    struct rel_gps
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_gps"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! GPS (failure_enum)
                    struct rel_gps2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_gps2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hot Start - engine 0 (failure_enum)
                    struct rel_hotsta0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hotsta0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hot Start - engine 1 (failure_enum)
                    struct rel_hotsta1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hotsta1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hot Start - engine 2 (failure_enum)
                    struct rel_hotsta2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hotsta2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hot Start - engine 3 (failure_enum)
                    struct rel_hotsta3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hotsta3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hot Start - engine 4 (failure_enum)
                    struct rel_hotsta4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hotsta4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hot Start - engine 5 (failure_enum)
                    struct rel_hotsta5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hotsta5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hot Start - engine 6 (failure_enum)
                    struct rel_hotsta6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hotsta6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hot Start - engine 7 (failure_enum)
                    struct rel_hotsta7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hotsta7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Left horizontal stabilizer separate (failure_enum)
                    struct rel_hstbL
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hstbL"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Right horizontal stabilizer separate (failure_enum)
                    struct rel_hstbR
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hstbR"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hung Start - engine 0 (failure_enum)
                    struct rel_hunsta0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hunsta0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hung Start - engine 1 (failure_enum)
                    struct rel_hunsta1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hunsta1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hung Start - engine 2 (failure_enum)
                    struct rel_hunsta2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hunsta2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hung Start - engine 3 (failure_enum)
                    struct rel_hunsta3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hunsta3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hung Start - engine 4 (failure_enum)
                    struct rel_hunsta4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hunsta4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hung Start - engine 5 (failure_enum)
                    struct rel_hunsta5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hunsta5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hung Start - engine 6 (failure_enum)
                    struct rel_hunsta6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hunsta6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hung Start - engine 7 (failure_enum)
                    struct rel_hunsta7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hunsta7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic System 1 (leak) (failure_enum)
                    struct rel_hydleak
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hydleak"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic System 2 (leak) (failure_enum)
                    struct rel_hydleak2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hydleak2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic System 1 (over pressure) (failure_enum)
                    struct rel_hydoverp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hydoverp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic System 2 (over pressure) (failure_enum)
                    struct rel_hydoverp2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hydoverp2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic System 1 (pump fail) (failure_enum)
                    struct rel_hydpmp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hydpmp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic System 2 (pump fail) (failure_enum)
                    struct rel_hydpmp2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hydpmp2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic System 3 (pump fail) (failure_enum)
                    struct rel_hydpmp3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hydpmp3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic System 4 (pump fail) (failure_enum)
                    struct rel_hydpmp4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hydpmp4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic System 5 (pump fail) (failure_enum)
                    struct rel_hydpmp5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hydpmp5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic System 6 (pump fail) (failure_enum)
                    struct rel_hydpmp6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hydpmp6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic System 7 (pump fail) (failure_enum)
                    struct rel_hydpmp7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hydpmp7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic System 8 (pump fail) (failure_enum)
                    struct rel_hydpmp8
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hydpmp8"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Hydraulic pump (electric) (failure_enum)
                    struct rel_hydpmp_ele
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_hydpmp_ele"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! AOA indicator heat (failure_enum)
                    struct rel_ice_AOA_heat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_AOA_heat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! AOA indicator heat (failure_enum)
                    struct rel_ice_AOA_heat2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_AOA_heat2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Alternate Air (failure_enum)
                    struct rel_ice_alt_air1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_alt_air1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Alternate Air (failure_enum)
                    struct rel_ice_alt_air2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_alt_air2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Brakes anti-ice (failure_enum)
                    struct rel_ice_brake_heat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_brake_heat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ice detector (failure_enum)
                    struct rel_ice_detect
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_detect"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Inlet heat, engine 1 (failure_enum)
                    struct rel_ice_inlet_heat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_inlet_heat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Inlet heat, engine 2 (failure_enum)
                    struct rel_ice_inlet_heat2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_inlet_heat2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Inlet heat, engine 3 (failure_enum)
                    struct rel_ice_inlet_heat3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_inlet_heat3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Inlet heat, engine 4 (failure_enum)
                    struct rel_ice_inlet_heat4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_inlet_heat4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Inlet heat, engine 5 (failure_enum)
                    struct rel_ice_inlet_heat5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_inlet_heat5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Inlet heat, engine 6 (failure_enum)
                    struct rel_ice_inlet_heat6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_inlet_heat6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Inlet heat, engine 7 (failure_enum)
                    struct rel_ice_inlet_heat7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_inlet_heat7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Inlet heat, engine 8 (failure_enum)
                    struct rel_ice_inlet_heat8
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_inlet_heat8"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Pitot heat 1 (failure_enum)
                    struct rel_ice_pitot_heat1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_pitot_heat1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Pitot heat 2 (failure_enum)
                    struct rel_ice_pitot_heat2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_pitot_heat2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop Heat, engine 1 (failure_enum)
                    struct rel_ice_prop_heat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_prop_heat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop Heat, engine 2 (failure_enum)
                    struct rel_ice_prop_heat2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_prop_heat2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop Heat, engine 3 (failure_enum)
                    struct rel_ice_prop_heat3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_prop_heat3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop Heat, engine 4 (failure_enum)
                    struct rel_ice_prop_heat4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_prop_heat4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop Heat, engine 5 (failure_enum)
                    struct rel_ice_prop_heat5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_prop_heat5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop Heat, engine 6 (failure_enum)
                    struct rel_ice_prop_heat6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_prop_heat6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop Heat, engine 7 (failure_enum)
                    struct rel_ice_prop_heat7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_prop_heat7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop Heat, engine 8 (failure_enum)
                    struct rel_ice_prop_heat8
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_prop_heat8"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Static heat 1 (failure_enum)
                    struct rel_ice_static_heat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_static_heat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Static heat 2 (failure_enum)
                    struct rel_ice_static_heat2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_static_heat2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Surface Boot - Deprecated - Do Not Use (failure_enum)
                    struct rel_ice_surf_boot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_surf_boot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Surface Heat (failure_enum)
                    struct rel_ice_surf_heat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_surf_heat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Surface Heat (failure_enum)
                    struct rel_ice_surf_heat2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_surf_heat2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Window Heat (failure_enum)
                    struct rel_ice_window_heat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ice_window_heat"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ignitor - engine 1 (failure_enum)
                    struct rel_ignitr0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ignitr0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ignitor - engine 2 (failure_enum)
                    struct rel_ignitr1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ignitr1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ignitor - engine 3 (failure_enum)
                    struct rel_ignitr2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ignitr2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ignitor - engine 4 (failure_enum)
                    struct rel_ignitr3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ignitr3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ignitor - engine 5 (failure_enum)
                    struct rel_ignitr4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ignitr4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ignitor - engine 6 (failure_enum)
                    struct rel_ignitr5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ignitr5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ignitor - engine 7 (failure_enum)
                    struct rel_ignitr6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ignitr6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Ignitor - engine 8 (failure_enum)
                    struct rel_ignitr7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ignitr7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Inverter 1 (failure_enum)
                    struct rel_invert0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_invert0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Inverter 2 (also in 740) (failure_enum)
                    struct rel_invert1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_invert1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing Gear 1 retract (failure_enum)
                    struct rel_lagear1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_lagear1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing Gear 2 retract (failure_enum)
                    struct rel_lagear2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_lagear2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing Gear 3 retract (failure_enum)
                    struct rel_lagear3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_lagear3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing Gear 4 retract (failure_enum)
                    struct rel_lagear4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_lagear4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing Gear 5 retract (failure_enum)
                    struct rel_lagear5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_lagear5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Left Brakes (failure_enum)
                    struct rel_lbrakes
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_lbrakes"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Beacon lights (failure_enum)
                    struct rel_lites_beac
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_lites_beac"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! HUD lights (failure_enum)
                    struct rel_lites_hud
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_lites_hud"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Instrument Lighting (failure_enum)
                    struct rel_lites_ins
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_lites_ins"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing Lights (failure_enum)
                    struct rel_lites_land
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_lites_land"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Nav lights (failure_enum)
                    struct rel_lites_nav
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_lites_nav"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Strobe lights (failure_enum)
                    struct rel_lites_strobe
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_lites_strobe"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Taxi lights (failure_enum)
                    struct rel_lites_taxi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_lites_taxi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Localizer (failure_enum)
                    struct rel_loc
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_loc"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Left Magneto Fail - engine 1 (failure_enum)
                    struct rel_magLFT0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_magLFT0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Left Magneto Fail - engine 2 (failure_enum)
                    struct rel_magLFT1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_magLFT1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Left Magneto Fail - engine 3 (failure_enum)
                    struct rel_magLFT2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_magLFT2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Left Magneto Fail - engine 4 (failure_enum)
                    struct rel_magLFT3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_magLFT3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Left Magneto Fail - engine 5 (failure_enum)
                    struct rel_magLFT4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_magLFT4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Left Magneto Fail - engine 6 (failure_enum)
                    struct rel_magLFT5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_magLFT5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Left Magneto Fail - engine 7 (failure_enum)
                    struct rel_magLFT6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_magLFT6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Left Magneto Fail - engine 8 (failure_enum)
                    struct rel_magLFT7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_magLFT7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Right Magneto Fail - engine 1 (failure_enum)
                    struct rel_magRGT0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_magRGT0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Right Magneto Fail - engine 2 (failure_enum)
                    struct rel_magRGT1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_magRGT1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Right Magneto Fail - engine 3 (failure_enum)
                    struct rel_magRGT2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_magRGT2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Right Magneto Fail - engine 4 (failure_enum)
                    struct rel_magRGT3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_magRGT3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Right Magneto Fail - engine 5 (failure_enum)
                    struct rel_magRGT4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_magRGT4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Right Magneto Fail - engine 6 (failure_enum)
                    struct rel_magRGT5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_magRGT5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Right Magneto Fail - engine 7 (failure_enum)
                    struct rel_magRGT6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_magRGT6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Right Magneto Fail - engine 8 (failure_enum)
                    struct rel_magRGT7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_magRGT7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Marker Beacons (failure_enum)
                    struct rel_marker
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_marker"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc wing 1 separate (failure_enum)
                    struct rel_mwing1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_mwing1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc wing 2 separate (failure_enum)
                    struct rel_mwing2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_mwing2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc wing 3 separate (failure_enum)
                    struct rel_mwing3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_mwing3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc wing 4 separate (failure_enum)
                    struct rel_mwing4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_mwing4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc wing 5 separate (failure_enum)
                    struct rel_mwing5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_mwing5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc wing 6 separate (failure_enum)
                    struct rel_mwing6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_mwing6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc wing 7 separate (failure_enum)
                    struct rel_mwing7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_mwing7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Misc wing 8 separate (failure_enum)
                    struct rel_mwing8
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_mwing8"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Nav-1 radio (failure_enum)
                    struct rel_nav1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_nav1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Nav-2 radio (failure_enum)
                    struct rel_nav2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_nav2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Nav and com 1 radio (failure_enum)
                    struct rel_navcom1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_navcom1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Nav and com 2 radio (failure_enum)
                    struct rel_navcom2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_navcom2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - Oil Pressure 1 (failure_enum)
                    struct rel_oilp_ind_0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_oilp_ind_0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - Oil Pressure 2 (failure_enum)
                    struct rel_oilp_ind_1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_oilp_ind_1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Oil Pump - engine 1 (failure_enum)
                    struct rel_oilpmp0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_oilpmp0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Oil Pump - engine 2 (failure_enum)
                    struct rel_oilpmp1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_oilpmp1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Oil Pump - engine 3 (failure_enum)
                    struct rel_oilpmp2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_oilpmp2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Oil Pump - engine 4 (failure_enum)
                    struct rel_oilpmp3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_oilpmp3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Oil Pump - engine 5 (failure_enum)
                    struct rel_oilpmp4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_oilpmp4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Oil Pump - engine 6 (failure_enum)
                    struct rel_oilpmp5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_oilpmp5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Oil Pump - engine 7 (failure_enum)
                    struct rel_oilpmp6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_oilpmp6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Oil Pump - engine 8 (failure_enum)
                    struct rel_oilpmp7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_oilpmp7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - Oil Temperature 1 (failure_enum)
                    struct rel_oilt_ind_0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_oilt_ind_0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Panel Indicator Inop - Oil Temperature 2 (failure_enum)
                    struct rel_oilt_ind_1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_oilt_ind_1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! AutoPilot (Computer) (failure_enum)
                    struct rel_otto
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_otto"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Passenger oxygen on (failure_enum)
                    struct rel_pass_o2_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pass_o2_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Pitot 1 - Blockage (failure_enum)
                    struct rel_pitot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pitot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Pitot 2 - Blockage (failure_enum)
                    struct rel_pitot2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pitot2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop sync (failure_enum)
                    struct rel_prop_sync
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prop_sync"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop governor fail to coarse - engine 1 (failure_enum)
                    struct rel_prpcrs0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prpcrs0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop governor fail to coarse - engine 2 (failure_enum)
                    struct rel_prpcrs1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prpcrs1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop governor fail to coarse - engine 3 (failure_enum)
                    struct rel_prpcrs2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prpcrs2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop governor fail to coarse - engine 4 (failure_enum)
                    struct rel_prpcrs3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prpcrs3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop governor fail to coarse - engine 5 (failure_enum)
                    struct rel_prpcrs4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prpcrs4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop governor fail to coarse - engine 6 (failure_enum)
                    struct rel_prpcrs5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prpcrs5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop governor fail to coarse - engine 7 (failure_enum)
                    struct rel_prpcrs6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prpcrs6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop governor fail to coarse - engine 8 (failure_enum)
                    struct rel_prpcrs7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prpcrs7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop governor fail to fine - engine 1 (failure_enum)
                    struct rel_prpfin0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prpfin0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop governor fail to fine - engine 2 (failure_enum)
                    struct rel_prpfin1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prpfin1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop governor fail to fine - engine 3 (failure_enum)
                    struct rel_prpfin2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prpfin2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop governor fail to fine - engine 4 (failure_enum)
                    struct rel_prpfin3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prpfin3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop governor fail to fine - engine 5 (failure_enum)
                    struct rel_prpfin4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prpfin4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop governor fail to fine - engine 6 (failure_enum)
                    struct rel_prpfin5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prpfin5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop governor fail to fine - engine 7 (failure_enum)
                    struct rel_prpfin6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prpfin6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Prop governor fail to fine - engine 8 (failure_enum)
                    struct rel_prpfin7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_prpfin7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Drive Shaft - engine 1 (failure_enum)
                    struct rel_pshaft0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pshaft0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Drive Shaft - engine 2 (failure_enum)
                    struct rel_pshaft1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pshaft1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Drive Shaft - engine 3 (failure_enum)
                    struct rel_pshaft2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pshaft2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Drive Shaft - engine 4 (failure_enum)
                    struct rel_pshaft3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pshaft3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Drive Shaft - engine 5 (failure_enum)
                    struct rel_pshaft4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pshaft4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Drive Shaft - engine 6 (failure_enum)
                    struct rel_pshaft5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pshaft5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Drive Shaft - engine 7 (failure_enum)
                    struct rel_pshaft6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pshaft6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Drive Shaft - engine 8 (failure_enum)
                    struct rel_pshaft7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pshaft7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Pylon 1a Separate (failure_enum)
                    struct rel_pyl1a
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pyl1a"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Pylon 1b Separate (failure_enum)
                    struct rel_pyl1b
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pyl1b"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Pylon 2a Separate (failure_enum)
                    struct rel_pyl2a
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pyl2a"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Pylon 2b Separate (failure_enum)
                    struct rel_pyl2b
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pyl2b"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Pylon 3a Separate (failure_enum)
                    struct rel_pyl3a
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pyl3a"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Pylon 3b Separate (failure_enum)
                    struct rel_pyl3b
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pyl3b"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Pylon 4a Separate (failure_enum)
                    struct rel_pyl4a
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pyl4a"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Pylon 4b Separate (failure_enum)
                    struct rel_pyl4b
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pyl4b"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Pylon 5a Separate (failure_enum)
                    struct rel_pyl5a
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pyl5a"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Pylon 5b Separate (failure_enum)
                    struct rel_pyl5b
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pyl5b"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Pylon 6a Separate (failure_enum)
                    struct rel_pyl6a
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pyl6a"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Pylon 6b Separate (failure_enum)
                    struct rel_pyl6b
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pyl6b"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Pylon 7a Separate (failure_enum)
                    struct rel_pyl7a
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pyl7a"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Pylon 7b Separate (failure_enum)
                    struct rel_pyl7b
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pyl7b"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Pylon 8a Separate (failure_enum)
                    struct rel_pyl8a
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pyl8a"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Pylon 8b Separate (failure_enum)
                    struct rel_pyl8b
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_pyl8b"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Right Brakes (failure_enum)
                    struct rel_rbrakes
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_rbrakes"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Deploy - engine 1 (failure_enum)
                    struct rel_revdep0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revdep0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Deploy - engine 2 (failure_enum)
                    struct rel_revdep1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revdep1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Deploy - engine 3 (failure_enum)
                    struct rel_revdep2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revdep2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Deploy - engine 4 (failure_enum)
                    struct rel_revdep3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revdep3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Deploy - engine 5 (failure_enum)
                    struct rel_revdep4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revdep4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Deploy - engine 6 (failure_enum)
                    struct rel_revdep5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revdep5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Deploy - engine 7 (failure_enum)
                    struct rel_revdep6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revdep6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Deploy - engine 8 (failure_enum)
                    struct rel_revdep7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revdep7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Inop - engine 1 (failure_enum)
                    struct rel_revers0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revers0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Inop - engine 2 (failure_enum)
                    struct rel_revers1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revers1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Inop - engine 3 (failure_enum)
                    struct rel_revers2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revers2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Inop - engine 4 (failure_enum)
                    struct rel_revers3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revers3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Inop - engine 5 (failure_enum)
                    struct rel_revers4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revers4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Inop - engine 6 (failure_enum)
                    struct rel_revers5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revers5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Inop - engine 7 (failure_enum)
                    struct rel_revers6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revers6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Inop - engine 8 (failure_enum)
                    struct rel_revers7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revers7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Locked - engine 1 (failure_enum)
                    struct rel_revloc0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revloc0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Locked - engine 2 (failure_enum)
                    struct rel_revloc1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revloc1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Locked - engine 3 (failure_enum)
                    struct rel_revloc2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revloc2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Locked - engine 4 (failure_enum)
                    struct rel_revloc3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revloc3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Locked - engine 5 (failure_enum)
                    struct rel_revloc4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revloc4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Locked - engine 6 (failure_enum)
                    struct rel_revloc5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revloc5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Locked - engine 7 (failure_enum)
                    struct rel_revloc6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revloc6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Thrust Reversers Locked - engine 8 (failure_enum)
                    struct rel_revloc7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_revloc7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Yaw Trim Runaway (failure_enum)
                    struct rel_rud_trim_run
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_rud_trim_run"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Runway Hot ITT - engine 1 (failure_enum)
                    struct rel_runITT0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_runITT0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Runway Hot ITT - engine 2 (failure_enum)
                    struct rel_runITT1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_runITT1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Runway Hot ITT - engine 3 (failure_enum)
                    struct rel_runITT2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_runITT2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Runway Hot ITT - engine 4 (failure_enum)
                    struct rel_runITT3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_runITT3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Runway Hot ITT - engine 5 (failure_enum)
                    struct rel_runITT4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_runITT4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Runway Hot ITT - engine 6 (failure_enum)
                    struct rel_runITT5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_runITT5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Runway Hot ITT - engine 7 (failure_enum)
                    struct rel_runITT6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_runITT6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Runway Hot ITT - engine 8 (failure_enum)
                    struct rel_runITT7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_runITT7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Runway lites Inoperative (failure_enum)
                    struct rel_rwy_lites
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_rwy_lites"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Seize - engine 1 (failure_enum)
                    struct rel_seize_0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_seize_0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Seize - engine 2 (failure_enum)
                    struct rel_seize_1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_seize_1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Seize - engine 3 (failure_enum)
                    struct rel_seize_2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_seize_2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Seize - engine 4 (failure_enum)
                    struct rel_seize_3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_seize_3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Seize - engine 5 (failure_enum)
                    struct rel_seize_4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_seize_4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Seize - engine 6 (failure_enum)
                    struct rel_seize_5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_seize_5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Seize - engine 7 (failure_enum)
                    struct rel_seize_6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_seize_6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Engine Seize - engine 8 (failure_enum)
                    struct rel_seize_7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_seize_7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! autopilot servos failed - ailerons (failure_enum)
                    struct rel_servo_ailn
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_servo_ailn"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! autopilot servos failed - elevators (failure_enum)
                    struct rel_servo_elev
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_servo_elev"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! autopilot servos failed - rudder/yaw damper (failure_enum)
                    struct rel_servo_rudd
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_servo_rudd"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! autopilot servos failed - throttles (failure_enum)
                    struct rel_servo_thro
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_servo_thro"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Smoke in cockpit (failure_enum)
                    struct rel_smoke_cpit
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_smoke_cpit"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Artificial Horizon (Pilot) (failure_enum)
                    struct rel_ss_ahz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ss_ahz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Altimeter (Pilot) (failure_enum)
                    struct rel_ss_alt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ss_alt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Airspeed Indicator (Pilot) (failure_enum)
                    struct rel_ss_asi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ss_asi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Directional Gyro (Pilot) (failure_enum)
                    struct rel_ss_dgy
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ss_dgy"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Turn indicator (Pilot) (failure_enum)
                    struct rel_ss_tsi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ss_tsi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vertical Velocity Indicator (Pilot) (failure_enum)
                    struct rel_ss_vvi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_ss_vvi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Stall warning has failed (failure_enum)
                    struct rel_stall_warn
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_stall_warn"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Starter - engine 1 (failure_enum)
                    struct rel_startr0
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_startr0"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Starter - engine 2 (failure_enum)
                    struct rel_startr1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_startr1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Starter - engine 3 (failure_enum)
                    struct rel_startr2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_startr2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Starter - engine 4 (failure_enum)
                    struct rel_startr3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_startr3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Starter - engine 5 (failure_enum)
                    struct rel_startr4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_startr4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Starter - engine 6 (failure_enum)
                    struct rel_startr5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_startr5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Starter - engine 7 (failure_enum)
                    struct rel_startr6
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_startr6"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Starter - engine 8 (failure_enum)
                    struct rel_startr7
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_startr7"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Static 1 - Blockage (failure_enum)
                    struct rel_static
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_static"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Static system 1 - Error (failure_enum)
                    struct rel_static1_err
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_static1_err"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Static 2 - Blockage (failure_enum)
                    struct rel_static2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_static2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Static system 2 - Error (failure_enum)
                    struct rel_static2_err
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_static2_err"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Stability Augmentation (failure_enum)
                    struct rel_stbaug
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_stbaug"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Throttle inop giving max thrust (failure_enum)
                    struct rel_throt_hi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_throt_hi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Throttle inop giving min thrust (failure_enum)
                    struct rel_throt_lo
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_throt_lo"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing gear 1 tire blowout (failure_enum)
                    struct rel_tire1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_tire1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing gear 2 tire blowout (failure_enum)
                    struct rel_tire2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_tire2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing gear 3 tire blowout (failure_enum)
                    struct rel_tire3
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_tire3"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing gear 4 tire blowout (failure_enum)
                    struct rel_tire4
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_tire4"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Landing gear 5 tire blowout (failure_enum)
                    struct rel_tire5
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_tire5"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! roll trim (failure_enum)
                    struct rel_trim_ail
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_trim_ail"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Pitch Trim (failure_enum)
                    struct rel_trim_elv
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_trim_elv"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Yaw Trim (failure_enum)
                    struct rel_trim_rud
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_trim_rud"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Tail rotor transmission (failure_enum)
                    struct rel_trotor
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_trotor"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vacuum System 1 - Pump Failure (failure_enum)
                    struct rel_vacuum
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_vacuum"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vacuum System 2 - Pump Failure (failure_enum)
                    struct rel_vacuum2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_vacuum2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! VASIs Inoperative (failure_enum)
                    struct rel_vasi
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_vasi"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vertical stabilizer 1 separate (failure_enum)
                    struct rel_vstb1
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_vstb1"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Vertical stabilizer 2 separate (failure_enum)
                    struct rel_vstb2
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_vstb2"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wind shear/microburst (failure_enum)
                    struct rel_wind_shear
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_wind_shear"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing separations - left wing 1 (failure_enum)
                    struct rel_wing1L
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_wing1L"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing separations - right wing 1 (failure_enum)
                    struct rel_wing1R
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_wing1R"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing separations - left wing 2 (failure_enum)
                    struct rel_wing2L
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_wing2L"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing separations - right wing 2 (failure_enum)
                    struct rel_wing2R
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_wing2R"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing separations - left wing 3 (failure_enum)
                    struct rel_wing3L
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_wing3L"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing separations - right wing 3 (failure_enum)
                    struct rel_wing3R
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_wing3R"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing separations - left wing 4 (failure_enum)
                    struct rel_wing4L
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_wing4L"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Wing separations - right wing 4 (failure_enum)
                    struct rel_wing4R
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_wing4R"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Transponder failure (failure_enum)
                    struct rel_xpndr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/failures/rel_xpndr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! g430 datarefs
                namespace g430
                {
                    //! If true, vertical guidance is a glide slope - otherwise it is a GPS vertical guidance indicator.  Comes from the physical units! (boolean)
                    struct G430_is_vloc
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/g430/G430_is_vloc"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2;
                    };

                }

                //! misc datarefs
                namespace misc
                {
                    //! Enable logging of network data (boolean)
                    struct debug_network
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/misc/debug_network"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! The frame rate period. Use the reciprocal to get the frame rate (e.g. 1/mnw.prd).  Writable via override_timestep in 11.10 (secs)
                    struct frame_rate_period
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/misc/frame_rate_period"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is how close XP time matches real time. Ideal ratio is 1.  NOTE: in 930 and later time ratio is always 1.0. (secs)
                    struct time_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/misc/time_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! override datarefs
                namespace override
                {
                    //! this override lets third party add-ons write to the TCAS source data array (boolean)
                    struct override_TCAS
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_TCAS"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override ADF radios (boolean)
                    struct override_adf
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_adf"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! overrides when the airport lites go on and off. (boolean)
                    struct override_airport_lites
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_airport_lites"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override annunciators (boolean)
                    struct override_annunciators
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_annunciators"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override control of the artificial stability system (boolean)
                    struct override_artstab
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_artstab"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override the autopilot's brains (boolean)
                    struct override_autopilot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_autopilot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! overrides speed, heading, and rocking of boats. index 0=carrier, 1=frigate (boolean)
                    struct override_boats
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_boats"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2;
                    };

                    //! Override camera control.  NOTE: DO NOT USE, USE XPLMCAMERA!! (boolean)
                    struct override_camera
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_camera"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! overrides building and drawing of clouds as well as white-out-in-cloud effects (boolean)
                    struct override_clouds
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_clouds"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! overrides individual control surfaces, e.g. sim/flightmodel/controls/lail1def (boolean)
                    struct override_control_surfaces
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_control_surfaces"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override DME distances (boolean)
                    struct override_dme
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_dme"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! overrides all engine calculations - write to LMN and g_nrml/side/axil. (boolean)
                    struct override_engines
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_engines"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override all parts of the flight system at once (boolean)
                    struct override_flightcontrol
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_flightcontrol"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override flight director needles (both axes) (boolean)
                    struct override_flightdir
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_flightdir"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override flight director needles (pitch only) (boolean)
                    struct override_flightdir_ptch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_flightdir_ptch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override flight director needles (roll only) (boolean)
                    struct override_flightdir_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_flightdir_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override the FMS going to the next waypoint. (boolean)
                    struct override_fms_advance
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_fms_advance"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! overrides all force calculations - write to LMN and g_nrml/side/axil. (boolean)
                    struct override_forces
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_forces"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! overrides fuel flow variable sim/flightmodel/engine/ENGN_FF_ (boolean)
                    struct override_fuel_flow
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_fuel_flow"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! this override turns off transfer and dump and lets the plugin decide if the engine gets fuel (boolean)
                    struct override_fuel_system
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_fuel_system"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override gear and brake status (boolean)
                    struct override_gearbrake
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_gearbrake"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override GPS computer (boolean)
                    struct override_gps
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_gps"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! set this override to disable Austin's trucks. (boolean)
                    struct override_ground_trucks
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_ground_trucks"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override ground interactions (see sim/flightmodel/ground) - in v11 this was gone until 11.30. (boolean)
                    struct override_groundplane
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_groundplane"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! overrides engine temp vars sim/flightmodel/engine/ENGN_EGT_c and ENGN_ITT_c (boolean)
                    struct override_itt_egt
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_itt_egt"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override control of the joystick deflections (overrides stick, yoke, pedals, keys, mouse, and auto-coordination) (boolean)
                    struct override_joystick
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_joystick"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override just heading (yaw) control (disables auto-coordination). Use yoke_heading_ratio. (boolean)
                    struct override_joystick_heading
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_joystick_heading"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override just pitch control. Use yoke_pitch_ratio. (boolean)
                    struct override_joystick_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_joystick_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override just roll control. Use yoke_roll_ratio. (boolean)
                    struct override_joystick_roll
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_joystick_roll"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override the mixture controls.  Use ENGN_mixt to edit. (boolean)
                    struct override_mixture
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_mixture"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override nav1 receiver (boolean)
                    struct override_nav1_needles
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_nav1_needles"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override nav2 receiver (boolean)
                    struct override_nav2_needles
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_nav2_needles"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override raw heading flown by nav (for GPS that fly by roll commands) (boolean)
                    struct override_nav_heading
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_nav_heading"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override navcom radios (boolean)
                    struct override_navneedles
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_navneedles"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! override the sims crew and passenger oxygen system, so a plugin can control the oxygen system itself (boolean)
                    struct override_oxygen_system
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_oxygen_system"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override the AI's control of the plane via the autopilot (boolean)
                    struct override_plane_ai_autopilot
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_plane_ai_autopilot"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! Override position updates of this plane (boolean)
                    struct override_planepath
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_planepath"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 20;
                    };

                    //! override the sims pressurization control, so a plugin can control cabin pressurization itself. (boolean)
                    struct override_pressurization
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_pressurization"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override the prop mode.  Use ENGN_propmode to edit. (boolean)
                    struct override_prop_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_prop_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override the prop pitch.  Use POINT_pitch_deg_use to edit. (boolean)
                    struct override_prop_pitch
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_prop_pitch"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Override the throttles. Use ENGN_thro_use to control them. (boolean)
                    struct override_throttles
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_throttles"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! this overrides the sim's time step.  when enabled, xtim.prd_sim, sim/operation/misc/frame_rate_period is plugin-writable (boolean)
                    struct override_timestep
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_timestep"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! this override gives plguins control of sim/flightmodel2/controls/left_brake_ratio and right_brake_ratio (boolean)
                    struct override_toe_brakes
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_toe_brakes"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! overrides all engine calculations but not the prop - write the torque your motor generates while the prop will still be simulated by X-Plane (boolean)
                    struct override_torque_motors
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_torque_motors"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! overrides the steering of individual gear from tiller/rudder. (boolean)
                    struct override_wheel_steer
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/override/override_wheel_steer"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! prefs datarefs
                namespace prefs
                {
                    //! Controls whether the AI controls the user's plane (boolean)
                    struct ai_flies_aircraft
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/prefs/ai_flies_aircraft"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! misc datarefs
                    namespace misc
                    {
                        //! Returns true if the sim provides a low-mem lua allocator via inter-plugin messaging. (bool)
                        struct has_lua_alloc
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/operation/prefs/misc/has_lua_alloc"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                        //! Current language (enum)
                        struct language
                        {
                            //! Dataref name
                            static constexpr const char *name() { return "sim/operation/prefs/misc/language"; }
                            //! Can be written to?
                            static constexpr bool writable = false;
                            //! Dataref type
                            using type = int;
                            //! Not an array dataref
                            static constexpr bool is_array = false;
                        };

                    }

                    //! Are we in replay mode? (enum)
                    struct replay_mode
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/prefs/replay_mode"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! On crash, do we reset the AC to the nearest airport? - gone in v11, read only dref returns false for compatibility. (boolean)
                    struct reset_on_crash
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/prefs/reset_on_crash"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Start up with the plane running? (boolean)
                    struct startup_running
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/prefs/startup_running"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! show text ATC messages? (boolean)
                    struct text_out
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/prefs/text_out"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! True if the user has enabled the experimental flight model. (boolean)
                    struct using_experimental_fm
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/prefs/using_experimental_fm"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Show text warning for otherwise hard to see things like carb-icing? (boolean)
                    struct warn_nonobvious_stuff
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/prefs/warn_nonobvious_stuff"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Warn if we exceed max g-forces on aircraft (boolean)
                    struct warn_overgforce
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/prefs/warn_overgforce"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Warn if we exceed max airframe speed (boolean)
                    struct warn_overspeed
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/prefs/warn_overspeed"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Warn if we exceed max flap extended speed (boolean)
                    struct warn_overspeed_flaps
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/prefs/warn_overspeed_flaps"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Warn if we exceed max gear deployed speed (boolean)
                    struct warn_overspeed_gear
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/prefs/warn_overspeed_gear"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! sound datarefs
                namespace sound
                {
                    //! Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness) (0-1)
                    struct copilot_volume_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/copilot_volume_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness) (0-1)
                    struct engine_volume_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/engine_volume_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness) (0-1)
                    struct enviro_volume_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/enviro_volume_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness) (0-1)
                    struct exterior_volume_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/exterior_volume_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Volume level for the avionics fan, ratio from 0 (silent) to 1 (max loudness) (0-1)
                    struct fan_volume_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/fan_volume_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Volume level for ground contact effects, ratio from 0 (silent) to 1 (max loudness) (0-1)
                    struct ground_volume_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/ground_volume_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does this machine have sound hardware that X-Plane understands? (boolean)
                    struct has_sound
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/has_sound"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Does this machine have speech synth capabilities? (boolean)
                    struct has_speech_synth
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/has_speech_synth"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 1 if we are in this space, 0 if outside, and a fraction as we transition through the borer region (0-1)
                    struct inside_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/inside_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 64;
                    };

                    //! Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness) (0-1)
                    struct interior_volume_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/interior_volume_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Master Volume (0-1)
                    struct master_volume_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/master_volume_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Volume level for propeller sound effects, ratio from 0 (silent) to 1 (max loudness) (0-1)
                    struct prop_volume_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/prop_volume_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Volume level for the com radios, ratio from 0 (silent) to 1 (max loudness) (0-1)
                    struct radio_volume_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/radio_volume_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is sound on (set by user) (boolean)
                    struct sound_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/sound_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Is speech synth on (set by user) (boolean)
                    struct speech_on
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/speech_on"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness) (0-1)
                    struct ui_volume_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/ui_volume_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Canopy position: 0 = closed, 1 = open - these ALWAYS reflect the USER's plane (even when used on an AI) so they are appropriate for SOUND MIXING. (ratio)
                    struct users_canopy_open_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/users_canopy_open_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! How open is the door, 0 = closed, 1 = open - these ALWAYS reflect the USER's plane (even when used on an AI) so they are appropriate for SOUND MIXING. (ratio)
                    struct users_door_open_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/users_door_open_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 10;
                    };

                    //! Volume level for warning systems, ratio from 0 (silent) to 1 (max loudness) (0-1)
                    struct warning_volume_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/warning_volume_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Volume level for weather sound effects, ratio from 0 (silent) to 1 (max loudness) (0-1)
                    struct weather_volume_ratio
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/sound/weather_volume_ratio"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! windows datarefs
                namespace windows
                {
                    //! This is X-Plane's system native window as an int (either an HWND or WindowRef pre 102) (HWND)
                    struct system_window
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/windows/system_window"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is X-Plane's system native window as an array of two ints - low 32 bits first (either an HWND or WindowRef) (HWND)
                    struct system_window_64
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/operation/windows/system_window_64"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2;
                    };

                }

            }

            //! physics datarefs
            namespace physics
            {
                //! The earth's mass-gravity constant (m^3/s^2)
                struct earth_mu
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/physics/earth_mu"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! average pressure at sea level, current planet (pascals)
                struct earth_pressure_p
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/physics/earth_pressure_p"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Earth's radius (meters)
                struct earth_radius_m
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/physics/earth_radius_m"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Average sea level temp, current planet (celsius)
                struct earth_temp_c
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/physics/earth_temp_c"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! gravitational acceleration of earth AT SEA LEVEL
                struct g_sealevel
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/physics/g_sealevel"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Are we showing metric pressure indications (boolean)
                struct metric_press
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/physics/metric_press"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Are we showing metric temperature indications (boolean)
                struct metric_temp
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/physics/metric_temp"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! rho at sea level, current planet
                struct rho_sea_level
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/physics/rho_sea_level"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! rho of water
                struct rho_water
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/physics/rho_water"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

            }

            //! test datarefs
            namespace test
            {
                //! this test dataref is used internally for testing our models (ratio)
                struct test_float
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/test/test_float"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

            }

            //! time datarefs
            namespace time
            {
                //! Smoothed time to draw each full sim frame in seconds.  This is 1.0 / FPS. (seconds)
                struct framerate_period
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/framerate_period"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! This is the multiplier on ground speed, for faster travel via double-distance (ratio)
                struct ground_speed
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/ground_speed"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! This is the multiplier on ground speed, as float value, for faster travel via double-distance (ratio)
                struct ground_speed_flt
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/ground_speed_flt"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! elapsed time on the Hobbs meter (seconds)
                struct hobbs_time
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/hobbs_time"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! true if we are in replay mode, false if we are flying (boolean)
                struct is_in_replay
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/is_in_replay"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Date in days since January 1st (days)
                struct local_date_days
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/local_date_days"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Local time  (seconds since midnight??) (seconds)
                struct local_time_sec
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/local_time_sec"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Is the sim paused?  Use cmd keys to change this. (boolean)
                struct paused
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/paused"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! This is the multiplier for real-time...1 = realtime, 2 = 2x, 0 = paused, etc. (ratio)
                struct sim_speed
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/sim_speed"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The actual time-speed increase the sim has achieved - takes into account fps limiting. (ratio)
                struct sim_speed_actual
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/sim_speed_actual"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The actual time-speed increase the sim has achieved - takes into account fps limiting and time dilation if fps<19. (ratio)
                struct sim_speed_actual_ogl
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/sim_speed_actual_ogl"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Total time elapsed on the timer (seconds)
                struct timer_elapsed_time_sec
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/timer_elapsed_time_sec"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Is the timer running? (boolean)
                struct timer_is_running_sec
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/timer_is_running_sec"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Total time since the flight got reset by something (seconds)
                struct total_flight_time_sec
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/total_flight_time_sec"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Total time the sim has been up (seconds)
                struct total_running_time_sec
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/total_running_time_sec"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Use system date and time for local time (boolean)
                struct use_system_time
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/use_system_time"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Zulu time  (seconds since midnight??) (seconds)
                struct zulu_time_sec
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/time/zulu_time_sec"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

            }

            //! version datarefs
            namespace version
            {
                //! This string contains the date and time that this x-plane was built. (string)
                struct sim_build_string
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/version/sim_build_string"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 256;
                };

                //! This is the internal build number - it is a unique integer that always increases and is unique with each beta.  For example, 10.51b5 might be 105105.  There is no guarantee that the build numbe (last 2 digits) are in sync with the official beta number. (integer)
                struct xplane_internal_version
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/version/xplane_internal_version"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! This is the internal build number - it is a unique integer that always increases and is unique with each beta.  For example, 10.51b5 might be 105105.  There is no guarantee that the build numbe (last 2 digits) are in sync with the official beta number. (integer)
                struct xplanee_internal_version
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/version/xplanee_internal_version"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! This string contains the date and time that the XPLM DLL was built. (string)
                struct xplm_build_string
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/version/xplm_build_string"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 256;
                };

            }

            //! weapons datarefs
            namespace weapons
            {
                //! (placeholder) (float)
                struct AV_msc
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/AV_msc"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct Jxx_unitmass
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/Jxx_unitmass"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct Jyy_unitmass
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/Jyy_unitmass"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! MI
                struct Jzz_unitmass
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/Jzz_unitmass"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct L
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/L"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct M
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/M"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct N
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/N"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct Prad
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/Prad"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct Qrad
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/Qrad"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct Rrad
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/Rrad"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct V_msc
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/V_msc"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct X_body_aero
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/X_body_aero"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct Y_body_aero
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/Y_body_aero"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Centroid
                struct Z_body_aero
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/Z_body_aero"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (V10 style!) 0 = In carriage/still in the gun/reloaded, 1 = firing, and 2 = destroyed (enum)
                struct action_mode
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/action_mode"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Mass in addition to ammo... like the gun itself, and bomb racks.
                struct added_mass
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/added_mass"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! 0 = safe (will NOT explode), 1 = armed (WILL explode) (enum)
                struct armed
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/armed"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct bul_area
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/bul_area"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct bul_muzzle_speed
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/bul_muzzle_speed"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct bul_rounds
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/bul_rounds"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct bul_rounds_per_sec
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/bul_rounds_per_sec"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct cgY
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/cgY"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct cgZ
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/cgZ"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct conv_range
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/conv_range"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct del_psi
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/del_psi"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Delta to target, for data output
                struct del_the
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/del_the"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct dist_point
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/dist_point"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct dist_targ
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/dist_targ"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Rudder and elevator steering inputs
                struct elev_rat
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/elev_rat"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! 0 = not firing, 1 = firing (This is the launcher that the wpn is attached to, for actual wpn status, also check action_mode and/or next_bull_time) (enum)
                struct firing
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/firing"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (V10 style!) Weapon can go fly free... (enum)
                struct free_flyer
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/free_flyer"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Remember we can have drop tanks
                struct fuel_warhead_mass_max
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/fuel_warhead_mass_max"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct fuel_warhead_mass_now
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/fuel_warhead_mass_now"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct fx_axis
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/fx_axis"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct fy_axis
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/fy_axis"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Flight-status
                struct fz_axis
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/fz_axis"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Aimable guns for c130 Spectre, etc
                struct gun_del_psi_deg_max
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/gun_del_psi_deg_max"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Aimable guns for c130 Spectre, etc
                struct gun_del_the_deg_max
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/gun_del_the_deg_max"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct las_range
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/las_range"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! For heat or radar-guided, you must keep the target within this cone to track him
                struct mis_cone_width
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/mis_cone_width"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct mis_crat_per_deg_bore
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/mis_crat_per_deg_bore"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct mis_crat_per_degpersec
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/mis_crat_per_degpersec"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct mis_crat_per_degpersec_bore
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/mis_crat_per_degpersec_bore"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct mis_drag_chute_S
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/mis_drag_chute_S"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct mis_drag_co
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/mis_drag_co"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! delay
                struct mis_duration1
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/mis_duration1"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! boost
                struct mis_duration2
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/mis_duration2"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! sustain
                struct mis_duration3
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/mis_duration3"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! delay
                struct mis_thrust1
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/mis_thrust1"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! boost
                struct mis_thrust2
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/mis_thrust2"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! sustain
                struct mis_thrust3
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/mis_thrust3"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! For guns, this is the next fire time
                struct next_bull_time
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/next_bull_time"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Angle relative to the aircraft (Deg)
                struct phi
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/phi"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Angle relative to the aircraft (Deg)
                struct psi
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/psi"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct q1
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/q1"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct q2
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/q2"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct q3
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/q3"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct q4
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/q4"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct rudd_rat
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/rudd_rat"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct s_frn
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/s_frn"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct s_sid
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/s_sid"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Area
                struct s_top
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/s_top"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! shell datarefs
                namespace shell
                {
                    //! TODO (V11TODO)
                    struct is_attached
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/weapons/shell/is_attached"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! TODO (V11TODO)
                    struct thrust_rat
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/weapons/shell/thrust_rat"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

                //! Bomb targets
                struct targ_h
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/targ_h"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct targ_lat
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/targ_lat"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct targ_lon
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/targ_lon"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Target index (int)
                struct target_index
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/target_index"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Angle relative to the aircraft (Deg)
                struct the
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/the"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Speed and dist to target for data output
                struct time_point
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/time_point"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Warhead and casing, fuel and tank
                struct total_weapon_mass_max
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/total_weapon_mass_max"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct total_weapon_mass_now
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/total_weapon_mass_now"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (V10 style!) For the geometry we scan right into the acf structure unused array-spaces. (enum)
                struct type_
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/type"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct vx
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/vx"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct vy
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/vy"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct vz
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/vz"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (V10 style!) Conventional or nuke (enum)
                struct warhead_type
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/warhead_type"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! This is the number of weapons available via datarefs. (int)
                struct weapon_count
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/weapon_count"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! (placeholder) (float)
                struct x
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/x"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! This allows us to use our drawing, smoothing, editing, s-t, normal-vector, plotting, etc.
                struct x_wpn_att
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/x_wpn_att"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder) (float)
                struct y
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/y"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Code to do the weapons as well as everything else.
                struct y_wpn_att
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/y_wpn_att"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! Flight-status
                struct z
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/z"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

                //! (placeholder)  (float)
                struct z_wpn_att
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weapons/z_wpn_att"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Is an array dataref
                    static constexpr bool is_array = true;
                    //! Size of array dataref
                    static constexpr size_t size = 25;
                };

            }

            //! weather datarefs
            namespace weather
            {
                //! This is the barometric pressure at the point the current flight is at. (29.92+-....)
                struct barometer_current_inhg
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/barometer_current_inhg"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! +- .... (29.92)
                struct barometer_sealevel_inhg
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/barometer_sealevel_inhg"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! MSL >= 0 (meters)
                struct cloud_base_msl_m_0
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/cloud_base_msl_m[0]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! MSL >= 0 (meters)
                struct cloud_base_msl_m_1
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/cloud_base_msl_m[1]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! MSL >= 0 (meters)
                struct cloud_base_msl_m_2
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/cloud_base_msl_m[2]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! 0..6 (Coverage)
                struct cloud_coverage_0
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/cloud_coverage[0]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! 0..6 (Coverage)
                struct cloud_coverage_1
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/cloud_coverage[1]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! 0..6 (Coverage)
                struct cloud_coverage_2
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/cloud_coverage[2]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! >= 0 (meters)
                struct cloud_tops_msl_m_0
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/cloud_tops_msl_m[0]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! >= 0 (meters)
                struct cloud_tops_msl_m_1
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/cloud_tops_msl_m[1]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! >= 0 (meters)
                struct cloud_tops_msl_m_2
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/cloud_tops_msl_m[2]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! enumeration (Cloud)
                struct cloud_type_0
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/cloud_type[0]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! enumeration (Cloud)
                struct cloud_type_1
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/cloud_type[1]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! enumeration (Cloud)
                struct cloud_type_2
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/cloud_type[2]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! C (degrees)
                struct dewpoi_sealevel_c
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/dewpoi_sealevel_c"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! If true, the sim will attempt to download real weather files when real weather is enabled. (0,1)
                struct download_real_weather
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/download_real_weather"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! This is the acceleration of gravity for the current planet. (meters/sec^2)
                struct gravity_mss
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/gravity_mss"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Whether a real weather file has been located. (0,1)
                struct has_real_weather_bool
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/has_real_weather_bool"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The amount of rain on the airplane windshield as a ratio from 0 to 1. ([0..1])
                struct precipitation_on_aircraft_ratio
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/precipitation_on_aircraft_ratio"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! - 1.0] ([0.0)
                struct rain_percent
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/rain_percent"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The density of the air in kg/cubic meters.
                struct rho
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/rho"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The friction constant for runways (how wet they are).  0 = good, 1 = fair, 2 = poor (0,1,2)
                struct runway_friction
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/runway_friction"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! 0 = uniform conditions, 1 = patchy conditions (Booelan)
                struct runway_is_patchy
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/runway_is_patchy"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! - 360) ([0)
                struct shear_direction_degt_0
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/shear_direction_degt[0]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! - 360) ([0)
                struct shear_direction_degt_1
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/shear_direction_degt[1]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! - 360) ([0)
                struct shear_direction_degt_2
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/shear_direction_degt[2]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! >= 0 (kts)
                struct shear_speed_kt_0
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/shear_speed_kt[0]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! >= 0 (kts)
                struct shear_speed_kt_1
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/shear_speed_kt[1]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! >= 0 (kts)
                struct shear_speed_kt_2
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/shear_speed_kt[2]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The atmospheric density as a ratio compared to sea level.
                struct sigma
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/sigma"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! This is the speed of sound in meters/second at the plane's location. (meters/sec)
                struct speed_sound_ms
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/speed_sound_ms"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! C (degrees)
                struct temperature_ambient_c
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/temperature_ambient_c"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! C (degrees)
                struct temperature_le_c
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/temperature_le_c"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The temperature at sea level. (degreesC)
                struct temperature_sealevel_c
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/temperature_sealevel_c"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! ??? (degreesC)
                struct temperature_tropo_c
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/temperature_tropo_c"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! MSL >= 0 (m)
                struct thermal_altitude_msl_m
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/thermal_altitude_msl_m"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! - 1.0] ([0.0)
                struct thermal_percent
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/thermal_percent"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! >= 0 (m/s)
                struct thermal_rate_ms
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/thermal_rate_ms"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! - 1.0] ([0.0)
                struct thunderstorm_percent
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/thunderstorm_percent"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! ??? (meters)
                struct tropo_alt_mtr
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/tropo_alt_mtr"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! - 10] ([0)
                struct turbulence_0
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/turbulence[0]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! - 10] ([0)
                struct turbulence_1
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/turbulence[1]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! - 10] ([0)
                struct turbulence_2
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/turbulence[2]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Whether a real weather file is in use. (0,1)
                struct use_real_weather_bool
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/use_real_weather_bool"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! >= 0 (meters)
                struct visibility_reported_m
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/visibility_reported_m"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Amplitude of waves in the water (height of waves) (meters)
                struct wave_amplitude
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wave_amplitude"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Direction of waves. (degrees)
                struct wave_dir
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wave_dir"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = int;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Length of a single wave in the water (meters)
                struct wave_length
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wave_length"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Speed of water waves (meters/second)
                struct wave_speed
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wave_speed"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! >= 0 (meters)
                struct wind_altitude_msl_m_0
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wind_altitude_msl_m[0]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! >= 0 (meters)
                struct wind_altitude_msl_m_1
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wind_altitude_msl_m[1]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! >= 0 (meters)
                struct wind_altitude_msl_m_2
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wind_altitude_msl_m[2]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! The effective direction of the wind at the plane's location. ([0-359))
                struct wind_direction_degt
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wind_direction_degt"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! - 360) ([0)
                struct wind_direction_degt_0
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wind_direction_degt[0]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! - 360) ([0)
                struct wind_direction_degt_1
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wind_direction_degt[1]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! - 360) ([0)
                struct wind_direction_degt_2
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wind_direction_degt[2]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Wind direction vector in OpenGL coordinates, X component. (meters/sec)
                struct wind_now_x_msc
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wind_now_x_msc"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Wind direction vector in OpenGL coordinates, Y component. (meters/sec)
                struct wind_now_y_msc
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wind_now_y_msc"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! Wind direction vector in OpenGL coordinates, Z component. (meters/sec)
                struct wind_now_z_msc
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wind_now_z_msc"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! >= 0 (msc)
                struct wind_speed_kt
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wind_speed_kt"; }
                    //! Can be written to?
                    static constexpr bool writable = false;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! >= 0 (kts)
                struct wind_speed_kt_0
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wind_speed_kt[0]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! >= 0 (kts)
                struct wind_speed_kt_1
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wind_speed_kt[1]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! >= 0 (kts)
                struct wind_speed_kt_2
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wind_speed_kt[2]"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

                //! - 1.0] ([0.0)
                struct wind_turbulence_percent
                {
                    //! Dataref name
                    static constexpr const char *name() { return "sim/weather/wind_turbulence_percent"; }
                    //! Can be written to?
                    static constexpr bool writable = true;
                    //! Dataref type
                    using type = float;
                    //! Not an array dataref
                    static constexpr bool is_array = false;
                };

            }

            //! world datarefs
            namespace world
            {
                //! boat datarefs
                namespace boat
                {
                    //! X position of the carrier ILS transmitter (in coordinates of the OBJ model) (meters)
                    struct carrier_ILS_offset_x_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/carrier_ILS_offset_x_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Z position of the carrier ILS transmitter (in coordinates of the OBJ model) (meters)
                    struct carrier_ILS_offset_z_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/carrier_ILS_offset_z_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Relative heading of the approach path from the carrier's heading (degrees(true))
                    struct carrier_approach_heading
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/carrier_approach_heading"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! X position (in model coordinates) of the end of the cat-shot track (meters)
                    struct carrier_catshot_end_x_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/carrier_catshot_end_x_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Z position (in model coordinates) of the end of the cat-shot track (meters)
                    struct carrier_catshot_end_z_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/carrier_catshot_end_z_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Relative heading of the catshot relative to the carrier's heading (degrees(true))
                    struct carrier_catshot_heading
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/carrier_catshot_heading"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! X position (in model coordinates) of the start of the cat-shot track (meters)
                    struct carrier_catshot_start_x_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/carrier_catshot_start_x_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Z position (in model coordinates) of the start of the cat-shot track (meters)
                    struct carrier_catshot_start_z_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/carrier_catshot_start_z_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! 0=no cat shot set up,1=cat shot waiting to launch,2=in progress (enum)
                    struct carrier_catshot_status
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/carrier_catshot_status"; }
                        //! Can be written to?
                        static constexpr bool writable = false;
                        //! Dataref type
                        using type = int;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deck height of the carrier (in coordinates of the OBJ model) (meters)
                    struct carrier_deck_height_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/carrier_deck_height_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! X position of the frigate ILS transmitter (in coordinates of the OBJ model) (meters)
                    struct frigate_ILS_offset_x_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/frigate_ILS_offset_x_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Z position of the frigate ILS transmitter (in coordinates of the OBJ model) (meters)
                    struct frigate_ILS_offset_z_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/frigate_ILS_offset_z_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Deck height of the frigate (in coordinates of the OBJ model) (meters)
                    struct frigate_deck_height_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/frigate_deck_height_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! Heading of the boat in degrees from true north. Index 0=carrier,1=frigate, writable using override_boats. (degrees(true))
                    struct heading_deg
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/heading_deg"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2;
                    };

                    //! Degrees that the boat pitches up for each meter of wave height. Index 0=carrier,1=frigate, writable using override_boats. (deg/meter)
                    struct pitch_amplitude_deg_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/pitch_amplitude_deg_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2;
                    };

                    //! Frequency at which the boat pitches up and down. Index 0=carrier,1=frigate, writable using override_boats. (hz)
                    struct pitch_frequency_hz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/pitch_frequency_hz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2;
                    };

                    //! degrees that the boat rolls from side to side for each meter of wave height.  Index 0=carrier,1=frigate, writable using override_boats. (deg/meter)
                    struct roll_amplitude_deg_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/roll_amplitude_deg_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2;
                    };

                    //! Frequency at which the boat rolls from side to side.  Index 0=carrier,1=frigate, writable using override_boats. (hz)
                    struct roll_frequency_hz
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/roll_frequency_hz"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2;
                    };

                    //! Velocity of the boat in meters per second in its current direction.  Index 0=carrier,1=frigate, writable using override_boats. (meters/sec)
                    struct velocity_msc
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/velocity_msc"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2;
                    };

                    //! X Position of the boat in meters in the local coordinate OpenGL coordinate system. Index 0=carrier,1=frigate, writable using override_boats. (meters)
                    struct x_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/x_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2;
                    };

                    //! Y Position of the boat in meters in the local coordinate OpenGL coordinate system. Index 0=carrier,1=frigate, writable using override_boats. (meters)
                    struct y_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/y_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2;
                    };

                    //! Z Position of the boat in meters in the local coordinate OpenGL coordinate system. Index 0=carrier,1=frigate, writable using override_boats. (meters)
                    struct z_mtr
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/boat/z_mtr"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Is an array dataref
                        static constexpr bool is_array = true;
                        //! Size of array dataref
                        static constexpr size_t size = 2;
                    };

                }

                //! winch datarefs
                namespace winch
                {
                    //! This is the initial length of cable for a winch takeoff. (meters)
                    struct winch_initial_length
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/winch/winch_initial_length"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is the maximum horsepower the winch can deliver reeling in the cable. Cable speed will decay with higher force on the cable to not exceed this limit. (bhp)
                    struct winch_max_bhp
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/winch/winch_max_bhp"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is how long it takes the winch to reach maximum speed for a glider winch take-off. (seconds)
                    struct winch_ramp_up_time_sec
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/winch/winch_ramp_up_time_sec"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                    //! This is how fast the winch moves at its maximum speed. (knots)
                    struct winch_speed_knots
                    {
                        //! Dataref name
                        static constexpr const char *name() { return "sim/world/winch/winch_speed_knots"; }
                        //! Can be written to?
                        static constexpr bool writable = true;
                        //! Dataref type
                        using type = float;
                        //! Not an array dataref
                        static constexpr bool is_array = false;
                    };

                }

            }

        }

    }
}
